<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="repeatedPlanning" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Repeated planning</title>

  <section>
    <title>Introduction to repeated planning</title>

    <para>The world constantly changes. The planning facts used to create a solution, might change before or during the
    execution of that solution. There are 3 types of situations:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Unforeseen fact changes</emphasis>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <emphasis role="bold">backup planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Unknown long term future facts</emphasis>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <emphasis role="bold">continuous planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Constantly changing planning facts</emphasis>: Use <emphasis role="bold">real-time
        planning</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>Waiting to start planning - to lower the risk of planning facts changing - usually isn't a good way to deal
    with that. More CPU time means a better planning solution. An incomplete plan is better than no plan.</para>

    <para>Luckily, the optimization algorithms support planning a solution that's already (partially) planned, known
    as repeated planning.</para>
  </section>

  <section xml:id="backupPlanning">
    <title>Backup planning</title>

    <para>Backup planning is the technique of adding extra score constraints to create space in the planning for when
    things go wrong. That creates a backup plan in the plan. For example: try to assign an employee as the spare
    employee (1 for every 10 shifts at the same time), keep 1 hospital bed open in each department, ...</para>

    <para>Then, when things go wrong (one of the employees calls in sick), change the planning facts on the original
    solution (delete the sick employee leave his/her shifts unassigned) and just restart the planning, starting from
    that solution, which has a different score now. The construction heuristics will fill in the newly created gaps
    (probably with the spare employee) and the metaheuristics will even improve it further.</para>
  </section>

  <section xml:id="continuousPlanning">
    <title>Continuous planning (windowed planning)</title>

    <para>Continuous planning is the technique of planning one or more upcoming planning windows at the same time and
    repeating that process monthly, weekly, daily or hourly. Because time is infinite, there are infinite future
    windows, so planning all future windows is impossible. Instead, plan only a fixed number of upcoming planning
    windows.</para>

    <para>Past planning windows are immutable. The first upcoming planning window is considered stable (unlikely to
    change), while later upcoming planning windows are considered draft (likely to change during the next planning
    effort). Distant future planning windows are not planned at all.</para>

    <para>Past planning windows have only <emphasis>immovable</emphasis> planning entities: the planning entities can no
    longer be changed (they are unable to move), but some of them are still needed in the score calculation, as they
    might affect some of the score constraints that apply on the upcoming planning entities. For example: when an
    employee should not work more than 5 days in a row, he shouldn't work today and tomorrow if he worked the past 4
    days already.</para>

    <para>Sometimes some planning entities are semi-immovable: they can be changed, but occur a certain score penalty if
    they differ from their original place. For example: avoid rescheduling hospital beds less than 2 days before the
    patient arrives (unless it's really worth it), avoid changing the airplane gate during the 2 hours before boarding
    (unless there is no alternative), ...</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Repeated_planning/continuousPlanningPatientAdmissionSchedule.png"
                   format="PNG"/>
      </imageobject>
    </mediaobject>

    <para>Notice the difference between the original planning of November 1th and the new planning of November 5th: some
    planning facts (F, H, I, J, K) changed, which results in unrelated planning entities (G) changing too.</para>

    <section>
      <title>Immovable planning entities</title>

      <para>To make some planning entities immovable, simply add an entity <literal>SelectionFilter</literal> that
      returns <literal>true</literal> if an entity is movable and <literal>false</literal> if it is immovable.</para>

      <programlisting language="java">public class MovableShiftAssignmentSelectionFilter implements SelectionFilter&lt;ShiftAssignment&gt; {

    public boolean accept(ScoreDirector scoreDirector, ShiftAssignment shiftAssignment) {
        ShiftDate shiftDate = shiftAssignment.getShift().getShiftDate();
        NurseRoster nurseRoster = (NurseRoster) scoreDirector.getWorkingSolution();
        return nurseRoster.getNurseRosterInfo().isInPlanningWindow(shiftDate);
    }

}</programlisting>

      <para>And configure it like this:</para>

      <programlisting language="java">@PlanningEntity(movableEntitySelectionFilter = MovableShiftAssignmentSelectionFilter.class)
public class ShiftAssignment {
    ...
}</programlisting>

      <warning>
        <para>Custom <literal>MoveListFactory</literal> and <literal>MoveIteratorFactory</literal> implementations must
        make sure that they don't move immovable entities.</para>
      </warning>
    </section>
  </section>

  <section xml:id="realTimePlanning">
    <title>Real-time planning (event based planning)</title>

    <para>To do real-time planning, first combine backup planning and continuous planning with short planning windows to
    lower the burden of real-time planning.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Repeated_planning/realTimePlanningVehicleRouting.png"
                   format="PNG"/>
      </imageobject>
    </mediaobject>

    <para>While the <literal>Solver</literal> is solving, an outside event might want to change one of the problem
    facts, for example an airplane is delayed and needs the runway at a later time. Do not change the problem fact
    instances used by the <literal>Solver</literal> while it is solving, as that will corrupt it. Instead, add a
    <literal>ProblemFactChange</literal> to the <literal>Solver</literal> which it will execute in the solver thread as
    soon as possible.</para>

    <programlisting language="java">public interface Solver {

    ...

    boolean addProblemFactChange(ProblemFactChange problemFactChange);

    boolean isEveryProblemFactChangeProcessed();

    ...

}</programlisting>

    <programlisting language="java">public interface ProblemFactChange {

    void doChange(ScoreDirector scoreDirector);

}</programlisting>

    <para>Here's an example:</para>

    <programlisting language="java">    public void deleteComputer(final CloudComputer computer) {
        solver.addProblemFactChange(new ProblemFactChange() {
            public void doChange(ScoreDirector scoreDirector) {
                CloudBalance cloudBalance = (CloudBalance) scoreDirector.getWorkingSolution();
                // First remove the planning fact from all planning entities that use it
                for (CloudProcess process : cloudBalance.getProcessList()) {
                    if (ObjectUtils.equals(process.getComputer(), computer)) {
                        scoreDirector.beforeVariableChanged(process, "computer");
                        process.setComputer(null);
                        scoreDirector.afterVariableChanged(process, "computer");
                    }
                }
                // Next remove it the planning fact itself
                for (Iterator&lt;CloudComputer&gt; it = cloudBalance.getComputerList().iterator(); it.hasNext(); ) {
                    CloudComputer workingComputer = it.next();
                    if (ObjectUtils.equals(workingComputer, computer)) {
                        scoreDirector.beforeProblemFactRemoved(workingComputer);
                        it.remove(); // remove from list
                        scoreDirector.beforeProblemFactRemoved(workingComputer);
                        break;
                    }
                }
            }
        });
    }</programlisting>

    <warning>
      <para>Any change on the problem facts or planning entities in a <literal>ProblemFactChange</literal> must be done
      on the instances of the <literal>Solution</literal> of <literal>scoreDirector.getWorkingSolution()</literal>. Note
      that these are not the same entity instances as in the bestSolution (or therefore your user interface): they are
      clones.</para>
    </warning>

    <warning>
      <para>Any change on the problem facts or planning entities in a <literal>ProblemFactChange</literal> must be told
      to the <literal>ScoreDirector</literal>.</para>
    </warning>

    <note>
      <para>Many types of changes can leave a planning entity uninitialized, resulting in a partially initialized
      solution. That's fine, as long as the first solver phase can handle it. All construction heuristics solver phases
      can handle that, so it's recommended to configure such a <literal>SolverPhase</literal> as the first phase.</para>
    </note>

    <para>In essence, the <literal>Solver</literal> will stop, run the <literal>ProblemFactChange</literal> and restart.
    Each <literal>SolverPhase</literal> will run again. Each configured <literal>Termination</literal> (except
    <literal>terminateEarly</literal>) will reset. This means the construction heuristic will run again, but because
    little or no planning variables will be uninitialized (unless you have a <link
    linkend="nullablePlanningVariable">nullable planning variable</link>), this won't take long.</para>

    <para>Normally, you won't configure any <literal>Termination</literal>, just call
    <literal>Solver.terminateEarly()</literal> when the results are needed. Alternatively, you can subscribe to the
    <literal>BestSolutionChangedEvent</literal>. A <literal>BestSolutionChangedEvent</literal> doesn't guarantee that
    every <literal>ProblemFactChange</literal> has been processed already, so check
    <literal>Solver.isEveryProblemFactChangeProcessed()</literal> and ignore any
    <literal>BestSolutionChangedEvent</literal> fired while that method returns <literal>false</literal>.</para>
  </section>
</chapter>
