<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="repeatedPlanning" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Repeated Planning</title>

  <section xml:id="introductionToRepeatedPlanning">
    <title>Introduction to Repeated Planning</title>

    <para>The world constantly changes. The problem facts used to create a solution, might change before or during the
    execution of that solution. There are different situations (which can be combined):</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Unforeseen fact changes</emphasis>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <emphasis role="bold">backup planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Impossible to assign all entities now</emphasis>: Leave some unassigned. For example: there are
        10 shifts at the same time to assign but only 9 employees to handle shifts. Use <emphasis
        role="bold">overconstrained planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Unknown long term future facts</emphasis>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <emphasis role="bold">continuous planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Constantly changing problem facts</emphasis>: Use <emphasis role="bold">real-time
        planning</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>Waiting to start planning - to lower the risk of problem facts changing - usually isn't a good way to deal
    with that. More CPU time means a better planning solution. An incomplete plan is better than no plan.</para>

    <para>Luckily, the optimization algorithms support planning a solution that's already (partially) planned, known as
    repeated planning.</para>
  </section>

  <section xml:id="backupPlanning">
    <title>Backup Planning</title>

    <para>Backup planning is the technique of adding extra score constraints to create space in the planning for when
    things go wrong. That creates a backup plan in the plan. For example: try to assign an employee as the spare
    employee (1 for every 10 shifts at the same time), keep 1 hospital bed open in each department, ...</para>

    <para>Then, when things go wrong (one of the employees calls in sick), change the problem facts on the original
    solution (delete the sick employee leave his/her shifts unassigned) and just restart the planning, starting from
    that solution, which has a different score now. The construction heuristics will fill in the newly created gaps
    (probably with the spare employee) and the metaheuristics will even improve it further.</para>
  </section>

  <section xml:id="overconstrainedPlanning">
    <title>Overconstrained Planning</title>

    <para>When there is no feasible solution to assign all planning entities, it's often desired to assign as many
    entities as possible without breaking hard constraints. This is called overconstrained planning.</para>

    <para>By default, Planner will assign all planning entities, overload the planning values and therefore break hard
    constraints. There are 2 ways to avoid that:</para>

    <itemizedlist>
      <listitem>
        <para>Use <link linkend="nullablePlanningVariable">nullable</link> planning variables, so some entities are
        unassigned.</para>
      </listitem>

      <listitem>
        <para>Add virtual values to catch the unassigned entities.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="overconstrainedPlanningWithNullableVariables">
      <title>Overconstrained Planning with Nullable Variables</title>

      <para>If we handle overconstrained planning with nullable variables, the overload entities will be left
      unassigned:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Repeated_planning/overconstrainedPlanning.png"/>
        </imageobject>
      </mediaobject>

      <para>To implement this:</para>

      <orderedlist>
        <listitem>
          <para>Add a additional score level (usually a medium level between the hard and soft level) by switching <link
          linkend="scoreDefinition">ScoreDefinition</link>.</para>
        </listitem>

        <listitem>
          <para>Make the planning variable <link linkend="nullablePlanningVariable">nullable</link>.</para>
        </listitem>

        <listitem>
          <para>Add a score constraint on the new level (so usually a medium constraint) to penalize the number of
          unassigned entities (or a weighted sum of them).</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="overconstrainedPlanningWithVirutalValues">
      <title>Overconstrained Planning with Virtual Values</title>

      <para>In overconstrained planning it's often useful to know which resources are lacking. In overconstrained
      planning with virtual values, the solution indicates which resources to buy.</para>

      <para>To implement this:</para>

      <orderedlist>
        <listitem>
          <para>Add a additional score level (usually a medium level between the hard and soft level) by switching <link
          linkend="scoreDefinition">ScoreDefinition</link>.</para>
        </listitem>

        <listitem>
          <para>Add a number of virtual values. It can be difficult to determine a good formula to calculate that
          number:</para>

          <itemizedlist>
            <listitem>
              <para>Don't add too many, as that will decrease solver efficiency.</para>
            </listitem>

            <listitem>
              <para>Definitely don't add too few as that will lead to an infeasible solution.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Add a score constraint on the new level (so usually a medium constraint) to penalize the number of
          virtual assigned entities (or a weighted sum of them).</para>
        </listitem>

        <listitem>
          <para>Optionally change all soft constraints to ignore virtual assigned entities.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="continuousPlanning">
    <title>Continuous Planning (Windowed Planning)</title>

    <para>Continuous planning is the technique of planning one or more upcoming planning periods at the same time and
    repeating that process monthly, weekly, daily, hourly or even more frequently. Time is infinite, so planning all
    future time periods is impossible. Instead, plan a planning window of a fixed number of upcoming planning time
    periods, and consider anything beyond that out of scope.</para>

    <para>The planning window can be split up in several parts:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">History</emphasis>: Past time periods that immutable. It contains only immovable
        entities.</para>

        <itemizedlist>
          <listitem>
            <para>Historic entities can affect score constraints that apply to movable entities too. For example in
            nurse rostering, a nurse that has worked the last 5 historic days in a row, should not be assigned on the
            first tentative day of the planning window because then she's work too many days in a row.</para>
          </listitem>

          <listitem>
            <para>Do not load all historic entities in memory: even though immovable entities don't affect solving
            performance, they can cause out of memory problems when the data grows to years. Only load those that might
            still affect the current constraints with a good safety margin, for example load the past year.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Tentative</emphasis>: The first few time periods that are being planned freely for
        the last time. After this planning, their planning entities become <link
        linkend="immovablePlanningEntities">immovable</link> or <link
        linkend="nonvolatileReplanning">semi-immovable</link>.</para>

        <itemizedlist>
          <listitem>
            <para>The result of the tentative planning is usually shared with the business. For example in nurse
            rostering, the nurses will use this schedule to plan their personal lives. Changing that schedule later
            becomes disruptive (but if exceptions force us to do so, <link linkend="nonvolatileReplanning">we minimize
            disruption</link>).</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Draft</emphasis>: The latter time periods that are being planned freely, but not for
        the last time. They are likely to change again in the next planning effort.</para>

        <itemizedlist>
          <listitem>
            <para>The draft part is needed to assure that the tentatively planned entities will allow room of a good,
            feasible planning afterwards. It prevents you from painting yourself in a corner.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Future</emphasis> (out of scope): Planning entities that aren't in the current
        planning window.</para>

        <itemizedlist>
          <listitem>
            <para>If <link linkend="assigningTimeToPlanningEntities">time is a planning variable</link>, there is no
            future part. Instead, if the planning window is too small to plan all entities, you're dealing with <link
            linkend="overconstrainedPlanning">overconstrained planning</link>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <note>
      <para>The start of the planning window (so the first tentative time period) does <emphasis>not</emphasis> need to
      be now.</para>
    </note>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Repeated_planning/continuousPlanningPatientAdmissionSchedule.png"/>
      </imageobject>
    </mediaobject>

    <para>Notice the difference between the original planning of November 1th and the new planning of November 5th: some
    problem facts (F, H, I, J, K) changed meanwhile, which results in unrelated planning entities (G) changing
    too.</para>

    <section xml:id="immovablePlanningEntities">
      <title>Immovable Planning Entities</title>

      <para>To make some planning entities immovable, simply add an entity <literal>SelectionFilter</literal> that
      returns <literal>true</literal> if an entity is movable and <literal>false</literal> if it is immovable.</para>

      <programlisting language="java">public class MovableShiftAssignmentSelectionFilter implements SelectionFilter&lt;NurseRoster, ShiftAssignment&gt; {

    public boolean accept(ScoreDirector&lt;NurseRoster&gt; scoreDirector, ShiftAssignment shiftAssignment) {
        NurseRoster nurseRoster = scoreDirector.getWorkingSolution();
        ShiftDate shiftDate = shiftAssignment.getShift().getShiftDate();
        return nurseRoster.getNurseRosterInfo().isInPlanningWindow(shiftDate);
    }

}</programlisting>

      <para>And configure it like this:</para>

      <programlisting language="java">@PlanningEntity(movableEntitySelectionFilter = MovableShiftAssignmentSelectionFilter.class)
public class ShiftAssignment {
    ...
}</programlisting>

      <warning>
        <para>Custom <literal>MoveListFactory</literal> and <literal>MoveIteratorFactory</literal> implementations must
        make sure that they don't move immovable entities.</para>
      </warning>
    </section>

    <section xml:id="nonvolatileReplanning">
      <title>Nonvolatile Replanning to minimize disruption (Semi-movable Planning Entities)</title>

      <para>Replanning an existing plan can be very disruptive on the plan. If the plan affects humans (such as
      employees, drivers, ...), very disruptive changes are often undesirable. In such cases, nonvolatile replanning
      helps by restricting planning freedom: the gain of changing a plan must be higher than the disruption it causes.
      This is usually implemented by taxing all planning entities that change.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Repeated_planning/nonvolatileReplanning.png"/>
        </imageobject>
      </mediaobject>

      <para>For example, in the Machine Reassignment example, the entity has both the planning variable
      <literal>machine</literal> and its original value <literal>originalMachine</literal>:</para>

      <programlisting language="java">@PlanningEntity(...)
public class ProcessAssignment {

    private MrProcess process;
    private Machine originalMachine;
    private Machine machine;

    public Machine getOriginalMachine() {...}

    @PlanningVariable(...)
    public Machine getMachine() {...}

    public boolean isMoved() {
        return originalMachine != null &amp;&amp; originalMachine != machine;
    }

    ...
}</programlisting>

      <para>During planning, the planning variable <literal>machine</literal> changes. By comparing it with the
      originalMachine, a change in plan can be penalized:</para>

      <programlisting>rule "processMoved"
    when
        ProcessAssignment(moved == true)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1000);
end</programlisting>

      <para>The soft penalty of <literal>-1000</literal> means that a better solution is only accepted if it improves
      the soft score for at least <literal>1000</literal> points per variable changed (or if it improves the hard
      score).</para>
    </section>
  </section>

  <section xml:id="realTimePlanning">
    <title>Real-time Planning</title>

    <para>To do real-time planning, first combine <link linkend="backupPlanning">backup planning</link> and <link
    linkend="continuousPlanning">continuous planning</link> with short planning windows to lower the burden of real-time
    planning. As time passes, the problem itself changes:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Repeated_planning/realTimePlanningVehicleRouting.png"/>
      </imageobject>
    </mediaobject>

    <para>In the example above, 3 customers are added at different times (<literal>07:56</literal>,
    <literal>08:02</literal> and <literal>08:45</literal>), after the original customer set finished solving at
    <literal>07:55</literal> and in some cases after the vehicles already left. Planner can handle such scenario's with
    <literal>ProblemFactChange</literal> (in combination with <link linkend="immovablePlanningEntities">immovable
    planning entities</link>).</para>

    <section xml:id="problemFactChange">
      <title><literal>ProblemFactChange</literal></title>

      <para>While the <literal>Solver</literal> is solving, an outside event might want to change one of the problem
      facts, for example an airplane is delayed and needs the runway at a later time. Do not change the problem fact
      instances used by the <literal>Solver</literal> while it is solving (from another thread or even in the same
      thread), as that will corrupt it. Instead, add a <literal>ProblemFactChange</literal> to the
      <literal>Solver</literal> which it will execute in the solver thread as soon as possible.</para>

      <programlisting language="java">public interface Solver&lt;Solution_&gt; {

    ...

    boolean addProblemFactChange(ProblemFactChange&lt;Solution_&gt; problemFactChange);

    boolean isEveryProblemFactChangeProcessed();

    ...

}</programlisting>

      <programlisting language="java">public interface ProblemFactChange&lt;Solution_&gt; {

    void doChange(ScoreDirector&lt;Solution_&gt; scoreDirector);

}</programlisting>

      <para>Here's an example:</para>

      <programlisting language="java">    public void deleteComputer(final CloudComputer computer) {
        solver.addProblemFactChange(scoreDirector -&gt; {
            CloudBalance cloudBalance = scoreDirector.getWorkingSolution();
            // First remove the problem fact from all planning entities that use it
            for (CloudProcess process : cloudBalance.getProcessList()) {
                if (Objects.equals(process.getComputer(), computer)) {
                    scoreDirector.beforeVariableChanged(process, "computer");
                    process.setComputer(null);
                    scoreDirector.afterVariableChanged(process, "computer");
                }
            }
            scoreDirector.triggerVariableListeners();
            // A SolutionCloner does not clone problem fact lists (such as computerList)
            // Shallow clone the computerList so only workingSolution is affected, not bestSolution or guiSolution
            cloudBalance.setComputerList(new ArrayList&lt;&gt;(cloudBalance.getComputerList()));
            // Remove the problem fact itself
            for (Iterator&lt;CloudComputer&gt; it = cloudBalance.getComputerList().iterator(); it.hasNext(); ) {
                CloudComputer workingComputer = it.next();
                if (Objects.equals(workingComputer, computer)) {
                    scoreDirector.beforeProblemFactRemoved(workingComputer);
                    it.remove(); // remove from list
                    scoreDirector.afterProblemFactRemoved(workingComputer);
                    break;
                }
            }
        });
    }</programlisting>

      <warning>
        <para>Any change on the problem facts or planning entities in a <literal>ProblemFactChange</literal> must be
        told to the <literal>ScoreDirector</literal>.</para>
      </warning>

      <important>
        <para>To write a <literal>ProblemFactChange</literal> correctly, it's important to understand the behaviour of
        <link linkend="cloningASolution">a planning clone</link>:</para>

        <itemizedlist>
          <listitem>
            <para>Any change in a <literal>ProblemFactChange</literal> must be done on the <literal>Solution</literal>
            instance of <literal>scoreDirector.getWorkingSolution()</literal>. The <literal>workingSolution</literal> is
            <link linkend="cloningASolution">a planning clone</link> of the
            <literal>BestSolutionChangedEvent</literal>'s <literal>bestSolution</literal>. So the
            <literal>workingSolution</literal> in the <literal>Solver</literal> is never the same instance as the
            <literal>Solution</literal> in the rest of your application.</para>
          </listitem>

          <listitem>
            <para>A planning clone also clones the planning entities and planning entity collections. So any change on
            the planning entities must happen on the instances hold by
            <literal>scoreDirector.getWorkingSolution()</literal>.</para>
          </listitem>

          <listitem>
            <para>A planning clone does not clone the problem facts, nor the problem fact collections.
            <emphasis>Therefore the <literal>workingSolution</literal> and the <literal>bestSolution</literal> share the
            same problem fact instances and the same problem fact list instances.</emphasis></para>

            <para>Any problem fact or problem fact list changed by a <literal>ProblemFactChange</literal> must be
            problem cloned first (which can imply rerouting references in other problem facts and planning entities).
            Otherwise, if the <literal>workingSolution</literal> and <literal>bestSolution</literal> are used in
            different threads (for example a solver thread and a GUI event thread), a race condition can occur.</para>
          </listitem>
        </itemizedlist>
      </important>

      <note>
        <para>Many types of changes can leave a planning entity uninitialized, resulting in a partially initialized
        solution. That's fine, as long as the first solver phase can handle it. All construction heuristics solver
        phases can handle that, so it's recommended to configure such a solver phase as the first phase.</para>
      </note>

      <para>In essence, the <literal>Solver</literal> stops, runs the <literal>ProblemFactChange</literal> and <emphasis
      role="bold">restarts</emphasis>. This is a <emphasis>warm start</emphasis> because its initial solution is the
      adjusted best solution of the previous run. Each solver phase runs again. This implies the construction heuristic
      runs again, but because little or no planning variables are uninitialized (unless you have a <link
      linkend="nullablePlanningVariable">nullable planning variable</link>), it finishes much quicker than in a cold
      start.</para>

      <para>Each configured <literal>Termination</literal> resets (both in solver and phase configuration), but a
      previous call to <literal>terminateEarly()</literal> is not undone. Normally however, you won't configure any
      <literal>Termination</literal> (except in daemon mode), just call <literal>Solver.terminateEarly()</literal> when
      the results are needed. Alternatively, do configure a <literal>Termination</literal> and use the daemon mode in
      combination with <literal><link linkend="SolverEventListener">BestSolutionChangedEvent</link></literal> as
      described below.</para>
    </section>

    <section xml:id="daemon">
      <title>Daemon: <literal>solve()</literal> Does Not Return</title>

      <para>In real-time planning, it's often useful to have a solver thread wait when it runs out of work, and
      immediately resume solving a problem once new problem fact changes are added. Putting the
      <literal>Solver</literal> in daemon mode has these effects:</para>

      <itemizedlist>
        <listitem>
          <para>If the <literal>Solver</literal>'s <literal>Termination</literal> terminates, it does not return from
          <literal>solve()</literal> but blocks its thread instead (which frees up CPU power).</para>

          <itemizedlist>
            <listitem>
              <para>Except for <literal>terminateEarly()</literal>, which does make it return from
              <literal>solve()</literal>, freeing up system resources and allowing an application to shutdown
              gracefully.</para>
            </listitem>

            <listitem>
              <para>If a <literal>Solver</literal> starts with an empty planning entity collection, it waits in the
              blocked state immediately.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If a <literal>ProblemFactChange</literal> is added, it goes into the running state, applies the
          <literal>ProblemFactChange</literal> and runs the <literal>Solver</literal> again.</para>
        </listitem>
      </itemizedlist>

      <para>To configure the daemon mode:</para>

      <programlisting language="xml">&lt;solver&gt;
  &lt;daemon&gt;true&lt;/daemon&gt;
  ...
&lt;/solver&gt;</programlisting>

      <warning>
        <para>Don't forget to call <literal>Solver.terminateEarly()</literal> when your application needs to shutdown to
        avoid killing the solver thread unnaturally.</para>
      </warning>

      <para>Subscribe to the <literal><link linkend="SolverEventListener">BestSolutionChangedEvent</link></literal> to
      process new best solutions found by the solver thread. A <literal>BestSolutionChangedEvent</literal> doesn't
      guarantee that every <literal>ProblemFactChange</literal> has been processed already, nor that the solution is
      initialized and feasible. To ignore <literal>BestSolutionChangedEvent</literal>s with such invalid solutions, do
      this:</para>

      <programlisting language="java">    public void bestSolutionChanged(BestSolutionChangedEvent&lt;CloudBalance&gt; event) {
        if (event.isEveryProblemFactChangeProcessed()
                // Ignore infeasible (including uninitialized) solutions
                &amp;&amp; event.getNewBestSolution().getScore().isFeasible()) {
            ...
        }
    }</programlisting>

      <para>Use <literal>Score.isSolutionInitialized()</literal> instead of <literal>Score.isFeasible()</literal> to
      only ignore uninitialized solutions, but do accept infeasible solutions too.</para>
    </section>
  </section>
</chapter>
