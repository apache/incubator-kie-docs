<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="repeatedPlanning" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Repeated Planning</title>

  <section xml:id="introductionToRepeatedPlanning">
    <title>Introduction to Repeated Planning</title>

    <para>The world constantly changes. The problem facts used to create a solution, might change before or during the
    execution of that solution. There are different situations (which can be combined):</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Unforeseen fact changes</emphasis>: For example: an employee assigned to a shift calls in sick,
        an airplane scheduled to take off has a technical delay, one of the machines or vehicles break down, ... Use
        <emphasis role="bold">backup planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Impossible to assign all entities now</emphasis>: Leave some unassigned. For example: there are
        10 shifts at the same time to assign but only 9 employees to handle shifts. Use <emphasis
        role="bold">overconstrained planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Unknown long term future facts</emphasis>: For example: The hospital admissions for the next 2
        weeks are reliable, but those for week 3 and 4 are less reliable and for week 5 and beyond are not worth
        planning yet. Use <emphasis role="bold">continuous planning</emphasis>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Constantly changing problem facts</emphasis>: Use <emphasis role="bold">real-time
        planning</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>Waiting to start planning - to lower the risk of problem facts changing - usually isn't a good way to deal
    with that. More CPU time means a better planning solution. An incomplete plan is better than no plan.</para>

    <para>Luckily, the optimization algorithms support planning a solution that's already (partially) planned, known as
    repeated planning.</para>
  </section>

  <section xml:id="backupPlanning">
    <title>Backup Planning</title>

    <para>Backup planning is the technique of adding extra score constraints to create space in the planning for when
    things go wrong. That creates a backup plan in the plan. For example: try to assign an employee as the spare
    employee (1 for every 10 shifts at the same time), keep 1 hospital bed open in each department, ...</para>

    <para>Then, when things go wrong (one of the employees calls in sick), change the problem facts on the original
    solution (delete the sick employee leave his/her shifts unassigned) and just restart the planning, starting from
    that solution, which has a different score now. The construction heuristics will fill in the newly created gaps
    (probably with the spare employee) and the metaheuristics will even improve it further.</para>
  </section>

  <section xml:id="overconstrainedPlanning">
    <title>Overconstrained Planning</title>

    <para>When there is no feasible solution to assign all planning entities, it's often desired to assign as many
    entities as possible without breaking hard constraints. This is called overconstrained planning.</para>

    <para>To implement this:</para>

    <orderedlist>
      <listitem>
        <para>Add a additional score level (usually a medium level between the hard and soft level) by switching <link
        linkend="scoreDefinition">ScoreDefinition</link>.</para>
      </listitem>

      <listitem>
        <para>Make the planning variable <link linkend="nullablePlanningVariable">nullable</link>.</para>
      </listitem>

      <listitem>
        <para>Add a score constraint on the new level (so usually a medium constraint) to penalize the number of
        unassigned entities (or a weighted sum of them).</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="continuousPlanning">
    <title>Continuous Planning (Windowed Planning)</title>

    <para>Continuous planning is the technique of planning one or more upcoming planning windows at the same time and
    repeating that process monthly, weekly, daily or hourly. Because time is infinite, there are infinite future
    windows, so planning all future windows is impossible. Instead, plan only a fixed number of upcoming planning
    windows.</para>

    <para>Past planning windows are immutable. The first upcoming planning window is considered stable (unlikely to
    change), while later upcoming planning windows are considered draft (likely to change during the next planning
    effort). Distant future planning windows are not planned at all.</para>

    <para>Past planning windows have only <emphasis>immovable</emphasis> planning entities: the planning entities can no
    longer be changed (they are unable to move), but some of them are still needed in the score calculation, as they
    might affect some of the score constraints that apply on the upcoming planning entities. For example: when an
    employee should not work more than 5 days in a row, he shouldn't work today and tomorrow if he worked the past 4
    days already.</para>

    <para>Sometimes some planning entities are semi-immovable: they can be changed, but occur a certain score penalty if
    they differ from their original place. For example: avoid rescheduling hospital beds less than 2 days before the
    patient arrives (unless it's really worth it), avoid changing the airplane gate during the 2 hours before boarding
    (unless there is no alternative), ...</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Repeated_planning/continuousPlanningPatientAdmissionSchedule.png"/>
      </imageobject>
    </mediaobject>

    <para>Notice the difference between the original planning of November 1th and the new planning of November 5th: some
    problem facts (F, H, I, J, K) changed, which results in unrelated planning entities (G) changing too.</para>

    <section xml:id="immovablePlanningEntities">
      <title>Immovable Planning Entities</title>

      <para>To make some planning entities immovable, simply add an entity <literal>SelectionFilter</literal> that
      returns <literal>true</literal> if an entity is movable and <literal>false</literal> if it is immovable.</para>

      <programlisting language="java">public class MovableShiftAssignmentSelectionFilter implements SelectionFilter&lt;ShiftAssignment&gt; {

    public boolean accept(ScoreDirector scoreDirector, ShiftAssignment shiftAssignment) {
        ShiftDate shiftDate = shiftAssignment.getShift().getShiftDate();
        NurseRoster nurseRoster = (NurseRoster) scoreDirector.getWorkingSolution();
        return nurseRoster.getNurseRosterInfo().isInPlanningWindow(shiftDate);
    }

}</programlisting>

      <para>And configure it like this:</para>

      <programlisting language="java">@PlanningEntity(movableEntitySelectionFilter = MovableShiftAssignmentSelectionFilter.class)
public class ShiftAssignment {
    ...
}</programlisting>

      <warning>
        <para>Custom <literal>MoveListFactory</literal> and <literal>MoveIteratorFactory</literal> implementations must
        make sure that they don't move immovable entities.</para>
      </warning>
    </section>

    <section xml:id="nonvolatileReplanning">
      <title>Nonvolatile Replanning to minimize disruption (Semi-movable Planning Entities)</title>

      <para>Replanning an existing plan can be very disruptive on the plan. If the plan affects humans (such as
      employees, drivers, ...), very disruptive changes are often undesirable. In such cases, nonvolatile replanning
      helps: the gain of changing a plan must be higher than the disruption it causes.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Repeated_planning/nonvolatileReplanning.png"/>
        </imageobject>
      </mediaobject>

      <para>For example, in the Machine Reassignment example, the entity has both the planning variable
      <literal>machine</literal> and its original value <literal>originalMachine</literal>:</para>

      <programlisting language="java">@PlanningEntity(...)
public class ProcessAssignment {

    private MrProcess process;
    private Machine originalMachine;
    private Machine machine;

    public Machine getOriginalMachine() {...}

    @PlanningVariable(...)
    public Machine getMachine() {...}

    public boolean isMoved() {
        return originalMachine != null &amp;&amp; originalMachine != machine;
    }

    ...
}</programlisting>

      <para>During planning, the planning variable <literal>machine</literal> changes. By comparing it with the
      originalMachine, a change in plan can be penalized:</para>

      <programlisting>rule "processMoved"
    when
        ProcessAssignment(moved == true)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1000);
end</programlisting>

      <para>The soft penalty of <literal>-1000</literal> means that a better solution is only accepted if it improves
      the soft score for at least <literal>1000</literal> points per variable changed (or if it improves the hard
      score).</para>
    </section>
  </section>

  <section xml:id="realTimePlanning">
    <title>Real-time Planning</title>

    <para>To do real-time planning, first combine <link linkend="backupPlanning">backup planning</link> and <link
    linkend="continuousPlanning">continuous planning</link> with short planning windows to lower the burden of real-time
    planning. As time passes, the problem itself changes:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Repeated_planning/realTimePlanningVehicleRouting.png"/>
      </imageobject>
    </mediaobject>

    <para>In the example above, 3 customers are added at different times (<literal>07:56</literal>,
    <literal>08:02</literal> and <literal>08:45</literal>), after the original customer set finished solving at
    <literal>07:55</literal> and in some cases after the vehicles already left. Planner can handle such scenario's with
    <literal>ProblemFactChange</literal> (in combination with <link linkend="immovablePlanningEntities">immovable
    planning entities</link>).</para>

    <section xml:id="problemFactChange">
      <title><literal>ProblemFactChange</literal></title>

      <para>While the <literal>Solver</literal> is solving, an outside event might want to change one of the problem
      facts, for example an airplane is delayed and needs the runway at a later time. Do not change the problem fact
      instances used by the <literal>Solver</literal> while it is solving (from another thread or even in the same
      thread), as that will corrupt it. Instead, add a <literal>ProblemFactChange</literal> to the
      <literal>Solver</literal> which it will execute in the solver thread as soon as possible.</para>

      <programlisting language="java">public interface Solver {

    ...

    boolean addProblemFactChange(ProblemFactChange problemFactChange);

    boolean isEveryProblemFactChangeProcessed();

    ...

}</programlisting>

      <programlisting language="java">public interface ProblemFactChange {

    void doChange(ScoreDirector scoreDirector);

}</programlisting>

      <para>Here's an example:</para>

      <programlisting language="java">    public void deleteComputer(final CloudComputer computer) {
        solver.addProblemFactChange(new ProblemFactChange() {
            public void doChange(ScoreDirector scoreDirector) {
                CloudBalance cloudBalance = (CloudBalance) scoreDirector.getWorkingSolution();
                // First remove the problem fact from all planning entities that use it
                for (CloudProcess process : cloudBalance.getProcessList()) {
                    if (ObjectUtils.equals(process.getComputer(), computer)) {
                        scoreDirector.beforeVariableChanged(process, "computer");
                        process.setComputer(null);
                        scoreDirector.afterVariableChanged(process, "computer");
                    }
                }
                // A SolutionCloner does not clone problem fact lists (such as computerList)
                // Shallow clone the computerList so only workingSolution is affected, not bestSolution or guiSolution
                cloudBalance.setComputerList(new ArrayList&lt;CloudComputer&gt;(cloudBalance.getComputerList()));
                // Next remove it the problem fact itself
                for (Iterator&lt;CloudComputer&gt; it = cloudBalance.getComputerList().iterator(); it.hasNext(); ) {
                    CloudComputer workingComputer = it.next();
                    if (ObjectUtils.equals(workingComputer, computer)) {
                        scoreDirector.beforeProblemFactRemoved(workingComputer);
                        it.remove(); // remove from list
                        scoreDirector.beforeProblemFactRemoved(workingComputer);
                        break;
                    }
                }
            }
        });
    }</programlisting>

      <warning>
        <para>Any change on the problem facts or planning entities in a <literal>ProblemFactChange</literal> must be
        told to the <literal>ScoreDirector</literal>.</para>
      </warning>

      <important>
        <para>To write a <literal>ProblemFactChange</literal> correctly, it's important to understand the behaviour of
        <link linkend="cloningASolution">a planning clone</link>:</para>

        <itemizedlist>
          <listitem>
            <para>Any change in a <literal>ProblemFactChange</literal> must be done on the <literal>Solution</literal>
            instance of <literal>scoreDirector.getWorkingSolution()</literal>. The <literal>workingSolution</literal> is
            <link linkend="cloningASolution">a planning clone</link> of the
            <literal>BestSolutionChangedEvent</literal>'s <literal>bestSolution</literal>. So the
            <literal>workingSolution</literal> in the <literal>Solver</literal> is never the same instance as the
            <literal>Solution</literal> in the rest of your application.</para>
          </listitem>

          <listitem>
            <para>A planning clone also clones the planning entities and planning entity collections. So any change on
            the planning entities must happen on the instances hold by
            <literal>scoreDirector.getWorkingSolution()</literal>.</para>
          </listitem>

          <listitem>
            <para>A planning clone does not clone the problem facts, nor the problem fact collections.
            <emphasis>Therefore the <literal>workingSolution</literal> and the <literal>bestSolution</literal> share the
            same problem fact instances and the same problem fact list instances.</emphasis></para>

            <para>Any problem fact or problem fact list changed by a <literal>ProblemFactChange</literal> must be
            problem cloned first (which can imply rerouting references in other problem facts and planning entities).
            Otherwise, if the <literal>workingSolution</literal> and <literal>bestSolution</literal> are used in
            different threads (for example a solver thread and a GUI event thread), a race condition can occur.</para>
          </listitem>
        </itemizedlist>
      </important>

      <note>
        <para>Many types of changes can leave a planning entity uninitialized, resulting in a partially initialized
        solution. That's fine, as long as the first solver phase can handle it. All construction heuristics solver
        phases can handle that, so it's recommended to configure such a solver phase as the first phase.</para>
      </note>

      <para>In essence, the <literal>Solver</literal> stops, runs the <literal>ProblemFactChange</literal> and <emphasis
      role="bold">restarts</emphasis>. Each solver phase runs again. This implies the construction heuristic runs again,
      but because little or no planning variables are uninitialized (unless you have a <link
      linkend="nullablePlanningVariable">nullable planning variable</link>), this doesn't take long.</para>

      <para>Each configured phase <literal>Termination</literal> resets, but each solver Termination (including
      <literal>terminateEarly</literal>) does not reset. Normally however, you won't configure any
      <literal>Termination</literal>, just call <literal>Solver.terminateEarly()</literal> when the results are needed.
      Alternatively, use the daemon mode in combination with <literal><link
      linkend="SolverEventListener">BestSolutionChangedEvent</link></literal> as described below.</para>
    </section>

    <section xml:id="daemon">
      <title>Daemon: <literal>solve()</literal> Does Not Return</title>

      <para>In real-time planning, it's often useful to have a solver thread wait when it runs out of work, and
      immediately solve a problem once problem fact changes are added. Putting the Solver in daemon mode has these
      effects:</para>

      <itemizedlist>
        <listitem>
          <para>If the <literal>Solver</literal>'s <literal>Termination</literal> terminates, it does not return from
          <literal>solve()</literal> but waits instead (freeing up CPU).</para>

          <itemizedlist>
            <listitem>
              <para>Except for terminateEarly(), which does make it return from <literal>solve()</literal>, freeing up
              system resources (and allowing the application to shutdown gracefully).</para>
            </listitem>

            <listitem>
              <para>If a <literal>Solver</literal> starts with an empty planning entity collection, it goes to the
              waiting state immediately.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If a <literal>ProblemFactChange</literal> is added, it's processed and the <literal>Solver</literal>
          runs again.</para>
        </listitem>
      </itemizedlist>

      <para>To configure the daemon mode:</para>

      <programlisting language="xml">&lt;solver&gt;
  &lt;daemon&gt;true&lt;/daemon&gt;
  ...
&lt;/solver&gt;</programlisting>

      <warning>
        <para>Don't forget to call <literal>Solver.terminateEarly()</literal> when your application needs to shutdown to
        avoid killing the solver thread unnaturally.</para>
      </warning>

      <para>Subscribe to the <literal><link linkend="SolverEventListener">BestSolutionChangedEvent</link></literal> to
      process new best solutions found by the solver thread. A <literal>BestSolutionChangedEvent</literal> doesn't
      guarantee that every <literal>ProblemFactChange</literal> has been processed already, nor that the solution is
      initialized and feasible. To ignore <literal>BestSolutionChangedEvent</literal>s with such invalid solutions, do
      this:</para>

      <programlisting language="java">    public void bestSolutionChanged(BestSolutionChangedEvent&lt;CloudBalance&gt; event) {
        // Ignore invalid solutions
        if (event.isEveryProblemFactChangeProcessed()
                &amp;&amp; event.isNewBestSolutionInitialized()
                &amp;&amp; event.getNewBestSolution().getScore().isFeasible()) {
            ...
        }
    }</programlisting>
    </section>
  </section>
</chapter>
