<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="localSearch" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Local Search</title>

  <section xml:id="localSearchOverview">
    <title>Overview</title>

    <para>Local Search starts from an initial solution and evolves that single solution into a mostly better and better
    solution. It uses a single search path of solutions, not a search tree. At each solution in this path it evaluates a
    number of moves on the solution and applies the most suitable move to take the step to the next solution. It does
    that for a high number of iterations until it's terminated (usually because its time has run out).</para>

    <para>Local Search acts a lot like a human planner: it uses a single search path and moves facts around to find a
    good feasible solution. Therefore it's pretty natural to implement.</para>

    <para><emphasis role="bold">Local Search needs to start from an initialized solution</emphasis>, therefore
    it's usually required to configure a Construction Heuristic phase before it.</para>
  </section>

  <section xml:id="localSearchConcepts">
    <title>Local Search Concepts</title>

    <section xml:id="localSearchStepByStep">
      <title>Step by Step</title>

      <para>A step is the winning <literal>Move</literal>. Local Search tries a number of moves on the current solution
      and picks the best accepted move as the step:</para>

      <figure>
        <title>Decide the next step at step 0 (4 queens example)</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Local_search/decideNextStepNQueens04.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Because the move <emphasis>B0 to B3</emphasis> has the highest score (<literal>-3</literal>), it is picked
      as the next step. If multiple moves have the same highest score, one is picked randomly, in this case <emphasis>B0
      to B3</emphasis>. Note that <emphasis>C0 to C3</emphasis> (not shown) could also have been picked because it also
      has the score <literal>-3</literal>.</para>

      <para>The step is applied on the solution. From that new solution, Local Search tries every move again, to decide
      the next step after that. It continually does this in a loop, and we get something like this:</para>

      <figure>
        <title>All steps (4 queens example)</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Local_search/allStepsNQueens04.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Notice that Local Search doesn't use a search tree, but a search path. The search path is highlighted by the
      green arrows. At each step it tries all selected moves, but unless it's the step, it doesn't investigate that
      solution further. This is one of the reasons why Local Search is very scalable.</para>

      <para>As shown above, Local Search solves the 4 queens problem by starting with the starting solution and make the
      following steps sequentially:</para>

      <orderedlist>
        <listitem>
          <para><emphasis>B0 to B3</emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis>D0 to B2</emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis>A0 to B1</emphasis></para>
        </listitem>
      </orderedlist>

      <para>Turn on <literal>debug</literal> logging for the category <literal>org.optaplanner</literal> to show those
      steps in the log:</para>

      <programlisting>INFO  Solving started: time spent (0), best score (-6), environment mode (REPRODUCIBLE), random (JDK with seed 0).
DEBUG     LS step (0), time spent (20), score (-3), new best score (-3), accepted/selected move count (12/12), picked move (Queen-1 {Row-0 -&gt; Row-3}).
DEBUG     LS step (1), time spent (31), score (-1), new best score (-1), accepted/selected move count (12/12), picked move (Queen-3 {Row-0 -&gt; Row-2}).
DEBUG     LS step (2), time spent (40), score (0), new best score (0), accepted/selected move count (12/12), picked move (Queen-0 {Row-0 -&gt; Row-1}).
INFO  Local Search phase (0) ended: time spent (41), best score (0), score calculation speed (5000/sec), step total (3).
INFO  Solving ended: time spent (41), best score (0), score calculation speed (5000/sec), environment mode (REPRODUCIBLE).</programlisting>

      <para>Notice that a log message includes the <literal>toString()</literal> method of the <literal>Move</literal>
      implementation which returns for example "<literal>Queen-1 {Row-0 -&gt; Row-3}</literal>".</para>

      <para>A naive Local Search configuration solves the 4 queens problem in 3 steps, by evaluating only 37 possible
      solutions (3 steps with 12 moves each + 1 starting solution), which is only fraction of all 256 possible
      solutions. It solves 16 queens in 31 steps, by evaluating only 7441 out of 18446744073709551616 possible
      solutions. By using a <link linkend="constructionHeuristics">Construction Heuristics</link> phase first, it's even
      a lot more efficient.</para>
    </section>

    <section xml:id="localSearchConceptsDecideTheNextStep">
      <title>Decide the Next Step</title>

      <para>Local Search decides the next step with the aid of 3 configurable components:</para>

      <itemizedlist>
        <listitem>
          <para>A <literal>MoveSelector</literal> which selects the possible moves of the current solution. See the
          chapter <link linkend="moveAndNeighborhoodSelection">move and neighborhood selection</link>.</para>
        </listitem>

        <listitem>
          <para>An <literal>Acceptor</literal> which filters out unacceptable moves.</para>
        </listitem>

        <listitem>
          <para>A <literal>Forager</literal> which gathers accepted moves and picks the next step from them.</para>
        </listitem>
      </itemizedlist>

      <para>The solver phase configuration looks like this:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;unionMoveSelector&gt;
      ...
    &lt;/unionMoveSelector&gt;
    &lt;acceptor&gt;
      ...
    &lt;/acceptor&gt;
    &lt;forager&gt;
      ...
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>In the example below, the <literal>MoveSelector</literal> generated the moves shown with the blue lines, the
      <literal>Acceptor</literal> accepted all of them and the <literal>Forager</literal> picked the move <emphasis>B0
      to B3</emphasis>.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/decideNextStepNQueens04.png"/>
        </imageobject>
      </mediaobject>

      <para><link linkend="logging">Turn on <literal>trace</literal> logging</link> to show the decision making in the
      log:</para>

      <programlisting>INFO  Solver started: time spent (0), score (-6), new best score (-6), random (JDK with seed 0).
TRACE         Move index (0) not doable, ignoring move (Queen-0 {Row-0 -&gt; Row-0}).
TRACE         Move index (1), score (-4), accepted (true), move (Queen-0 {Row-0 -&gt; Row-1}).
TRACE         Move index (2), score (-4), accepted (true), move (Queen-0 {Row-0 -&gt; Row-2}).
TRACE         Move index (3), score (-4), accepted (true), move (Queen-0 {Row-0 -&gt; Row-3}).
...
TRACE         Move index (6), score (-3), accepted (true), move (Queen-1 {Row-0 -&gt; Row-3}).
...
TRACE         Move index (9), score (-3), accepted (true), move (Queen-2 {Row-0 -&gt; Row-3}).
...
TRACE         Move index (12), score (-4), accepted (true), move (Queen-3 {Row-0 -&gt; Row-3}).
DEBUG     LS step (0), time spent (6), score (-3), new best score (-3), accepted/selected move count (12/12), picked move (Queen-1 {Row-0 -&gt; Row-3}).
...</programlisting>

      <para>Because the last solution can degrade (for example in Tabu Search), the <literal>Solver</literal> remembers
      the best solution it has encountered through the entire search path. Each time the current solution is better than
      the last best solution, the current solution is <link linkend="cloningASolution">cloned</link> and referenced as
      the new best solution.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/localSearchScoreOverTime.png"/>
        </imageobject>
      </mediaobject>
    </section>

    <section xml:id="localSearchAcceptor">
      <title>Acceptor</title>

      <para>An <literal>Acceptor</literal> is used (together with a <literal>Forager</literal>) to active Tabu Search,
      Simulated Annealing, Late Acceptance, ... For each move it checks whether it is accepted or not.</para>

      <para>By changing a few lines of configuration, you can easily switch from Tabu Search to Simulated Annealing or
      Late Acceptance and back.</para>

      <para>You can implement your own <literal>Acceptor</literal>, but the build-in acceptors should suffice for most
      needs. You can also combine multiple acceptors.</para>
    </section>

    <section xml:id="localSearchForager">
      <title>Forager</title>

      <para>A <literal>Forager</literal> gathers all accepted moves and picks the move which is the next step. Normally
      it picks the accepted move with the highest score. If several accepted moves have the highest score, one is picked
      randomly to break the tie. Breaking ties randomly leads to better results.</para>

      <note>
        <para>It is possible to disable breaking ties randomly by explicitly setting <literal>breakTieRandomly</literal>
        to <literal>false</literal>, but that's almost never a good idea:</para>

        <itemizedlist>
          <listitem>
            <para>If an earlier move is better than a later move with the same score, the score calculator should add an
            extra softer <link linkend="scoreLevel">score level</link> to score the first move as slightly better. Don't
            rely on move selection order to enforce that.</para>
          </listitem>

          <listitem>
            <para>Random tie breaking does not affect <link linkend="environmentMode">reproducibility</link>.</para>
          </listitem>
        </itemizedlist>
      </note>

      <section xml:id="acceptedCountLimit">
        <title>Accepted Count Limit</title>

        <para>When there are many possible moves, it becomes inefficient to evaluate all of them at every step. To
        evaluate only a random subset of all the moves, use:</para>

        <itemizedlist>
          <listitem>
            <para>An <literal>acceptedCountLimit</literal> integer, which specifies how many accepted moves should be
            evaluated during each step. By default, all accepted moves are evaluated at every step.</para>

            <programlisting language="xml">  &lt;forager&gt;
    &lt;acceptedCountLimit&gt;1000&lt;/acceptedCountLimit&gt;
  &lt;/forager&gt;</programlisting>
          </listitem>
        </itemizedlist>

        <para>Unlike the n queens problem, real world problems require the use of <literal>acceptedCountLimit</literal>.
        Start from an <literal>acceptedCountLimit</literal> that takes a step in less then 2 seconds. <link
        linkend="logging">Turn on INFO logging</link> to see the step times. Use the <link
        linkend="benchmarker">Benchmarker</link> to tweak the value.</para>

        <important>
          <para>With a low <literal>acceptedCountLimit</literal> (so a fast stepping algorithm), it is recommended to
          avoid using <literal>selectionOrder</literal> SHUFFLED because the shuffling generates a random number for
          every element in the selector, taking up a lot of time, but only a few elements are actually selected.</para>
        </important>
      </section>

      <section xml:id="localSearchPickEarlyType">
        <title>Pick Early Type</title>

        <para>A forager can pick a move early during a step, ignoring subsequent selected moves. There are 3 pick early
        types for Local Search:</para>

        <itemizedlist>
          <listitem>
            <para><literal>NEVER</literal>: A move is never picked early: all accepted moves are evaluated that the
            selection allows. This is the default.</para>

            <programlisting language="xml">    &lt;forager&gt;
      &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
    &lt;/forager&gt;</programlisting>
          </listitem>

          <listitem>
            <para><literal>FIRST_BEST_SCORE_IMPROVING</literal>: Pick the first accepted move that improves the best
            score. If none improve the best score, it behaves exactly like the pickEarlyType NEVER.</para>

            <programlisting language="xml">    &lt;forager&gt;
      &lt;pickEarlyType&gt;FIRST_BEST_SCORE_IMPROVING&lt;/pickEarlyType&gt;
    &lt;/forager&gt;</programlisting>
          </listitem>

          <listitem>
            <para><literal>FIRST_LAST_STEP_SCORE_IMPROVING</literal>: Pick the first accepted move that improves the
            last step score. If none improve the last step score, it behaves exactly like the pickEarlyType
            NEVER.</para>

            <programlisting language="xml">    &lt;forager&gt;
      &lt;pickEarlyType&gt;FIRST_LAST_STEP_SCORE_IMPROVING&lt;/pickEarlyType&gt;
    &lt;/forager&gt;</programlisting>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section xml:id="hillClimbing">
    <title>Hill Climbing (Simple Local Search)</title>

    <section xml:id="hillClimbingAlgorithm">
      <title>Algorithm Description</title>

      <para>Hill Climbing tries all selected moves and then takes the best move, which is the move which leads to the
      solution with the highest score. That best move is called the step move. From that new solution, it again tries
      all selected moves and takes the best move and continues like that iteratively. If multiple selected moves tie for
      the best move, one of them is randomly chosen as the best move.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/hillClimbingNQueens04.png"/>
        </imageobject>
      </mediaobject>

      <para>Notice that once a queen has moved, it can be moved again later. This is a good thing, because in an
      NP-complete problem it's impossible to predict what will be the optimal final value for a planning
      variable.</para>
    </section>

    <section xml:id="hillClimbingStuckInLocalOptima">
      <title>Stuck in Local Optima</title>

      <para>Hill Climbing always takes improving moves. This may seem like a good thing, but it's not: <emphasis
      role="bold">Hill Climbing can easily get stuck in a local optimum.</emphasis> This happens when it reaches a
      solution for which all the moves deteriorate the score. Even if it picks one of those moves, the next step might
      go back to the original solution and which case chasing its own tail:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/hillClimbingGetsStuckInLocalOptimaNQueens04.png"/>
        </imageobject>
      </mediaobject>

      <para>Improvements upon Hill Climbing (such as Tabu Search, Simulated Annealing and Late Acceptance) address the
      problem of being stuck in local optima. Therefore, it's recommend to never use Hill Climbing, unless you're
      absolutely sure there are no local optima in your planning problem.</para>
    </section>

    <section xml:id="hillClimbingConfigure">
      <title>Configuration</title>

      <para>Simplest configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;localSearchType&gt;HILL_CLIMBING&lt;/localSearchType&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>Advanced configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;acceptorType&gt;HILL_CLIMBING&lt;/acceptorType&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1&lt;/acceptedCountLimit&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>
    </section>
  </section>

  <section xml:id="tabuSearch">
    <title>Tabu Search</title>

    <section xml:id="tabuSearchAlgorithm">
      <title>Algorithm Description</title>

      <para>Tabu Search works like Hill Climbing, but it maintains a tabu list to avoid getting stuck in local optima.
      The tabu list holds recently used objects that are <emphasis>taboo</emphasis> to use for now. Moves that involve
      an object in the tabu list, are not accepted. The tabu list objects can be anything related to the move, such as
      the planning entity, planning value, move, solution, ... Here's an example with entity tabu for 4 queens, so the
      queens are put in the tabu list:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/entityTabuSearch.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>It's called Tabu Search, not Taboo Search. There is no spelling error.</para>
      </note>

      <para>Scientific paper: <emphasis>Tabu Search - Part 1 and Part 2</emphasis> by Fred Glover (1989 - 1990)</para>
    </section>

    <section xml:id="tabuSearchConfiguration">
      <title>Configuration</title>

      <para>Simplest configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;localSearchType&gt;TABU_SEARCH&lt;/localSearchType&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>When Tabu Search takes steps it creates one or more tabu's. For a number of steps, it does not accept a move
      if that move breaks tabu. That number of steps is the tabu size. Advanced configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;entityTabuSize&gt;7&lt;/entityTabuSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1000&lt;/acceptedCountLimit&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>

      <important>
        <para>A Tabu Search acceptor should be combined with a high <literal>acceptedCountLimit</literal>, such as
        <literal>1000</literal>.</para>
      </important>

      <para>Planner implements several tabu types:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Planning entity tabu</emphasis> (recommended) makes the planning entities of recent steps
          tabu. For example, for N queens it makes the recently moved queens tabu. It's recommended to start with this
          tabu type.</para>

          <programlisting language="xml">    &lt;acceptor&gt;
      &lt;entityTabuSize&gt;7&lt;/entityTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>

          <para>To avoid hard coding the tabu size, configure a tabu ratio, relative to the number of entities, for
          example 2%:</para>

          <programlisting language="xml">    &lt;acceptor&gt;
      &lt;entityTabuRatio&gt;0.02&lt;/entityTabuRatio&gt;
    &lt;/acceptor&gt;</programlisting>
        </listitem>

        <listitem>
          <para><emphasis>Planning value tabu</emphasis> makes the planning values of recent steps tabu. For example,
          for N queens it makes the recently moved to rows tabu.</para>

          <programlisting language="xml">    &lt;acceptor&gt;
      &lt;valueTabuSize&gt;7&lt;/valueTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>

          <para>To avoid hard coding the tabu size, configure a tabu ratio, relative to the number of values, for
          example 2%:</para>

          <programlisting language="xml">    &lt;acceptor&gt;
      &lt;valueTabuRatio&gt;0.02&lt;/valueTabuRatio&gt;
    &lt;/acceptor&gt;</programlisting>
        </listitem>

        <listitem>
          <para><emphasis>Move tabu</emphasis> makes recent steps tabu. It does not accept a move equal to one of those
          steps.</para>

          <programlisting language="xml">    &lt;acceptor&gt;
      &lt;moveTabuSize&gt;7&lt;/moveTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>
        </listitem>

        <listitem>
          <para><emphasis>Undo move tabu </emphasis>makes the undo move of recent steps tabu.</para>

          <programlisting language="xml">    &lt;acceptor&gt;
      &lt;undoMoveTabuSize&gt;7&lt;/undoMoveTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>
        </listitem>

        <listitem>
          <para><emphasis>Solution tabu</emphasis> makes recently visited solutions tabu. It does not accept a move that
          leads to one of those solutions. It requires that the <literal>Solution</literal> implements
          <literal>equals()</literal> and <literal>hashCode()</literal> properly. If you can spare the memory, don't be
          cheap on the tabu size.</para>

          <programlisting language="xml">    &lt;acceptor&gt;
      &lt;solutionTabuSize&gt;1000&lt;/solutionTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>

          <para>For non-trivial cases, solution tabu is usually useless because the <link
          linkend="searchSpaceSize">search space size</link> makes it statistically highly unlikely to reach the same
          solution twice. Therefore its use is not recommended, except for small datasets.</para>
        </listitem>
      </itemizedlist>

      <para>Sometimes it's useful to combine tabu types:</para>

      <programlisting language="xml">    &lt;acceptor&gt;
      &lt;entityTabuSize&gt;7&lt;/entityTabuSize&gt;
      &lt;valueTabuSize&gt;3&lt;/valueTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>

      <para>If the tabu size is too small, the solver can still get stuck in a local optimum. On the other hand, if the
      tabu size is too large, the solver can be inefficient by bouncing of the walls. Use the <link
      linkend="benchmarker">Benchmarker</link> to fine tweak your configuration.</para>
    </section>
  </section>

  <section xml:id="simulatedAnnealing">
    <title>Simulated Annealing</title>

    <section xml:id="simulatedAnnealingAlgorithm">
      <title>Algorithm Description</title>

      <para>Simulated Annealing evaluates only a few moves per step, so it steps quickly. In the classic implementation,
      the first accepted move is the winning step. A move is accepted if it doesn't decrease the score or - in case it
      does decrease the score - it passes a random check. The chance that a decreasing move passes the random check
      decreases relative to the size of the score decrement and the time the phase has been running (which is
      represented as the temperature).</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/simulatedAnnealing.png"/>
        </imageobject>
      </mediaobject>

      <para>Simulated Annealing does not always pick the move with the highest score, neither does it evaluate many
      moves per step. At least at first. Instead, it gives non improving moves also a chance to be picked, depending on
      its score and the time gradient of the <literal>Termination</literal>. In the end, it gradually turns into Hill
      Climbing, only accepting improving moves.</para>
    </section>

    <section xml:id="simulatedAnnealingConfiguration">
      <title>Configuration</title>

      <para>Start with a <literal>simulatedAnnealingStartingTemperature</literal> set to the maximum score delta a
      single move can cause. Use the <link linkend="benchmarker">Benchmarker</link> to tweak the value. Advanced
      configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;simulatedAnnealingStartingTemperature&gt;2hard/100soft&lt;/simulatedAnnealingStartingTemperature&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1&lt;/acceptedCountLimit&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>Simulated Annealing should use a low <literal>acceptedCountLimit</literal>. The classic algorithm uses an
      <literal>acceptedCountLimit</literal> of <literal>1</literal>, but often <literal>4</literal> performs
      better.</para>

      <para>Simulated Annealing can be combined with a tabu acceptor at the same time. That gives Simulated Annealing
      salted with a bit of Tabu. Use a lower tabu size than in a pure Tabu Search configuration.</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;simulatedAnnealingStartingTemperature&gt;2hard/100soft&lt;/simulatedAnnealingStartingTemperature&gt;
      &lt;entityTabuSize&gt;5&lt;/entityTabuSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1&lt;/acceptedCountLimit&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>
    </section>
  </section>

  <section xml:id="lateAcceptance">
    <title>Late Acceptance</title>

    <section xml:id="lateAcceptanceAlgorithm">
      <title>Algorithm Description</title>

      <para>Late Acceptance (also known as Late Acceptance Hill Climbing) also evaluates only a few moves per step. A
      move is accepted if it does not decrease the score, or if it leads to a score that is at least the late score
      (which is the winning score of a fixed number of steps ago).</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/lateAcceptance.png"/>
        </imageobject>
      </mediaobject>

      <para>Scientific paper: <link
      xlink:href="http://www.cs.stir.ac.uk/research/publications/techreps/pdf/TR192.pdf"><emphasis>The Late Acceptance
      Hill-Climbing Heuristic</emphasis> by Edmund K. Burke, Yuri Bykov (2012)</link></para>
    </section>

    <section xml:id="lateAcceptanceConfiguration">
      <title>Configuration</title>

      <para>Simplest configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;localSearchType&gt;LATE_ACCEPTANCE&lt;/localSearchType&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>Late Acceptance accepts any move that has a score which is higher than the best score of a number of steps
      ago. That number of steps is the <literal>lateAcceptanceSize</literal>. Advanced configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;lateAcceptanceSize&gt;400&lt;/lateAcceptanceSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1&lt;/acceptedCountLimit&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>Late Acceptance should use a low <literal>acceptedCountLimit</literal>.</para>

      <para>Late Acceptance can be combined with a tabu acceptor at the same time. That gives Late Acceptance salted
      with a bit of Tabu. Use a lower tabu size than in a pure Tabu Search configuration.</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;lateAcceptanceSize&gt;400&lt;/lateAcceptanceSize&gt;
      &lt;entityTabuSize&gt;5&lt;/entityTabuSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1&lt;/acceptedCountLimit&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>
    </section>
  </section>

  <section xml:id="stepCountingHillClimbing">
    <title>Step Counting Hill Climbing</title>

    <section xml:id="stepCountingHillClimbingAlgorithm">
      <title>Algorithm Description</title>

      <para>Step Counting Hill Climbing also evaluates only a few moves per step. For a number of steps, it keeps the
      step score as a threshold. A move is accepted if it does not decrease the score, or if it leads to a score that is
      at least the threshold score.</para>

      <para>Scientific paper: <link xlink:href="https://www.cs.nott.ac.uk/~yxb/SCHC/SCHC_mista2013_79.pdf"><emphasis>An
      initial study of a novel Step Counting Hill Climbing heuristic applied to timetabling problems</emphasis> by Yuri
      Bykov, Sanja Petrovic (2013)</link></para>
    </section>

    <section xml:id="stepCountingHillClimbingConfiguration">
      <title>Configuration</title>

      <para>Step Counting Hill Climbing accepts any move that has a score which is higher than a threshold score. Every
      number of steps (specified by <literal>stepCountingHillClimbingSize</literal>), the threshold score is set to the
      step score.</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;stepCountingHillClimbingSize&gt;400&lt;/stepCountingHillClimbingSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1&lt;/acceptedCountLimit&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>Step Counting Hill Climbing should use a low <literal>acceptedCountLimit</literal>.</para>

      <para>Step Counting Hill Climbing can be combined with a tabu acceptor at the same time, similar as shown in <link
      linkend="lateAcceptance">the Late Acceptance section</link>.</para>
    </section>
  </section>

  <section xml:id="strategicOscillation">
    <title>Strategic Oscillation</title>

    <section xml:id="strategicOscillationAlgorithm">
      <title>Algorithm Description</title>

      <para>Strategic Oscillation is an add-on, which works especially well with <link linkend="tabuSearch">Tabu
      Search</link>. Instead of picking the accepted move with the highest score, it employs a different mechanism: If
      there's an improving move, it picks it. If there's no improving move however, it prefers moves which improve a
      softer score level, over moves which break a harder score level less.</para>
    </section>

    <section xml:id="strategicOscillationConfiguration">
      <title>Configuration</title>

      <para>Configure a <literal>finalistPodiumType</literal>, for example in a Tabu Search configuration:</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    ...
    &lt;acceptor&gt;
      &lt;entityTabuSize&gt;7&lt;/entityTabuSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
      &lt;acceptedCountLimit&gt;1000&lt;/acceptedCountLimit&gt;
      &lt;finalistPodiumType&gt;STRATEGIC_OSCILLATION&lt;/finalistPodiumType&gt;
    &lt;/forager&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>The following <literal>finalistPodiumType</literal>s are supported:</para>

      <itemizedlist>
        <listitem>
          <para><literal>HIGHEST_SCORE</literal> (default): Pick the accepted move with the highest score.</para>
        </listitem>

        <listitem>
          <para><literal>STRATEGIC_OSCILLATION</literal>: Alias for the default strategic oscillation variant.</para>
        </listitem>

        <listitem>
          <para><literal>STRATEGIC_OSCILLATION_BY_LEVEL</literal>: If there is an accepted improving move, pick it. If
          no such move exists, prefer an accepted move which improves a softer score level over one that doesn't (even
          if it has a better harder score level). A move is improving if it's better than the last completed step
          score.</para>
        </listitem>

        <listitem>
          <para><literal>STRATEGIC_OSCILLATION_BY_LEVEL_ON_BEST_SCORE</literal>: Like
          <literal>STRATEGIC_OSCILLATION_BY_LEVEL</literal>, but define improving as better than the best score (instead
          of the last completed step score).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="customTerminationSelectorOrAcceptor">
    <title>Using a Custom Termination, MoveSelector, EntitySelector, ValueSelector or Acceptor</title>

    <para>You can plug in a custom <literal>Termination</literal>, <literal>MoveSelector</literal>,
    <literal>EntitySelector</literal>, <literal>ValueSelector</literal> or <literal>Acceptor</literal> by extending the
    abstract class and also the related <literal>*Config</literal> class.</para>

    <para>For example, to use a custom <literal>MoveSelector</literal>, extend the
    <literal>AbstractMoveSelector</literal> class, extend the <literal>MoveSelectorConfig</literal> class and configure
    it in the solver configuration.</para>

    <note>
      <para>It's not possible to inject a <literal>Termination</literal>, ... instance directly (to avoid extending a
      <literal>Config</literal> class too) because:</para>

      <itemizedlist>
        <listitem>
          <para>A <literal>SolverFactory</literal> can build multiple <literal>Solver</literal> instances, which each
          require a distinct <literal>Termination</literal>, ... instance.</para>
        </listitem>

        <listitem>
          <para>A solver configuration needs to be serializable to and from XML. This makes benchmarking with
          <literal>PlannerBenchmark</literal> particularly easy because you can configure different
          <literal>Solver</literal> variants in XML.</para>
        </listitem>

        <listitem>
          <para>A <literal>Config</literal> class is often easier and clearer to configure. For example:
          <literal>TerminationConfig</literal> translates <literal>minutesSpentLimit</literal> and
          <literal>secondsSpentLimit</literal> into <literal>timeMillisSpentLimit</literal>.</para>
        </listitem>
      </itemizedlist>
    </note>

    <para>If you build a better implementation that's not domain specific, consider contributing it back as a pull
    request on github: we'll optimize it and take it along in future refactorings.</para>
  </section>
</chapter>
