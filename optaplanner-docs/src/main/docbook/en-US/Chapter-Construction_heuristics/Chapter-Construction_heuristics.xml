<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="constructionHeuristics" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Construction heuristics</title>

  <section>
    <title>Overview</title>

    <para>A construction heuristic builds a pretty good initial solution in a finite length of time. Its solution isn't
    always feasible, but it finds it fast and metaheuristics can finish the job.</para>

    <para>Construction heuristics terminate automatically, so there's usually no need to configure a
    <literal>Termination</literal> on the construction heuristic phase specifically.</para>
  </section>

  <section xml:id="firstFit">
    <title>First Fit</title>

    <section>
      <title>Algorithm description</title>

      <para>The <emphasis>First Fit</emphasis> algorithm cycles through all the planning entities (in default order),
      initializing 1 planning entity at a time. It assigns the planning entity to the best available planning value,
      taking the already initialized planning entities into account. It terminates when all planning entities have been
      initialized. It never changes a planning entity after it has been assigned.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Construction_heuristics/firstFitNQueens04.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>Notice that it starts with putting <literal>Queen</literal> A into row 0 (and never moving it later), which
      makes it impossible to reach the optimal solution. Suffixing this construction heuristic with metaheurstics can
      remedy that.</para>
    </section>

    <section>
      <title>Configuration</title>

      <para>Configure this <literal>SolverPhase</literal>:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;FIRST_FIT&lt;/constructionHeuristicType&gt;
    &lt;!-- Speedup that can be applied to most, but not all use cases: --&gt;
    &lt;!--forager--&gt;
      &lt;!-- &lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt; --&gt;
    &lt;!--/forager--&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>The <literal>pickEarlyType</literal> of <literal>FIRST_NON_DETERIORATING_SCORE</literal>
        is a big speedup: for an entity, it picks the first move for which the score does not deteriorate the last step
        score, ignoring all subsequent moves.
        It should be applied when initializing a planning entity cannot improve the last step score:
        it can only make the score lower or equal. So if:</para>

        <itemizedlist>
          <listitem>
            <para>There are no positive constraints.</para>
          </listitem>

          <listitem>
            <para>And there is no negative constraint that can stop being broken by adding a planning entity (except if
            another negative constraint gets broken which outweighs the first negative constraint).</para>
          </listitem>
        </itemizedlist>

        <para>If that is not the case, then it might still be good to apply it in some cases. Use
        the <literal>Benchmarker</literal> to decide.</para>
      </note>
    </section>
  </section>

  <section xml:id="firstFitDecreasing">
    <title>First Fit Decreasing</title>

    <section>
      <title>Algorithm description</title>

      <para>Like <literal>First Fit</literal>, but assigns the more difficult planning entities first, because they are
      less likely to fit in the leftovers. So it sorts the planning entities on decreasing difficulty.</para>

      <para>Requires the model to support <link linkend="planningEntityDifficulty">planning entity difficulty
      comparison</link>.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Construction_heuristics/firstFitDecreasingNQueens04.png"></imagedata>
        </imageobject>
      </mediaobject>

      <note>
        <para>One would expect that this algorithm always performs better than <literal>First Fit</literal>. That's not
        always the case, but usually is.</para>
      </note>
    </section>

    <section>
      <title>Configuration</title>

      <para>Configure this <literal>SolverPhase</literal>:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;FIRST_FIT_DECREASING&lt;/constructionHeuristicType&gt;
    &lt;!-- Speedup that can be applied to most, but not all use cases: --&gt;
    &lt;!--forager--&gt;
      &lt;!-- &lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt; --&gt;
    &lt;!--/forager--&gt;
  &lt;/constructionHeuristic&gt;</programlisting>
    </section>
  </section>

  <section xml:id="bestFit">
    <title>Best Fit</title>

    <section>
      <title>Algorithm description</title>

      <para>Like <literal>First Fit</literal>, but uses the weaker planning values first, because the strong planning
      values are more likely to be able to accommodate later planning entities. So it sorts the planning values on
      increasing strength.</para>

      <para>Requires the model to support <link linkend="planningValueStrength">planning value strength
      comparison</link>.</para>

      <note>
        <para>One would expect that this algorithm always performs better than <literal>First Fit</literal>. That's not
        always the case.</para>
      </note>
    </section>

    <section>
      <title>Configuration</title>

      <para>Configure this <literal>SolverPhase</literal>:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;BEST_FIT&lt;/constructionHeuristicType&gt;
    &lt;!-- Speedup that can be applied to most, but not all use cases: --&gt;
    &lt;!--forager--&gt;
      &lt;!-- &lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt; --&gt;
    &lt;!--/forager--&gt;
  &lt;/constructionHeuristic&gt;</programlisting>
    </section>
  </section>

  <section xml:id="bestFitDecreasing">
    <title>Best Fit Decreasing</title>

    <section>
      <title>Algorithm description</title>

      <para>Combines <literal>First Fit Decreasing</literal> and <literal>Best Fit</literal>. So it sorts the planning
      entities on decreasing difficulty and the planning values on increasing strength.</para>

      <para>Requires the model to support <link linkend="planningEntityDifficulty">planning entity difficulty
      comparison</link> and <link linkend="planningValueStrength">planning value strength comparison</link>.</para>

      <note>
        <para>One would expect that this algorithm always performs better than <literal>First Fit</literal>,
        <literal>First Fit Decreasing</literal> and <literal>Best Fit</literal>. That's not always the case.</para>
      </note>
    </section>

    <section>
      <title>Configuration</title>

      <para>Configure this <literal>SolverPhase</literal>:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;BEST_FIT_DECREASING&lt;/constructionHeuristicType&gt;
    &lt;!-- Speedup that can be applied to most, but not all use cases: --&gt;
    &lt;!--forager--&gt;
      &lt;!-- &lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt; --&gt;
    &lt;!--/forager--&gt;
  &lt;/constructionHeuristic&gt;</programlisting>
    </section>
  </section>

  <section xml:id="cheapestInsertion">
    <title>Cheapest insertion</title>

    <section>
      <title>Algorithm description</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Configuration</title>

      <para>TODO Not implemented yet.</para>
    </section>
  </section>

  <section xml:id="regretInsertion">
    <title>Regret insertion</title>

    <section>
      <title>Algorithm description</title>

      <para>TODO</para>
    </section>

    <section>
      <title>Configuration</title>

      <para>TODO Not implemented yet.</para>
    </section>
  </section>
</chapter>
