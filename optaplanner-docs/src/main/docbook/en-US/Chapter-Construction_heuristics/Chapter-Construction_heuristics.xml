<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="constructionHeuristics" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Construction heuristics</title>

  <section xml:id="constructionHeuristicsOverview">
    <title>Overview</title>

    <para>A construction heuristic builds a pretty good initial solution in a finite length of time. Its solution isn't
    always feasible, but it finds it fast so metaheuristics can finish the job.</para>

    <para>Construction heuristics terminate automatically, so there's usually no need to configure a
    <literal>Termination</literal> on the construction heuristic phase specifically.</para>
  </section>

  <section xml:id="firstFit">
    <title>First Fit</title>

    <section xml:id="firstFitAlgorithm">
      <title>Algorithm description</title>

      <para>The First Fit algorithm cycles through all the planning entities (in default order), initializing 1 planning
      entity at a time. It assigns the planning entity to the best available planning value, taking the already
      initialized planning entities into account. It terminates when all planning entities have been initialized. It
      never changes a planning entity after it has been assigned.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Construction_heuristics/firstFitNQueens04.png"/>
        </imageobject>
      </mediaobject>

      <para>Notice that it starts with putting <literal>Queen</literal> A into row 0 (and never moving it later), which
      makes it impossible to reach the optimal solution. Suffixing this construction heuristic with metaheuristics can
      remedy that.</para>
    </section>

    <section xml:id="firstFitConfiguration">
      <title>Configuration</title>

      <para>Configure this solver phase:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;FIRST_FIT&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
        <literal>ONLY_DOWN</literal>, this algorithm is faster: for an entity, it picks the first move for which the
        score does not deteriorate the last step score, ignoring all subsequent moves.</para>
      </note>

      <para>For advanced configuration, see <link linkend="allocateEntityFromQueue">Allocate Entity From
      Queue</link>.</para>
    </section>
  </section>

  <section xml:id="firstFitDecreasing">
    <title>First Fit Decreasing</title>

    <section xml:id="firstFitDecreasingAlgorithm">
      <title>Algorithm description</title>

      <para>Like First Fit, but assigns the more difficult planning entities first, because they are less likely to fit
      in the leftovers. So it sorts the planning entities on decreasing difficulty.</para>

      <para>Requires the model to support <link linkend="planningEntityDifficulty">planning entity difficulty
      comparison</link>.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Construction_heuristics/firstFitDecreasingNQueens04.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>One would expect that this algorithm has better results than First Fit. That's usually the case, but not
        always.</para>
      </note>
    </section>

    <section xml:id="firstFitDecreasingConfiguration">
      <title>Configuration</title>

      <para>Configure this solver phase:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;FIRST_FIT_DECREASING&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
        <literal>ONLY_DOWN</literal>, this algorithm is faster: for an entity, it picks the first move for which the
        score does not deteriorate the last step score, ignoring all subsequent moves.</para>
      </note>

      <para>For advanced configuration, see <link linkend="allocateEntityFromQueue">Allocate Entity From
      Queue</link>.</para>
    </section>
  </section>

  <section xml:id="weakestFit">
    <title>Weakest Fit</title>

    <section xml:id="weakestFitAlgorithm">
      <title>Algorithm description</title>

      <para>Like First Fit, but uses the weaker planning values first, because the strong planning values are more
      likely to be able to accommodate later planning entities. So it sorts the planning values on increasing
      strength.</para>

      <para>Requires the model to support <link linkend="planningValueStrength">planning value strength
      comparison</link>.</para>

      <note>
        <para>Do not presume that this algorithm has better results than First Fit. That's often not the case.</para>
      </note>
    </section>

    <section xml:id="weakestFitConfiguration">
      <title>Configuration</title>

      <para>Configure this solver phase:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;WEAKEST_FIT&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
        <literal>ONLY_DOWN</literal>, this algorithm is faster: for an entity, it picks the first move for which the
        score does not deteriorate the last step score, ignoring all subsequent moves.</para>
      </note>

      <para>For advanced configuration, see <link linkend="allocateEntityFromQueue">Allocate Entity From
      Queue</link>.</para>
    </section>
  </section>

  <section xml:id="weakestFitDecreasing">
    <title>Weakest Fit Decreasing</title>

    <section xml:id="weakestFitDecreasingAlgorithm">
      <title>Algorithm description</title>

      <para>Combines First Fit Decreasing and Weakest Fit. So it sorts the planning entities on decreasing difficulty
      and the planning values on increasing strength.</para>

      <para>Requires the model to support <link linkend="planningEntityDifficulty">planning entity difficulty
      comparison</link> and <link linkend="planningValueStrength">planning value strength comparison</link>.</para>

      <note>
        <para>Do not presume that this algorithm has better results than First Fit Decreasing. That's often not the
        case. However, it is usually better than Weakest Fit.</para>
      </note>
    </section>

    <section xml:id="weakestFitDecreasingConfiguration">
      <title>Configuration</title>

      <para>Configure this solver phase:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;WEAKEST_FIT_DECREASING&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
        <literal>ONLY_DOWN</literal>, this algorithm is faster: for an entity, it picks the first move for which the
        score does not deteriorate the last step score, ignoring all subsequent moves.</para>
      </note>

      <para>For advanced configuration, see <link linkend="allocateEntityFromQueue">Allocate Entity From
      Queue</link>.</para>
    </section>
  </section>

  <section xml:id="strongestFit">
    <title>Strongest Fit</title>

    <section xml:id="strongestFitAlgorithm">
      <title>Algorithm description</title>

      <para>Like First Fit, but uses the strong planning values first, because the strong planning values are more
      likely to have a lower soft cost to use. So it sorts the planning values on decreasing strength.</para>

      <para>Requires the model to support <link linkend="planningValueStrength">planning value strength
      comparison</link>.</para>

      <note>
        <para>Do not presume that this algorithm has better results than First Fit or Weakest Fit. That's often not the
        case.</para>
      </note>
    </section>

    <section xml:id="strongestFitConfiguration">
      <title>Configuration</title>

      <para>Configure this solver phase:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;STRONGEST_FIT&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
        <literal>ONLY_DOWN</literal>, this algorithm is faster: for an entity, it picks the first move for which the
        score does not deteriorate the last step score, ignoring all subsequent moves.</para>
      </note>

      <para>For advanced configuration, see <link linkend="allocateEntityFromQueue">Allocate Entity From
      Queue</link>.</para>
    </section>
  </section>

  <section xml:id="strongestFitDecreasing">
    <title>Strongest Fit Decreasing</title>

    <section xml:id="strongestFitDecreasingAlgorithm">
      <title>Algorithm description</title>

      <para>Combines First Fit Decreasing and Strongest Fit. So it sorts the planning entities on decreasing difficulty
      and the planning values on decreasing strength.</para>

      <para>Requires the model to support <link linkend="planningEntityDifficulty">planning entity difficulty
      comparison</link> and <link linkend="planningValueStrength">planning value strength comparison</link>.</para>

      <note>
        <para>Do not presume that this algorithm has better results than First Fit Decreasing or Weakest Fit Decreasing.
        That's often not the case. However, it is usually better than Strongest Fit.</para>
      </note>
    </section>

    <section xml:id="strongestFitDecreasingConfiguration">
      <title>Configuration</title>

      <para>Configure this solver phase:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;STRONGEST_FIT_DECREASING&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
        <literal>ONLY_DOWN</literal>, this algorithm is faster: for an entity, it picks the first move for which the
        score does not deteriorate the last step score, ignoring all subsequent moves.</para>
      </note>

      <para>For advanced configuration, see <link linkend="allocateEntityFromQueue">Allocate Entity From
      Queue</link>.</para>
    </section>
  </section>

  <section xml:id="allocateEntityFromQueue">
    <title>Allocate Entity From Queue</title>

    <section xml:id="allocateEntityFromQueueAlgorithm">
      <title>Algorithm description</title>

      <para>Allocate Entity From Queue is a versatile, generic form of <link linkend="firstFit">First Fit</link>, <link
      linkend="firstFitDecreasing">First Fit Decreasing</link>, <link linkend="weakestFit">Weakest Fit</link> and <link
      linkend="weakestFitDecreasing">Weakest Fit Decreasing</link>. It works like this:</para>

      <orderedlist>
        <listitem>
          <para>Put all entities in a queue.</para>
        </listitem>

        <listitem>
          <para>Assign the first entity (from that queue) to the best value.</para>
        </listitem>

        <listitem>
          <para>Repeat until all entities are assigned.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="allocateEntityFromQueueConfiguration">
      <title>Configuration</title>

      <para>Simple configuration:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;ALLOCATE_ENTITY_FROM_QUEUE&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <para>Verbose simple configuration:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;ALLOCATE_ENTITY_FROM_QUEUE&lt;/constructionHeuristicType&gt;
    &lt;entitySorterManner&gt;DECREASING_DIFFICULTY_IF_AVAILABLE&lt;/entitySorterManner&gt;
    &lt;valueSorterManner&gt;INCREASING_STRENGTH_IF_AVAILABLE&lt;/valueSorterManner&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <para>The <literal>entitySorterManner</literal> options are:</para>

      <itemizedlist>
        <listitem>
          <para><literal>DECREASING_DIFFICULTY</literal>: Initialize the more difficult planning entities first. This
          usually increases pruning (and therefore improves scalability). Requires the model to support <link
          linkend="planningEntityDifficulty">planning entity difficulty comparison</link>.</para>
        </listitem>

        <listitem>
          <para><literal>DECREASING_DIFFICULTY_IF_AVAILABLE</literal> (default): If the model supports <link
          linkend="planningEntityDifficulty">planning entity difficulty comparison</link>, behave like
          <literal>DECREASING_DIFFICULTY</literal>, else like <literal>NONE</literal>.</para>
        </listitem>

        <listitem>
          <para><literal>NONE</literal>: Initialize the planning entities in original order.</para>
        </listitem>
      </itemizedlist>

      <para>The <literal>valueSorterManner</literal> options are:</para>

      <itemizedlist>
        <listitem>
          <para><literal>INCREASING_STRENGTH</literal>: Evaluate the planning values in increasing strength. Requires
          the model to support <link linkend="planningValueStrength">planning value strength comparison</link>.</para>
        </listitem>

        <listitem>
          <para><literal>INCREASING_STRENGTH_IF_AVAILABLE</literal> (default): If the model supports <link
          linkend="planningValueStrength">planning value strength comparison</link>, behave like
          <literal>INCREASING_STRENGTH</literal>, else like <literal>NONE</literal>.</para>
        </listitem>

        <listitem>
          <para><literal>DECREASING_STRENGTH</literal>: Evaluate the planning values in decreasing strength. Requires
          the model to support <link linkend="planningValueStrength">planning value strength comparison</link>.</para>
        </listitem>

        <listitem>
          <para><literal>DECREASING_STRENGTH_IF_AVAILABLE</literal>: If the model supports <link
          linkend="planningValueStrength">planning value strength comparison</link>, behave like
          <literal>DECREASING_STRENGTH</literal>, else like <literal>NONE</literal>.</para>
        </listitem>

        <listitem>
          <para><literal>NONE</literal>: Try the planning values in original order.</para>
        </listitem>
      </itemizedlist>

      <para>Advanced detailed configuration. For example, a Weakest Fit Decreasing configuration for a single entity
      class with a single variable:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;queuedEntityPlacer&gt;
      &lt;entitySelector id="placerEntitySelector"&gt;
        &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
        &lt;selectionOrder&gt;SORTED&lt;/selectionOrder&gt;
        &lt;sorterManner&gt;DECREASING_DIFFICULTY&lt;/sorterManner&gt;
      &lt;/entitySelector&gt;
      &lt;changeMoveSelector&gt;
        &lt;entitySelector mimicSelectorRef="placerEntitySelector"/&gt;
        &lt;valueSelector&gt;
          &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
          &lt;selectionOrder&gt;SORTED&lt;/selectionOrder&gt;
          &lt;sorterManner&gt;INCREASING_STRENGTH&lt;/sorterManner&gt;
        &lt;/valueSelector&gt;
      &lt;/changeMoveSelector&gt;
    &lt;/queuedEntityPlacer&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <para>Per step, the <literal>QueuedEntityPlacer</literal> selects 1 uninitialized entity from the
      <literal>EntitySelector</literal> and applies the winning <literal>Move</literal> (out of all the moves for that
      entity generated by the <literal>MoveSelector</literal>). The <link linkend="mimicSelection">mimic
      selection</link> ensures that the winning <literal>Move</literal> changes (only) the selected entity.</para>

      <para>To customize the entity or value sorting, see <link linkend="sortedSelection">sorted selection</link>. Other
      <literal>Selector</literal> customization (such as <link linkend="filteredSelection">filtering</link> and <link
      linkend="limitedSelection">limiting</link>) is supported too.</para>
    </section>

    <section xml:id="allocateEntityFromQueueMultipleVariables">
      <title>Multiple variables</title>

      <para>There are 2 ways to deal with multiple variables, depending on how their <literal>ChangeMove</literal>s are
      combined:</para>

      <itemizedlist>
        <listitem>
          <para>Cartesian product of the <literal>ChangeMove</literal>s (default): All variables of the selected entity
          are assigned together. Has far better results (especially for timetabling use cases).</para>
        </listitem>

        <listitem>
          <para>Sequential <literal>ChangeMove</literal>s: One variable is assigned at a time. Scales much better,
          especially for 3 or more variables.</para>
        </listitem>
      </itemizedlist>

      <para>For example, presume a course scheduling example with 200 rooms and 40 periods.</para>

      <para>This First Fit configuration for a single entity class with 2 variables, using a <link
      linkend="cartesianProductMoveSelector">cartesian product</link> of their <literal>ChangeMove</literal>s, will
      select 8000 moves per entity:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;queuedEntityPlacer&gt;
      &lt;entitySelector id="placerEntitySelector"&gt;
        &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
      &lt;/entitySelector&gt;
      &lt;cartesianProductMoveSelector&gt;
        &lt;changeMoveSelector&gt;
          &lt;entitySelector mimicSelectorRef="placerEntitySelector"/&gt;
          &lt;valueSelector&gt;
            &lt;variableName&gt;room&lt;/variableName&gt;
          &lt;/valueSelector&gt;
        &lt;/changeMoveSelector&gt;
        &lt;changeMoveSelector&gt;
          &lt;entitySelector mimicSelectorRef="placerEntitySelector"/&gt;
          &lt;valueSelector&gt;
            &lt;variableName&gt;period&lt;/variableName&gt;
          &lt;/valueSelector&gt;
        &lt;/changeMoveSelector&gt;
      &lt;/cartesianProductMoveSelector&gt;
    &lt;/queuedEntityPlacer&gt;
    ...
  &lt;/constructionHeuristic&gt;</programlisting>

      <warning>
        <para>With 3 variables of 1000 values each, a cartesian product selects 1000000000 values per entity, which will
        take far too long.</para>
      </warning>

      <para>This First Fit configuration for a single entity class with 2 variables, using sequential
      <literal>ChangeMove</literal>s, will select 240 moves per entity:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;queuedEntityPlacer&gt;
      &lt;entitySelector id="placerEntitySelector"&gt;
        &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
      &lt;/entitySelector&gt;
      &lt;changeMoveSelector&gt;
        &lt;entitySelector mimicSelectorRef="placerEntitySelector"/&gt;
        &lt;valueSelector&gt;
          &lt;variableName&gt;period&lt;/variableName&gt;
        &lt;/valueSelector&gt;
      &lt;/changeMoveSelector&gt;
      &lt;changeMoveSelector&gt;
        &lt;entitySelector mimicSelectorRef="placerEntitySelector"/&gt;
        &lt;valueSelector&gt;
          &lt;variableName&gt;room&lt;/variableName&gt;
        &lt;/valueSelector&gt;
      &lt;/changeMoveSelector&gt;
    &lt;/queuedEntityPlacer&gt;
    ...
  &lt;/constructionHeuristic&gt;</programlisting>

      <important>
        <para>Especially for sequential <literal>ChangeMove</literal>s, the order of the variables is important. In the
        example above, it's better to select the period first (instead of the other way around), because there are more
        hard constraints that do not involve the room (for example: no teacher should teach 2 lectures at the same
        time). Let the <link linkend="benchmarker">Benchmarker</link> guide you.</para>
      </important>

      <para>With 3 or more variables, it's possible to combine the cartesian product and sequential techniques:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;queuedEntityPlacer&gt;
      ...
      &lt;cartesianProductMoveSelector&gt;
        &lt;changeMoveSelector&gt;...&lt;/changeMoveSelector&gt;
        &lt;changeMoveSelector&gt;...&lt;/changeMoveSelector&gt;
      &lt;/cartesianProductMoveSelector&gt;
      &lt;changeMoveSelector&gt;...&lt;/changeMoveSelector&gt;
    &lt;/queuedEntityPlacer&gt;
    ...
  &lt;/constructionHeuristic&gt;</programlisting>
    </section>

    <section xml:id="allocateEntityFromQueueMultipleEntityClasses">
      <title>Multiple entity classes</title>

      <para>The easiest way to deal with multiple entity classes is to run a separate construction heuristic for each
      entity class:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;queuedEntityPlacer&gt;
      &lt;entitySelector id="placerEntitySelector"&gt;
        &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
        &lt;entityClass&gt;...DogEntity&lt;/entityClass&gt;
      &lt;/entitySelector&gt;
      &lt;changeMoveSelector&gt;
        &lt;entitySelector mimicSelectorRef="placerEntitySelector"/&gt;
      &lt;/changeMoveSelector&gt;
    &lt;/queuedEntityPlacer&gt;
    ...
  &lt;/constructionHeuristic&gt;
  &lt;constructionHeuristic&gt;
    &lt;queuedEntityPlacer&gt;
      &lt;entitySelector id="placerEntitySelector"&gt;
        &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
        &lt;entityClass&gt;...CatEntity&lt;/entityClass&gt;
      &lt;/entitySelector&gt;
      &lt;changeMoveSelector&gt;
        &lt;entitySelector mimicSelectorRef="placerEntitySelector"/&gt;
      &lt;/changeMoveSelector&gt;
    &lt;/queuedEntityPlacer&gt;
    ...
  &lt;/constructionHeuristic&gt;</programlisting>
    </section>

    <section xml:id="constructionHeuristicsPickEarlyType">
      <title>Pick early type</title>

      <para>There are several pick early types for Construction Heuristics:</para>

      <itemizedlist>
        <listitem>
          <para><literal>NEVER</literal>: Evaluate all the selected moves to initialize the variable(s). This is the
          default if the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is not
          <literal>ONLY_DOWN</literal>.</para>

          <programlisting language="xml">  &lt;constructionHeuristic&gt;
    ...
    &lt;forager&gt;
      &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
    &lt;/forager&gt;
  &lt;/constructionHeuristic&gt;</programlisting>
        </listitem>

        <listitem>
          <para><literal>FIRST_NON_DETERIORATING_SCORE</literal>: Initialize the variable(s) with the first move that
          doesn't deteriorate the score, ignore the remaining selected moves. This is the default if the <link
          linkend="initializingScoreTrend">InitializingScoreTrend</link> is <literal>ONLY_DOWN</literal>.</para>

          <programlisting language="xml">  &lt;constructionHeuristic&gt;
    ...
    &lt;forager&gt;
      &lt;pickEarlyType&gt;FIRST_NON_DETERIORATING_SCORE&lt;/pickEarlyType&gt;
    &lt;/forager&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

          <note>
            <para>If there are only negative constraints, but the <link
            linkend="initializingScoreTrend">InitializingScoreTrend</link> is strictly not <literal>ONLY_DOWN</literal>,
            it can sometimes make sense to apply FIRST_NON_DETERIORATING_SCORE. Use the <link
            linkend="benchmarker">Benchmarker</link> to decide if the score quality loss is worth the time gain.</para>
          </note>
        </listitem>

        <listitem>
          <para><literal>FIRST_FEASIBLE_SCORE</literal>: Initialize the variable(s) with the first move that has a
          feasible score.</para>

          <programlisting language="xml">  &lt;constructionHeuristic&gt;
    ...
    &lt;forager&gt;
      &lt;pickEarlyType&gt;FIRST_FEASIBLE_SCORE&lt;/pickEarlyType&gt;
    &lt;/forager&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

          <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
          <literal>ONLY_DOWN</literal>, use <literal>FIRST_FEASIBLE_SCORE_OR_NON_DETERIORATING_HARD</literal> instead,
          because that's faster without any disadvantages.</para>
        </listitem>

        <listitem>
          <para><literal>FIRST_FEASIBLE_SCORE_OR_NON_DETERIORATING_HARD</literal>: Initialize the variable(s) with the
          first move that doesn't deteriorate the feasibility of the score any further.</para>

          <programlisting language="xml">  &lt;constructionHeuristic&gt;
    ...
    &lt;forager&gt;
      &lt;pickEarlyType&gt;FIRST_FEASIBLE_SCORE_OR_NON_DETERIORATING_HARD&lt;/pickEarlyType&gt;
    &lt;/forager&gt;
  &lt;/constructionHeuristic&gt;</programlisting>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="allocateToValueFromQueue">
    <title>Allocate To Value From Queue</title>

    <section xml:id="allocateToValueFromQueueAlgorithm">
      <title>Algorithm description</title>

      <para>Allocate To Value From Queue is a versatile, generic form of Nearest Neighbour. It works like this:</para>

      <orderedlist>
        <listitem>
          <para>Put all values in a round-robin queue.</para>
        </listitem>

        <listitem>
          <para>Assign the best entity to the first value (from that queue).</para>
        </listitem>

        <listitem>
          <para>Repeat until all entities are assigned.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="allocateToValueFromQueueConfiguration">
      <title>Configuration</title>

      <para>Not yet implemented.</para>
    </section>
  </section>

  <section xml:id="cheapestInsertion">
    <title>Cheapest Insertion</title>

    <section xml:id="cheapestInsertionAlgorithm">
      <title>Algorithm description</title>

      <para>The Cheapest Insertion algorithm cycles through all the planning values for all the planning entities,
      initializing 1 planning entity at a time. It assigns a planning entity to the best available planning value (out
      of all the planning entities and values), taking the already initialized planning entities into account. It
      terminates when all planning entities have been initialized. It never changes a planning entity after it has been
      assigned.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Construction_heuristics/cheapestInsertionNQueens04.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>Cheapest Insertion scales considerably worse than First Fit, etc.</para>
      </note>
    </section>

    <section xml:id="cheapestInsertionConfiguration">
      <title>Configuration</title>

      <para>Simplest configuration of Cheapest Insertion:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;CHEAPEST_INSERTION&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <note>
        <para>If the <link linkend="initializingScoreTrend">InitializingScoreTrend</link> is
        <literal>ONLY_DOWN</literal>, this algorithm is faster: for an entity, it picks the first move for which the
        score does not deteriorate the last step score, ignoring all subsequent moves.</para>
      </note>

      <para>For advanced configuration, see <link linkend="allocateFromPool">Allocate from pool</link>.</para>
    </section>
  </section>

  <section xml:id="regretInsertion">
    <title>Regret Insertion</title>

    <section xml:id="regretInsertionAlgorithm">
      <title>Algorithm description</title>

      <para>The Regret Insertion algorithm behaves like the Cheapest Insertion algorithm. It also cycles through all the
      planning values for all the planning entities, initializing 1 planning entity at a time. But instead of picking
      the entity-value combination with the best score, it picks the entity which has the largest score loss between its
      best and second best value assignment. It then assigns that entity to its best value, to avoid regretting not
      having done that.</para>
    </section>

    <section xml:id="regretInsertionConfiguration">
      <title>Configuration</title>

      <para>This algorithm has not been implemented yet.</para>
    </section>
  </section>

  <section xml:id="allocateFromPool">
    <title>Allocate From Pool</title>

    <section xml:id="allocateFromPoolAlgorithm">
      <title>Algorithm description</title>

      <para>Allocate From Pool is a versatile, generic form of <link linkend="cheapestInsertion">Cheapest
      Insertion</link> and <link linkend="regretInsertion">Regret Insertion</link>. It works like this:</para>

      <orderedlist>
        <listitem>
          <para>Put all entity-value combinations in a pool.</para>
        </listitem>

        <listitem>
          <para>Assign the best entity to best value.</para>
        </listitem>

        <listitem>
          <para>Repeat until all entities are assigned.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="allocateFromPoolConfiguration">
      <title>Configuration</title>

      <para>Simple configuration:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;ALLOCATE_FROM_POOL&lt;/constructionHeuristicType&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <para>Verbose simple configuration:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;constructionHeuristicType&gt;ALLOCATE_FROM_POOL&lt;/constructionHeuristicType&gt;
    &lt;entitySorterManner&gt;DECREASING_DIFFICULTY_IF_AVAILABLE&lt;/entitySorterManner&gt;
    &lt;valueSorterManner&gt;INCREASING_STRENGTH_IF_AVAILABLE&lt;/valueSorterManner&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <para>The <literal>entitySorterManner</literal> and <literal>valueSorterManner</literal> options are described in
      <link linkend="allocateEntityFromQueue">Allocate Entity From Queue</link>.</para>

      <para>Advanced detailed configuration. For example, a Cheapest Insertion configuration for a single entity class
      with a single variable:</para>

      <programlisting language="xml">  &lt;constructionHeuristic&gt;
    &lt;pooledEntityPlacer&gt;
      &lt;changeMoveSelector&gt;
        &lt;entitySelector id="placerEntitySelector"&gt;
          &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
          &lt;selectionOrder&gt;SORTED&lt;/selectionOrder&gt;
          &lt;sorterManner&gt;DECREASING_DIFFICULTY&lt;/sorterManner&gt;
        &lt;/entitySelector&gt;
        &lt;valueSelector&gt;
          &lt;cacheType&gt;PHASE&lt;/cacheType&gt;
          &lt;selectionOrder&gt;SORTED&lt;/selectionOrder&gt;
          &lt;sorterManner&gt;INCREASING_STRENGTH&lt;/sorterManner&gt;
        &lt;/valueSelector&gt;
      &lt;/changeMoveSelector&gt;
    &lt;/pooledEntityPlacer&gt;
  &lt;/constructionHeuristic&gt;</programlisting>

      <para>Per step, the <literal>PooledEntityPlacer</literal> applies the winning <literal>Move</literal> (out of all
      the moves for that entity generated by the <literal>MoveSelector</literal>).</para>

      <para>To customize the entity or value sorting, see <link linkend="sortedSelection">sorted selection</link>. Other
      <literal>Selector</literal> customization (such as <link linkend="filteredSelection">filtering</link> and <link
      linkend="limitedSelection">limiting</link>) is supported too.</para>
    </section>
  </section>
</chapter>
