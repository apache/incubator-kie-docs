<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="plannerIntroduction" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>OptaPlanner Introduction</title>

  <section xml:id="whatIsOptaPlanner">
    <title>What is OptaPlanner?</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Planner_introduction/optaPlannerLogo.png"/>
      </imageobject>
    </mediaobject>

    <para><emphasis role="bold"><link xlink:href="http://www.optaplanner.org">OptaPlanner</link> is a lightweight,
    embeddable constraint satisfaction engine which optimizes planning problems.</emphasis> It solves use cases such
    as:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Employee shift rostering</emphasis>: timetabling nurses, repairmen, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Agenda scheduling</emphasis>: scheduling meetings, appointments, maintenance jobs,
        advertisements, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Educational timetabling</emphasis>: scheduling lessons, courses, exams, conference
        presentations, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Vehicle routing</emphasis>: planning vehicles (trucks, trains, boats, airplanes,
        ...) with freight and/or people</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Bin packing</emphasis>: filling containers, trucks, ships and storage warehouses,
        but also cloud computers nodes, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Job shop scheduling</emphasis>: planning car assembly lines, machine queue planning,
        workforce task planning, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Cutting stock</emphasis>: minimizing waste while cutting paper, steel, carpet,
        ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Sport scheduling</emphasis>: planning football leagues, baseball leagues, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Financial optimization</emphasis>: investment portfolio optimization, risk
        spreading, ...</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Planner_introduction/useCaseOverview.png"/>
      </imageobject>
    </mediaobject>

    <para>Every organization faces planning problems: provide products or services with a limited set of
    <emphasis>constrained</emphasis> resources (employees, assets, time and money). OptaPlanner optimizes such planning
    to do more business with less resources. This is known as <emphasis>Constraint Satisfaction Programming</emphasis>
    (which is part of the <emphasis>Operations Research</emphasis> discipline).</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Planner_introduction/whatIsAPlanningProblem.png"/>
      </imageobject>
    </mediaobject>

    <para>OptaPlanner helps normal Java<superscript>TM</superscript> programmers solve constraint satisfaction problems
    efficiently. Under the hood, it combines optimization heuristics and metaheuristics with very efficient score
    calculation.</para>
  </section>

  <section xml:id="requirements">
    <title>Requirements</title>

    <para>OptaPlanner is <emphasis>open source</emphasis> software, released under <link
    xlink:href="http://www.apache.org/licenses/LICENSE-2.0.html">the Apache Software License 2.0</link>. This license is
    very liberal and allows reuse for commercial purposes. Read <link
    xlink:href="http://www.apache.org/foundation/licence-FAQ.html#WhatDoesItMEAN">the layman's
    explanation</link>.</para>

    <para>OptaPlanner is 100% pure Java<superscript>TM</superscript> and runs on any JVM 1.6 or higher. It <link
    linkend="integration">integrates very easily</link> with other Java<superscript>TM</superscript> technologies.
    OptaPlanner is available in <link linkend="useWithMavenGradleEtc">the Maven Central Repository</link>.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Planner_introduction/compatibility.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section xml:id="whatIsAPlanningProblem">
    <title>What is a Planning Problem?</title>

    <section xml:id="aPlanningProblemIsNPCompleteOrNPHard">
      <title>A Planning Problem is NP-complete or NP-hard</title>

      <para>All the use cases above are <emphasis>probably</emphasis> <link
      xlink:href="http://en.wikipedia.org/wiki/NP-complete">NP-complete</link> or harder. In layman's terms, NP-complete
      means:</para>

      <itemizedlist>
        <listitem>
          <para>It's easy to verify a given solution to a problem in reasonable time.</para>
        </listitem>

        <listitem>
          <para>There is no silver bullet to find the optimal solution of a problem in reasonable time (*).</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>(*) At least, none of the smartest computer scientists in the world have found such a silver bullet yet.
        But if they find one for 1 NP-complete problem, it will work for every NP-complete problem.</para>

        <para>In fact, there's a $ 1,000,000 reward for anyone that proves if <link
        xlink:href="http://en.wikipedia.org/wiki/P_%3D_NP_problem">such a silver bullet actually exists or
        not</link>.</para>
      </note>

      <para>The implication of this is pretty dire: solving your problem is probably harder than you anticipated,
      because the 2 common techniques won't suffice:</para>

      <itemizedlist>
        <listitem>
          <para>A Brute Force algorithm (even a smarter variant) will take too long.</para>
        </listitem>

        <listitem>
          <para>A quick algorithm, for example in bin packing, <emphasis>putting in the largest items first</emphasis>,
          will return a solution that is far from optimal.</para>
        </listitem>
      </itemizedlist>

      <para>By using advanced optimization algorithms, <emphasis role="bold">OptaPlanner does find a good solution in
      reasonable time for such planning problems.</emphasis></para>
    </section>

    <section xml:id="aPlanningProblemHasConstraints">
      <title>A Planning Problem Has (Hard and Soft) Constraints</title>

      <para>Usually, a planning problem has at least 2 levels of constraints:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>(negative) hard constraint</emphasis> must not be broken. For example: <emphasis>1 teacher
          can not teach 2 different lessons at the same time</emphasis>.</para>
        </listitem>

        <listitem>
          <para>A <emphasis>(negative) soft constraint</emphasis> should not be broken if it can be avoided. For
          example: <emphasis>Teacher A does not like to teach on Friday afternoon</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>Some problems have positive constraints too:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>positive soft constraint (or reward)</emphasis> should be fulfilled if possible. For
          example: <emphasis>Teacher B likes to teach on Monday morning</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>Some basic problems (such as N Queens) only have hard constraints. Some problems have 3 or more levels of
      constraints, for example hard, medium and soft constraints.</para>

      <para>These constraints define the <emphasis>score calculation</emphasis> (AKA <emphasis>fitness
      function</emphasis>) of a planning problem. Each solution of a planning problem can be graded with a score.
      <emphasis role="bold">With OptaPlanner, score constraints are written in an Object Oriented language, such as Java
      code or Drools rules</emphasis>. Such code is easy, flexible and scalable.</para>
    </section>

    <section xml:id="aPlanningProblemHasAHugeSearchSpace">
      <title>A Planning Problem Has a Huge Search Space</title>

      <para>A planning problem has a number of <emphasis>solutions</emphasis>. There are several categories of
      solutions:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>possible solution</emphasis> is any solution, whether or not it breaks any number of
          constraints. Planning problems tend to have an incredibly large number of possible solutions. Many of those
          solutions are worthless.</para>
        </listitem>

        <listitem>
          <para>A <emphasis>feasible solution</emphasis> is a solution that does not break any (negative) hard
          constraints. The number of feasible solutions tends to be relative to the number of possible solutions.
          Sometimes there are no feasible solutions. Every feasible solution is a possible solution.</para>
        </listitem>

        <listitem>
          <para>An <emphasis>optimal solution</emphasis> is a solution with the highest score. Planning problems tend to
          have 1 or a few optimal solutions. There is always at least 1 optimal solution, even in the case that there
          are no feasible solutions and the optimal solution isn't feasible.</para>
        </listitem>

        <listitem>
          <para>The <emphasis>best solution found</emphasis> is the solution with the highest score found by an
          implementation in a given amount of time. The best solution found is likely to be feasible and, given enough
          time, it's an optimal solution.</para>
        </listitem>
      </itemizedlist>

      <para>Counterintuitively, the number of possible solutions is huge (if calculated correctly), even with a small
      dataset. As you can see in the examples, most instances have a lot more possible solutions than the minimal number
      of atoms in the known universe (10^80). Because there is no silver bullet to find the optimal solution, any
      implementation is forced to evaluate at least a subset of all those possible solutions.</para>

      <para>OptaPlanner supports several optimization algorithms to efficiently wade through that incredibly large
      number of possible solutions. Depending on the use case, some optimization algorithms perform better than others,
      but it's impossible to tell in advance. <emphasis role="bold">With OptaPlanner, it is easy to switch the
      optimization algorithm</emphasis>, by changing the solver configuration in a few lines of XML or code.</para>
    </section>
  </section>

  <section xml:id="downloadAndRunTheExamples">
    <title>Download and Run the Examples</title>

    <section xml:id="getTheReleaseZipAndRunTheExamples">
      <title>Get the Release .zip and Run the Examples</title>

      <para>To try it now:</para>

      <orderedlist>
        <listitem>
          <para>Download a release zip of OptaPlanner from <link xlink:href="http://www.optaplanner.org">the OptaPlanner
          website</link> and unzip it.</para>
        </listitem>

        <listitem>
          <para>Open the directory <filename>examples</filename> and run the script.</para>

          <para>Linux or Mac:</para>

          <programlisting>$ cd examples
$ ./runExamples.sh</programlisting>

          <para>Windows:</para>

          <programlisting>$ cd examples
$ runExamples.bat</programlisting>
        </listitem>
      </orderedlist>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Planner_introduction/distributionZip.png"/>
        </imageobject>
      </mediaobject>

      <para>The Examples GUI application will open. Pick an example to try it out:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Planner_introduction/plannerExamplesAppScreenshot.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>OptaPlanner itself has no GUI dependencies. It runs just as well on a server or a mobile JVM as it does on
        the desktop.</para>
      </note>

      <para>Besides the GUI examples, there are also a set of webexamples to try out:</para>

      <orderedlist>
        <listitem>
          <para>Download a JEE application server, such as JBoss EAP or <link
          xlink:href="http://www.wildfly.org/">WildFly</link> and unzip it.</para>
        </listitem>

        <listitem>
          <para>Download a release zip of OptaPlanner from <link xlink:href="http://www.optaplanner.org">the OptaPlanner
          website</link> and unzip it.</para>
        </listitem>

        <listitem>
          <para>Open the directory <filename>webexamples</filename> and deploy the
          <literal>optaplanner-webexamples-*.war</literal> file on the JEE application server.</para>
        </listitem>

        <listitem>
          <para>Surf to <link
          xlink:href="http://localhost:8080/optaplanner-webexamples-*/">http://localhost:8080/optaplanner-webexamples-*/</link>
          (replace the <literal>*</literal> with the actual version).</para>
        </listitem>
      </orderedlist>

      <note>
        <para>The webexamples (but not OptaPlanner itself) require several JEE API's (such as Servlet, JAX-RS and CDI)
        to run. To successfully deploy <literal>optaplanner-webexamples-*.war</literal> on a servlet container (such as
        Jetty or Tomcat), instead of on a real JEE application server (such as WildFly), add the missing implementation
        libraries (for example RestEasy and Weld) in the war manually.</para>
      </note>

      <para>Pick an example to try it out, such as the Vehicle Routing example:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Planner_introduction/plannerWebexamplesScreenshot.png"/>
        </imageobject>
      </mediaobject>
    </section>

    <section xml:id="runTheExamplesInAnIDE">
      <title>Run the Examples in an IDE (IntelliJ, Eclipse, NetBeans)</title>

      <para>To run the examples in your favorite IDE:</para>

      <orderedlist>
        <listitem>
          <para>Configure your IDE:</para>

          <itemizedlist>
            <listitem>
              <para>In IntelliJ IDEA, NetBeans or a non-vanilla Eclipse, just open the file
              <filename>examples/sources/pom.xml</filename> as a new project, the maven integration will take care of
              the rest.</para>
            </listitem>

            <listitem>
              <para>In a vanilla Eclipse (which lacks the M2Eclipse plugin), open a new project for the directory
              <filename>examples/sources</filename>.</para>

              <itemizedlist>
                <listitem>
                  <para>Add all the jars to the classpath from the directory <filename>binaries</filename> and the
                  directory <filename>examples/binaries</filename>, except for the file
                  <filename>examples/binaries/optaplanner-examples-*.jar</filename>.</para>
                </listitem>

                <listitem>
                  <para>Add the Java source directory <filename>src/main/java</filename> and the Java resources
                  directory <filename>src/main/resources</filename>.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Create a run configuration:</para>

          <itemizedlist>
            <listitem>
              <para>Main class: <literal>org.optaplanner.examples.app.OptaPlannerExamplesApp</literal></para>
            </listitem>

            <listitem>
              <para>VM parameters (optional): <literal>-Xmx512M -server</literal></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Run that run configuration.</para>
        </listitem>
      </orderedlist>

      <para>To run a specific example directly and skip the example selection window, run its <literal>App</literal>
      class (for example <literal>CloudBalancingApp</literal>) instead of
      <literal>OptaPlannerExamplesApp</literal>.</para>
    </section>

    <section xml:id="useWithMavenGradleEtc">
      <title>Use OptaPlanner with Maven, Gradle, Ivy, Buildr or ANT</title>

      <para>The OptaPlanner jars are also available in <link
      xlink:href="http://search.maven.org/#search|ga|1|org.optaplanner">the central maven repository</link> (and also in
      <link xlink:href="https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.optaplanner~~~~">the JBoss
      maven repository</link>).</para>

      <para>If you use Maven, add a dependency to <literal>optaplanner-core</literal> in your project's
      <filename>pom.xml</filename>:</para>

      <programlisting language="xml">    &lt;dependency&gt;
      &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
      &lt;artifactId&gt;optaplanner-core&lt;/artifactId&gt;
    &lt;/dependency&gt;</programlisting>

      <para>This is similar for Gradle, Ivy and Buildr. To identify the latest version, check <link
      xlink:href="http://search.maven.org/#search|ga|1|org.optaplanner">the central maven repository</link>.</para>

      <para>Because you might end up using other OptaPlanner modules too, it's recommended to import the
      <literal>optaplanner-bom</literal> in Maven's <literal>dependencyManagement</literal> so the OptaPlanner version
      is specified only once:</para>

      <programlisting language="xml">  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
        &lt;artifactId&gt;optaplanner-bom&lt;/artifactId&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;version&gt;...&lt;/version&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
      ...
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;</programlisting>

      <para>If you're still using ANT (without Ivy), copy all the jars from the download zip's
      <filename>binaries</filename> directory in your classpath.</para>

      <note>
        <para>The download zip's <filename>binaries</filename> directory contains far more jars then
        <literal>optaplanner-core</literal> actually uses. It also contains the jars used by other modules, such as
        <literal>optaplanner-benchmark</literal>.</para>

        <para>Check the maven repository <filename>pom.xml</filename> files to determine the minimal dependency set of a
        specific module (for a specific version).</para>
      </note>
    </section>

    <section xml:id="buildFromSource">
      <title>Build OptaPlanner from Source</title>

      <para>It's easy to build OptaPlanner from source:</para>

      <orderedlist>
        <listitem>
          <para><link xlink:href="https://help.github.com/articles/set-up-git/">Set up Git</link> and clone
          <literal>optaplanner</literal> from GitHub (or alternatively, download <link
          xlink:href="https://github.com/droolsjbpm/optaplanner/zipball/master">the zipball</link>):</para>

          <programlisting>$ git clone git@github.com:droolsjbpm/optaplanner.git optaplanner
...</programlisting>

          <note>
            <para>If you don't have a GitHub account or your local Git installation isn't configured with it, use this
            command instead, to avoid an authentication issue:</para>

            <programlisting>$ git clone https://github.com/droolsjbpm/optaplanner.git optaplanner
...</programlisting>
          </note>
        </listitem>

        <listitem>
          <para>Build it with <link xlink:href="http://maven.apache.org/">Maven</link>:</para>

          <programlisting>$ cd optaplanner
$ mvn clean install -DskipTests
...</programlisting>

          <note>
            <para>The first time, Maven might take a long time, because it needs to download jars.</para>
          </note>
        </listitem>

        <listitem>
          <para>Run the examples:</para>

          <programlisting>$ cd optaplanner-examples
$ mvn exec:java
...</programlisting>
        </listitem>

        <listitem>
          <para>Edit the sources in your favorite IDE.</para>
        </listitem>

        <listitem>
          <para>Optional: use a Java profiler.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="governance">
    <title>Governance</title>

    <section xml:id="statusOfOptaPlanner">
      <title>Status of OptaPlanner</title>

      <para>OptaPlanner is:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Stable</emphasis>: Heavily tested with unit, integration and stress tests.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Reliable</emphasis>: Used in production across the world.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Scalable</emphasis>: One of the examples handles 50 000 variables with 5 000
          variables each, multiple constraint types and billions of possible constraint matches.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Documented</emphasis>: See this detailed manual or one of the many
          examples.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="backwardsCompatibility">
      <title>Backwards Compatibility</title>

      <para>OptaPlanner separates its API and implementation:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Public API</emphasis>: All classes in the package namespace <emphasis
          role="bold">org.optaplanner.core.api</emphasis> are 100% <emphasis role="bold">backwards compatible</emphasis>
          in future releases (especially minor and hotfix releases). In rare circumstances, if the major version number
          changes, a few specific classes might have a few backwards incompatible changes, but those will be clearly
          documented in the recipe <link
          xlink:href="https://github.com/droolsjbpm/optaplanner/blob/master/optaplanner-distribution/src/main/assembly/filtered-resources/UpgradeFromPreviousVersionRecipe.txt"><filename>UpgradeFromPreviousVersionRecipe.txt</filename></link>.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">XML configuration</emphasis>: The XML solver configuration is backwards compatible
          for all elements, except for elements that require the use of non public API classes. The XML solver
          configuration is defined by the classes in the package namespace <emphasis
          role="bold">org.optaplanner.core.config</emphasis>.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Implementation classes</emphasis>: All classes in the package namespace <emphasis
          role="bold">org.optaplanner.core.impl</emphasis> are <emphasis>not</emphasis> backwards compatible: they will
          change in future major or minor releases (but probably not in hotfix releases). The recipe <link
          xlink:href="https://github.com/droolsjbpm/optaplanner/blob/master/optaplanner-distribution/src/main/assembly/filtered-resources/UpgradeFromPreviousVersionRecipe.txt"><filename>UpgradeFromPreviousVersionRecipe.txt</filename></link>
          describes every such relevant change and on how to quickly deal with it when upgrading to a newer version.
          That recipe file is included in every release zip.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>This documentation covers some impl classes too. Those documented impl classes are reliable and safe to
        use (unless explicitly marked as experimental in this documentation), but we're just not entirely comfortable
        yet to write their signatures in stone.</para>
      </note>
    </section>

    <section xml:id="communityAndSupport">
      <title>Community and Support</title>

      <para>For news and articles, check <link xlink:href="http://www.optaplanner.org/blog/">our blog</link>, Google+
      (<link xlink:href="https://plus.google.com/+OptaPlannerOrg">OptaPlanner</link>, <link
      xlink:href="https://plus.google.com/+GeoffreyDeSmet">Geoffrey De Smet</link>) and twitter (<link
      xlink:href="https://twitter.com/OptaPlanner">OptaPlanner</link>, <link
      xlink:href="https://twitter.com/GeoffreyDeSmet">Geoffrey De Smet</link>). <emphasis role="bold">If OptaPlanner
      helps you, help us by blogging or tweeting about it!</emphasis></para>

      <para>Public questions are welcome on <link xlink:href="http://www.optaplanner.org/community/forum.html">our
      community forum</link>. Bugs and feature requests are welcome in <link
      xlink:href="https://issues.jboss.org/browse/PLANNER">our issue tracker</link>. Pull requests are very welcome on
      GitHub and get priority treatment! By open sourcing your improvements, you 'll benefit from our peer review and
      from our improvements made on top of your improvements.</para>

      <para>Red Hat sponsors OptaPlanner development by employing the core team. For enterprise support and consulting,
      take a look at <link xlink:href="http://www.optaplanner.org/community/product.html">the BRMS and BPMS
      products</link> (which contain OptaPlanner) or <link
      xlink:href="http://www.redhat.com/en/about/contact/sales">contact Red Hat</link>.</para>
    </section>

    <section xml:id="relationshipWithKie">
      <title>Relationship with Drools and jBPM</title>

      <para>OptaPlanner is part of the <link xlink:href="http://www.kiegroup.org">KIE group of projects</link>. It
      releases regularly (often once or twice per month) together with the <link
      xlink:href="http://www.drools.org/">Drools</link> rule engine and the <link
      xlink:href="http://www.jbpm.org/">jBPM</link> workflow engine.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Planner_introduction/kieFunctionalityOverview.png"/>
        </imageobject>
      </mediaobject>

      <para>See <link linkend="architectureOverview">the architecture overview</link> to learn more about the optional
      integration with Drools.</para>
    </section>
  </section>
</chapter>
