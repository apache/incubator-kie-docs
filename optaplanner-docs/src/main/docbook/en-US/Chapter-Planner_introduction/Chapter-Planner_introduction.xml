<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="plannerIntroduction" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Planner introduction</title>

  <section>
    <title>What is OptaPlanner?</title>

    <para><emphasis role="bold"><link xlink:href="http://www.optaplanner.org">OptaPlanner</link> is a lightweight,
    embeddable planning engine that optimizes planning problems.</emphasis> It solves use cases, such as:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Employee shift rostering</emphasis>: timetabling nurses, repairmen, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Agenda scheduling</emphasis>: scheduling meetings, appointments, maintenance jobs,
        advertisements, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Educational timetabling</emphasis>: scheduling lessons, courses, exams, conference
        presentations, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Vehicle routing</emphasis>: planning vehicles (trucks, trains, boats, airplanes,
        ...) with freight and/or people</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Bin packing</emphasis>: filling containers, trucks, ships and storage warehouses,
        but also cloud computers nodes, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Job shop scheduling</emphasis>: planning car assembly lines, machine queue planning,
        workforce task planning, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Cutting stock</emphasis>: minimizing waste while cutting paper, steel, carpet,
        ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Sport scheduling</emphasis>: planning football leagues, baseball leagues, ...</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Financial optimization</emphasis>: investment portfolio optimization, risk
        spreading, ...</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Planner_introduction/useCaseOverview.png"/>
      </imageobject>
    </mediaobject>

    <para>Every organization faces planning problems: provide products or services with a limited set of
    <emphasis>constrained</emphasis> resources (employees, assets, time and money). OptaPlanner optimizes such planning
    to do more business with less resources. This is known as <emphasis>Constraint Satisfaction Programming</emphasis>
    (which is part of the discipline <emphasis>Operations Research</emphasis>).</para>

    <para>OptaPlanner helps normal Java<superscript>TM</superscript> programmers solve constraint satisfaction problems
    efficiently. Under the hood, it combines optimization heuristics and metaheuristics with very efficient score
    calculation.</para>

    <para>OptaPlanner is <emphasis>open source</emphasis> software, released under <link
    xlink:href="http://www.apache.org/licenses/LICENSE-2.0.html">the Apache Software License 2.0</link>. This license is
    very liberal and allows reuse for commercial purposes. Read <link
    xlink:href="http://www.apache.org/foundation/licence-FAQ.html#WhatDoesItMEAN">the layman's explanation</link>.
    OptaPlanner is 100% pure Java<superscript>TM</superscript>, runs on <link xlink:href="compatibility">any JVM</link>
    and is available in <link linkend="useWithMavenGradleEtc">the Maven Central Repository</link> too.</para>
  </section>

  <section>
    <title>What is a planning problem?</title>

    <section>
      <title>A planning problem is NP-complete</title>

      <para>All the use cases above are <emphasis>probably</emphasis> <link
      xlink:href="http://en.wikipedia.org/wiki/NP-complete">NP-complete</link>. In layman's terms, this means:</para>

      <itemizedlist>
        <listitem>
          <para>It's easy to verify a given solution to a problem in reasonable time.</para>
        </listitem>

        <listitem>
          <para>There is no silver bullet to find the optimal solution of a problem in reasonable time (*).</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>(*) At least, none of the smartest computer scientists in the world have found such a silver bullet yet.
        But if they find one for 1 NP-complete problem, it will work for every NP-complete problem.</para>

        <para>In fact, there's a $ 1,000,000 reward for anyone that proves if <link
        xlink:href="http://en.wikipedia.org/wiki/P_%3D_NP_problem">such a silver bullet actually exists or
        not</link>.</para>
      </note>

      <para>The implication of this is pretty dire: solving your problem is probably harder than you anticipated,
      because the 2 common techniques won't suffice:</para>

      <itemizedlist>
        <listitem>
          <para>A brute force algorithm (even a smarter variant) will take too long.</para>
        </listitem>

        <listitem>
          <para>A quick algorithm, for example in bin packing, <emphasis>putting in the largest items first</emphasis>,
          will return a solution that is usually far from optimal.</para>
        </listitem>
      </itemizedlist>

      <para>By using advanced optimization algorithms, <emphasis role="bold">Planner does find a good solution in
      reasonable time for such planning problems.</emphasis></para>
    </section>

    <section>
      <title>A planning problem has (hard and soft) constraints</title>

      <para>Usually, a planning problem has at least 2 levels of constraints:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>(negative) hard constraint</emphasis> must not be broken. For example: <emphasis>1 teacher
          can not teach 2 different lessons at the same time</emphasis>.</para>
        </listitem>

        <listitem>
          <para>A <emphasis>(negative) soft constraint</emphasis> should not be broken if it can be avoided. For
          example: <emphasis>Teacher A does not like to teach on Friday afternoon</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>Some problems have positive constraints too:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>positive soft constraint (or reward)</emphasis> should be fulfilled if possible. For
          example: <emphasis>Teacher B likes to teach on Monday morning</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>Some basic problems (such as N Queens) only have hard constraints. Some problems have 3 or more levels of
      constraints, for example hard, medium and soft constraints.</para>

      <para>These constraints define the <emphasis>score calculation</emphasis> (AKA <emphasis>fitness
      function</emphasis>) of a planning problem. Each solution of a planning problem can be graded with a score.
      <emphasis role="bold">With Planner, score constraints are written in an Object Orientated language, such as Java
      code or Drools rules</emphasis>. Such code is easy, flexible and scalable.</para>
    </section>

    <section>
      <title>A planning problem has a huge search space</title>

      <para>A planning problem has a number of <emphasis>solutions</emphasis>. There are several categories of
      solutions:</para>

      <itemizedlist>
        <listitem>
          <para>A <emphasis>possible solution</emphasis> is any solution, whether or not it breaks any number of
          constraints. Planning problems tend to have an incredibly large number of possible solutions. Many of those
          solutions are worthless.</para>
        </listitem>

        <listitem>
          <para>A <emphasis>feasible solution</emphasis> is a solution that does not break any (negative) hard
          constraints. The number of feasible solutions tends to be relative to the number of possible solutions.
          Sometimes there are no feasible solutions. Every feasible solution is a possible solution.</para>
        </listitem>

        <listitem>
          <para>An <emphasis>optimal solution</emphasis> is a solution with the highest score. Planning problems tend to
          have 1 or a few optimal solutions. There is always at least 1 optimal solution, even in the case that there
          are no feasible solutions and the optimal solution isn't feasible.</para>
        </listitem>

        <listitem>
          <para>The <emphasis>best solution found</emphasis> is the solution with the highest score found by an
          implementation in a given amount of time. The best solution found is likely to be feasible and, given enough
          time, it's an optimal solution.</para>
        </listitem>
      </itemizedlist>

      <para>Counterintuitively, the number of possible solutions is huge (if calculated correctly), even with a small
      dataset. As you can see in the examples, most instances have a lot more possible solutions than the minimal number
      of atoms in the known universe (10^80). Because there is no silver bullet to find the optimal solution, any
      implementation is forced to evaluate at least a subset of all those possible solutions.</para>

      <para>OptaPlanner supports several optimization algorithms to efficiently wade through that incredibly large
      number of possible solutions. Depending on the use case, some optimization algorithms perform better than others,
      but it's impossible to tell in advance. <emphasis role="bold">With Planner, it is easy to switch the optimization
      algorithm</emphasis>, by changing the solver configuration in a few lines of XML or code.</para>
    </section>
  </section>

  <section xml:id="downloadAndRunTheExamples">
    <title>Download and run the examples</title>

    <section>
      <title>Get the release zip and run the examples</title>

      <para>To try it now:</para>

      <itemizedlist>
        <listitem>
          <para>Download a release zip of OptaPlanner from <link xlink:href="http://www.optaplanner.org">the OptaPlanner
          website</link>.</para>
        </listitem>

        <listitem>
          <para>Unzip it.</para>
        </listitem>

        <listitem>
          <para>Open the directory <filename>examples</filename> and run the script.</para>

          <para>Linux or Mac:</para>

          <programlisting>$ cd examples
$ ./runExamples.sh</programlisting>

          <para>Windows:</para>

          <programlisting>$ cd examples
$ runExamples.bat</programlisting>
        </listitem>
      </itemizedlist>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Planner_introduction/distributionZip.png"/>
        </imageobject>
      </mediaobject>

      <para>The Examples GUI application will open. Just pick an example:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Planner_introduction/plannerExamplesAppScreenshot.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>Planner itself has no GUI dependencies. It runs just as well on a server or a mobile JVM as it does on the
        desktop.</para>
      </note>
    </section>

    <section xml:id="runTheExamplesInAnIDE">
      <title>Run the examples in an IDE (IntelliJ, Eclipse, NetBeans)</title>

      <para>To run the examples in your favorite IDE:</para>

      <orderedlist>
        <listitem>
          <para>Configure your IDE:</para>

          <itemizedlist>
            <listitem>
              <para>In IntelliJ and NetBeans, just open the file <filename>examples/sources/pom.xml</filename> as a new
              project, the maven integration will take care of the rest.</para>
            </listitem>

            <listitem>
              <para>In Eclipse, open a new project for the directory <filename>examples/sources</filename>.</para>

              <itemizedlist>
                <listitem>
                  <para>Add all the jars to the classpath from the directory <filename>binaries</filename> and the
                  directory <filename>examples/binaries</filename>, except for the file
                  <filename>examples/binaries/optaplanner-examples-*.jar</filename>.</para>
                </listitem>

                <listitem>
                  <para>Add the Java source directory <filename>src/main/java</filename> and the Java resources
                  directory <filename>src/main/resources</filename>.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Create a run configuration:</para>

          <itemizedlist>
            <listitem>
              <para>Main class: <literal>org.optaplanner.examples.app.OptaPlannerExamplesApp</literal></para>
            </listitem>

            <listitem>
              <para>VM parameters (optional): <literal>-Xmx512M -server</literal></para>
            </listitem>

            <listitem>
              <para>Working directory: <literal>examples</literal> (this is the directory that contains the directory
              <literal>data</literal>)</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Run that run configuration.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="useWithMavenGradleEtc">
      <title>Use OptaPlanner with Maven, Gradle, Ivy, Buildr or ANT</title>

      <para>The OptaPlanner jars are also available in <link
      xlink:href="http://search.maven.org/#search|ga|1|org.optaplanner">the central maven repository</link> (and also in
      <link xlink:href="https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.optaplanner~~~~">the JBoss
      maven repository</link>).</para>

      <para>If you use Maven, add a dependency to <literal>optaplanner-core</literal> in your project's
      <filename>pom.xml</filename>:</para>

      <programlisting language="xml">    &lt;dependency&gt;
      &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
      &lt;artifactId&gt;optaplanner-core&lt;/artifactId&gt;
    &lt;/dependency&gt;</programlisting>

      <para>This is similar for Gradle, Ivy and Buildr. To identify the latest version, check <link
      xlink:href="http://search.maven.org/#search|ga|1|org.optaplanner">the central maven repository</link>.</para>

      <para>Because you might end up using other optaplanner modules too, it's recommended to import the
      <literal>optaplanner-bom</literal> in Maven's <literal>dependencyManagement</literal> so the optaplanner version
      is specified only once:</para>

      <programlisting language="xml">  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
        &lt;artifactId&gt;optaplanner-bom&lt;/artifactId&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;version&gt;...&lt;/version&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
      ...
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;</programlisting>

      <para>If you're still using ANT (without Ivy), copy all the jars from the download zip's
      <filename>binaries</filename> directory and manually verify that your classpath doesn't contain duplicate
      jars.</para>

      <note>
        <para>The download zip's <filename>binaries</filename> directory contains far more jars then
        <literal>optaplanner-core</literal> actually uses. It also contains the jars used by other modules, such as
        <literal>optaplanner-benchmark</literal>.</para>

        <para>Check the maven repository <filename>pom.xml</filename> files to determine the minimal dependency set for
        a specific version of a specific module.</para>
      </note>
    </section>

    <section xml:id="buildFromSource">
      <title>Build OptaPlanner from source</title>

      <para>You can also easily build OptaPlanner from source yourself.</para>

      <para><link xlink:href="http://help.github.com/set-up-git-redirect">Set up Git</link> and clone
      <literal>optaplanner</literal> from GitHub (or alternatively, download <link
      xlink:href="https://github.com/droolsjbpm/optaplanner/zipball/master">the zipball</link>):</para>

      <programlisting>$ git clone git@github.com:droolsjbpm/optaplanner.git optaplanner
...</programlisting>

      <para>Then do a <link xlink:href="http://maven.apache.org/">Maven 3</link> build:</para>

      <programlisting>$ cd optaplanner
$ mvn clean install -DskipTests
...</programlisting>

      <para>After that, you can run any example directly from the command line, just run this command and pick an
      example:</para>

      <programlisting>$ cd optaplanner-examples
$ mvn exec:exec
...</programlisting>
    </section>
  </section>

  <section>
    <title>Status of OptaPlanner</title>

    <para>OptaPlanner is production ready. The API is almost stable but backward incompatible changes can occur. With
    the recipe called <link
    xlink:href="https://github.com/droolsjbpm/optaplanner/blob/master/optaplanner-distribution/src/main/assembly/filtered-resources/UpgradeFromPreviousVersionRecipe.txt"><filename>UpgradeFromPreviousVersionRecipe.txt</filename></link>
    you can easily upgrade to a newer version and quickly deal with any backwards incompatible changes. That recipe file
    is included in every release.</para>
  </section>

  <section xml:id="compatibility">
    <title>Compatibility</title>

    <para>OptaPlanner is 100% pure Java<superscript>TM</superscript> and runs on any JVM 1.6 or higher.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Planner_introduction/compatibility.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section>
    <title>Questions, issues and blog</title>

    <para>Your questions and comments are welcome on <link xlink:href="http://www.jboss.org/drools/lists.html">the user
    mailing list</link>. Start the subject of your mail with <literal>[planner]</literal>. You can read/write to the
    user mailing list without littering your mailbox through <link
    xlink:href="http://drools.46999.n3.nabble.com/Drools-User-forum-f47000.html">this web forum</link> or <link
    xlink:href="nntp://news.gmane.org/gmane.comp.java.drools.user">this newsgroup</link>.</para>

    <para>Feel free to report an issue (such as a bug, improvement or a new feature request) for the OptaPlanner code or
    for this manual to <link xlink:href="https://issues.jboss.org/browse/PLANNER">our issue tracker</link>.</para>

    <para>Pull requests are very welcome and get priority treatment! By open sourcing your improvements, you 'll benefit
    from our peer review and from our improvements made upon your improvements.</para>

    <para>Check <link xlink:href="http://blog.athico.com/search/label/planner">our blog</link>, Google+ (<link
    xlink:href="https://plus.google.com/112724449845406009021">OptaPlanner</link>, <link
    xlink:href="https://plus.google.com/112811208792575157490">Geoffrey De Smet</link>) and twitter (<link
    xlink:href="http://twitter.com/geoffreydesmet">Geoffrey De Smet</link>) for news and articles. If OptaPlanner helps
    you solve your problem, don't forget to blog or tweet about it!</para>
  </section>
</chapter>
