<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="development" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Development</title>

  <section xml:id="methodologyOverview">
    <title>Methodology Overview</title>

    <para>The diagram below explains the overall structure of the OptaPlanner source code:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Development/methodologyOverview.png"/>
      </imageobject>
    </mediaobject>

    <para>The development philosophy includes:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Reuse</emphasis>: The examples are reused as integration tests, stress tests and
        demo's. The documentation images are reused as slides.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Consistent terminology</emphasis>: Each example has a class <literal>App</literal>
        (executable class), <literal>Dao</literal> (Data Access Object) and <literal>Panel</literal> (swing UI).</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Consistent structure</emphasis>: Each example has the same packages:
        <literal>domain</literal>, <literal>persistence</literal>, <literal>app</literal>, <literal>solver</literal> and
        <literal>swingui</literal>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Real world usefulness</emphasis>: Every feature is used in an example. Most examples
        are real world use cases with real world constraints, often with real world data.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Automated testing</emphasis>: There are unit tests, integration tests and stress
        tests. The test coverage is high.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Fail fast with an understandable error message</emphasis>: Invalid states are
        checked as early as possible.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="developmentGuidelines">
    <title>Development guidelines</title>

    <orderedlist>
      <listitem>
        <para>Fail fast. There are several levels of fail fast, from better to worse:</para>

        <orderedlist>
          <listitem>
            <para><emphasis role="bold">Fail Fast at compile time</emphasis>. For example: Don't accept an
            <literal>Object</literal> as parameter if it needs to be a <literal>String</literal> or an
            <literal>Integer</literal>.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Fail Fast at startup time</emphasis>. For example: if the configuration
            parameter needs to be a positive <literal>int</literal> and it's negative, fail fast</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Fail Fast at runtime</emphasis>. For example: if the request needs to contain a
            double between <literal>0.0</literal> and <literal>1.0</literal> and it's bigger than
            <literal>1.0</literal>, fail fast.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Fail Fast at runtime in assertion mode</emphasis> if the detection performance
            cost is high. For example: If, after every low level iteration, the variable A needs to be equal to the
            square root of B, check it if and only if an assert flag is set to true (usually controlled by the <link
            linkend="environmentMode">EnvironmentMode</link>).</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para><literal>Exception</literal> messages</para>

        <orderedlist>
          <listitem>
            <para>The <literal>Exception</literal> message must include the name and state of each relevant variable.
            For example:<programlisting language="java">if (fooSize &lt; 0) {
    throw new IllegalArgumentException("The fooSize (" + fooSize + ") of bar (" + this + ") must be positive.");
}</programlisting>Notice that the output clearly explains what's wrong:<programlisting language="java">Exception in thread "main" java.lang.IllegalArgumentException: The fooSize (-5) must be positive.
    at ...</programlisting></para>
          </listitem>

          <listitem>
            <para>Whenever possible, the <literal>Exception</literal> message must include context.</para>
          </listitem>

          <listitem>
            <para>Whenever the fix is not obvious, the <literal>Exception</literal> message must include advice.</para>

            <programlisting language="java">Exception in thread "main" java.lang.IllegalArgumentException: UndoMove corruption: ...
  1) Check your custom createUndoMove() of ...
  2) Check your custom Variable listeners if ...
    at ...</programlisting>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>
</chapter>
