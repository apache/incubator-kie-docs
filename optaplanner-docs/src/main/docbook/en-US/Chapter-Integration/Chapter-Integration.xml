<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="integration" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Integration</title>

  <section xml:id="integrationOverview">
    <title>Overview</title>

    <para>Planner's input and output data (the planning problem and the best solution) are plain old JavaBeans (POJO's),
    so integration with other Java technologies is straightforward. For example:</para>

    <itemizedlist>
      <listitem>
        <para>To read a planning problem from the database (and store the best solution in it), annotate the domain
        POJO's with JPA annotations.</para>
      </listitem>

      <listitem>
        <para>To read a planning problem from an XML file (and store the best solution in it), annotate the domain
        POJO's with XStream or JAXB annotations.</para>
      </listitem>

      <listitem>
        <para>To expose the Solver as a REST Service that reads the planning problem and responds with the best
        solution, annotate the domain POJO's with XStream or JAXB annotations and hook the <literal>Solver</literal> in
        Camel or RESTEasy.</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Integration/integrationOverview.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section xml:id="integrationWithPersistentStorage">
    <title>Persistent Storage</title>

    <section xml:id="integrationWithJpaAndHibernate">
      <title>Database: JPA and Hibernate</title>

      <para>Enrich the domain POJO's (solution, entities and problem facts) with JPA annotations to store them in a
      database.</para>

      <note>
        <para>Do not confuse JPA's <literal>@Entity</literal> annotation with Planner's
        <literal>@PlanningEntity</literal> annotation. They can appear both on the same class.</para>
      </note>
    </section>

    <section xml:id="integrationWithXStream">
      <title>XML: XStream</title>

      <para>Enrich the domain POJO's (solution, entities and problem facts) with XStream annotations to serialize them
      to/from XML.</para>
    </section>

    <section xml:id="integrationWithJaxb">
      <title>XML: JAXB</title>

      <para>Enrich the domain POJO's (solution, entities and problem facts) with JAXB annotations to serialize them
      to/from XML.</para>
    </section>
  </section>

  <section xml:id="integrationWithSoaAndEsb">
    <title>SOA and ESB</title>

    <section xml:id="integrationWithCamel">
      <title>Camel and Karaf</title>

      <para><link xlink:href="http://camel.apache.org/">Camel</link> is an enterprise integration framework which
      includes support for Planner (starting from Camel 2.13). It can expose a use case as a REST service, a SOAP
      service, a JMS service, ...</para>

      <para><link xlink:href="http://camel.apache.org/optaplanner.html">Read the documentation for the camel-optaplanner
      component.</link> That component works in Karaf too.</para>
    </section>
  </section>

  <section xml:id="integrationWithOtherEnvironments">
    <title>Other Environments</title>

    <section xml:id="integrationWithJBossModules">
      <title>JBoss Modules, WildFly and JBoss EAP</title>

      <para>To deploy an Planner web application on WildFly, simply include the optaplanner dependency jars in the
      <literal>war</literal> file's <literal>WEB-INF/lib</literal> directory (just like any other dependency) as shown
      in the <literal>optaplanner-webexamples-*.war</literal>. However, in this approach the war file can easily grow to
      several MB in size, which is fine for a one-time deployment, but too heavyweight for frequent redeployments
      (especially over a slow network connection).</para>

      <para>The remedy is to use deliver the optaplanner jars in a JBoss module to WildFly and create a skinny war.
      Let's create an module called <emphasis>org.optaplanner</emphasis>:</para>

      <orderedlist>
        <listitem>
          <para>Navigate to the directory <literal role="bold">${WILDFLY_HOME}/modules/system/layers/base/</literal>.
          This directory contains the JBoss modules of WildFly. Create directory structure
          <literal>org/optaplanner/main</literal> for our new module.</para>

          <orderedlist>
            <listitem>
              <para>Copy <literal>optaplanner-core-${version}.jar</literal> and all its direct and transitive dependency
              jars into that new directory. Use "mvn dependency:tree" on each optaplanner artifact to discover all
              dependencies.</para>
            </listitem>

            <listitem>
              <para>Create the file <literal>module.xml</literal> in that new directory. Give it this content:</para>

              <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;module xmlns="urn:jboss:module:1.3" name="org.optaplanner"&gt;
  &lt;resources&gt;
    ...
    &lt;resource-root path="kie-api-${version}.jar"/&gt;
    ...
    &lt;resource-root path="optaplanner-core-${version}.jar"/&gt;
    ...
    &lt;resource-root path="."/&gt; 
  &lt;/resources&gt;
  &lt;dependencies&gt;
    &lt;module name="javaee.api"/&gt;
  &lt;/dependencies&gt;
&lt;/module&gt;</programlisting>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Navigate to the deployed <literal>war</literal> file.</para>

          <orderedlist>
            <listitem>
              <para>Remove <literal>optaplanner-core-${version}.jar</literal> and all its direct and transitive
              dependency jars from the <literal>WEB-INF/lib</literal> directory in the <literal>war</literal>
              file.</para>
            </listitem>

            <listitem>
              <para>Create the file <literal>jboss-deployment-structure.xml</literal> in the
              <literal>WEB-INF/lib</literal> directory. Give it this content:</para>

              <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;jboss-deployment-structure&gt;
   &lt;deployment&gt;
      &lt;dependencies&gt;
         &lt;module name="org.optaplanner" export="true"/&gt;
      &lt;/dependencies&gt;
   &lt;/deployment&gt;
&lt;/jboss-deployment-structure&gt;</programlisting>
            </listitem>
          </orderedlist>
        </listitem>
      </orderedlist>

      <important>
        <para>Because of WildFly's class loading, the method <literal>SolverFactory.createFromXmlResource()</literal>
        might not find the solver configuration and throw an <literal>IllegalArgumentException</literal>. Instead
        use:</para>

        <programlisting language="java">        SolverFactory solverFactory = SolverFactory.createFromXmlInputStream(
                getClass().getClassLoader().getResourceAsStream(
                        "org/optaplanner/examples/nqueens/solver/nqueensSolverConfig.xml"));</programlisting>
      </important>
    </section>

    <section xml:id="integrationWithOSGi">
      <title>OSGi</title>

      <para>The <literal>optaplanner-core</literal> jar includes OSGi metadata in its <literal>MANIFEST.MF</literal>
      file to function properly in an OSGi environment too.</para>

      <para>Furthermore, the maven artifact <literal>drools-karaf-features</literal> (which will be renamed to
      <literal>kie-karaf-features</literal>) contains a <literal>features.xml</literal> file that supports the
      OSGi-feature <literal>optaplanner-engine</literal>.</para>

      <note>
        <para>Planner does <emphasis>not</emphasis> require OSGi. It works perfectly fine in a normal Java environment
        too.</para>
      </note>
    </section>

    <section xml:id="integrationWithAndroid">
      <title>Android</title>

      <para>Android is not a complete JVM. Some JDK libraries of the <literal>java.beans</literal> package are missing
      for proper Planner functionality. However, it is possible to use Planner with Java score calculation by adding
      missing libraries to your Android project. The Drools rule engine does not work on Android yet, so Drools score
      calculation doesn't work on Android.</para>

      <para><emphasis role="bold">Workaround to use Planner on Android:</emphasis></para>

      <orderedlist>
        <listitem>
          <para>Download <link xlink:href="https://openbeans.googlecode.com/files/openbeans-1.0.jar">OpenBeans</link>
          redistribution of the <literal>java.beans</literal> package.</para>
        </listitem>

        <listitem>
          <para>Download <link xlink:href="https://jarjar.googlecode.com/files/jarjar-1.4.jar">Jar Jar Links</link>
          utility for repacking the redistribution.</para>
        </listitem>

        <listitem>
          <para>Create a <literal>jarJarRule.txt</literal> text file with a single line:</para>

          <programlisting>rule com.googlecode.openbeans.** java.beans.@1</programlisting>
        </listitem>

        <listitem>
          <para>Place all the files in the same folder and run the command:</para>

          <programlisting>$ java -jar jarjar-1.4.jar process jarJarRule.txt openbeans-1.0.jar javabeans-1.0.jar</programlisting>
        </listitem>

        <listitem>
          <para>Move the created <literal>javabeans-1.0.jar</literal> into the <literal>libs</literal> folder in your
          Android project.</para>
        </listitem>

        <listitem>
          <para>Add these lines to the <literal>android</literal> area in the <literal>build.gradle</literal> file in
          your Android project to allow classes of the <literal>java.*</literal> package inside the
          <literal>javabeans-1.0.jar</literal> file to be used:</para>

          <programlisting language="gradle">android {
    ...
    dexOptions {
        preDexLibraries = false
    }
    project.tasks.withType(com.android.build.gradle.tasks.Dex) {
        additionalParameters=['--core-library']
    }
    ...
}</programlisting>
        </listitem>

        <listitem>
          <para>Add a dependency to the <literal>build.gradle</literal> file in your Android project to exclude
          <literal>org.drools</literal> and <literal>xmlpull</literal> dependencies:</para>

          <programlisting language="gradle">dependencies {
    ...
    compile('org.optaplanner:optaplanner-core:...') {
        exclude group: 'xmlpull'
        exclude group: 'org.drools'
    }
    ...
}</programlisting>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="integrationWithHumanPlanners">
    <title>Integration with Human Planners (Politics)</title>

    <para>A good Planner implementation beats any good human planner for non-trivial datasets. Many human planners fail
    to accept this, often because they feel threatened by an automated system.</para>

    <para>But despite that, Planner can benefit from a human planner as supervisor:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">The human planner defines and validates the score function.</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Some examples expose a <literal>*Parametrization</literal> object, which defines the weight for each
            score constraint. The human planner can then tweak those weights at runtime.</para>
          </listitem>

          <listitem>
            <para>When the business changes, the score function often needs to change too. The human planner can notify
            the developers to add, change or remove score constraints.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis role="bold">The human planner is always in control of Planner.</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>As shown in the course scheduling example, the human planner can lock 1 or more planning variables to
            a specific planning value and make those immovable. Because they are <link
            linkend="immovablePlanningEntities">immovable</link>, Planner does not change them: it optimizes the
            planning around the enforcements made by the human. If the human planner locks all planning variables,
            he/she sidelines Planner completely.</para>
          </listitem>

          <listitem>
            <para>In a prototype implementation, the human planner might use this occasionally. But as the
            implementation matures, it must become obsolete. But do keep the feature alive: as a reassurance for the
            humans. Or in case that one day the business changes dramatically before the score constraints can be
            adjusted.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>Therefore, it's often a good idea to involve the human planner in your project.</para>
  </section>
</chapter>
