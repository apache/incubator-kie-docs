<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="quickStart" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Quick Start</title>

  <section xml:id="cloudBalancingTutorial">
    <title>Cloud Balancing Tutorial</title>

    <section xml:id="cloudBalancingProblemDescription">
      <title>Problem Description</title>

      <para>Suppose your company owns a number of cloud computers and needs to run a number of processes on those
      computers. Assign each process to a computer.</para>

      <para>The following hard constraints must be fulfilled:</para>

      <itemizedlist>
        <listitem>
          <para>Every computer must be able to handle the minimum hardware requirements of the sum of its
          processes:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">CPU capacity</emphasis>: The CPU power of a computer must be at least the sum
              of the CPU power required by the processes assigned to that computer.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Memory capacity</emphasis>: The RAM memory of a computer must be at least the
              sum of the RAM memory required by the processes assigned to that computer.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">Network capacity</emphasis>: The network bandwidth of a computer must be at
              least the sum of the network bandwidth required by the processes assigned to that computer.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>The following soft constraints should be optimized:</para>

      <itemizedlist>
        <listitem>
          <para>Each computer that has one or more processes assigned, incurs a maintenance cost (which is fixed per
          computer).</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Cost</emphasis>: Minimize the total maintenance cost.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>This problem is a form of <emphasis>bin packing</emphasis>. The following is a simplified example, in which
      we assign four processes to two computers with two constraints (CPU and RAM) with a simple algorithm:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_start/cloudBalanceUseCase.png"/>
        </imageobject>
      </mediaobject>

      <para>The simple algorithm used here is the <emphasis>First Fit Decreasing</emphasis> algorithm, which assigns the
      bigger processes first and assigns the smaller processes to the remaining space. As you can see, it is not
      optimal, as it does not leave enough room to assign the yellow process <literal>D</literal>.</para>

      <para>Planner does find the more optimal solution by using additional, smarter algorithms. It also scales: both in
      data (more processes, more computers) and constraints (more hardware requirements, other constraints). So let's
      see how Planner can be used in this scenario.</para>
    </section>

    <section xml:id="cloudBalancingValueProposition">
      <title>Value Proposition</title>

      <para>Here's executive summary of this example and <link linkend="machineReassignment">a more advanced
      implementation with more constraints</link>:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_start/cloudOptimizationValueProposition.png"/>
        </imageobject>
      </mediaobject>
    </section>

    <section xml:id="cloudBalancingProblemSize">
      <title>Problem Size</title>

      <table>
        <title>Cloud Balancing Problem Size</title>

        <tgroup align="left" cols="4" colsep="1" rowsep="1">
          <colspec colname="c1"/>

          <colspec colname="c2"/>

          <colspec colname="c3"/>

          <colspec colname="c4"/>

          <thead>
            <row>
              <entry>Problem Size</entry>

              <entry>Computers</entry>

              <entry>Processes</entry>

              <entry>Search Space</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>2computers-6processes</entry>

              <entry>2</entry>

              <entry>6</entry>

              <entry>64</entry>
            </row>

            <row>
              <entry>3computers-9processes</entry>

              <entry>3</entry>

              <entry>9</entry>

              <entry>10^4</entry>
            </row>

            <row>
              <entry>4computers-012processes</entry>

              <entry>4</entry>

              <entry>12</entry>

              <entry>10^7</entry>
            </row>

            <row>
              <entry>100computers-300processes</entry>

              <entry>100</entry>

              <entry>300</entry>

              <entry>10^600</entry>
            </row>

            <row>
              <entry>200computers-600processes</entry>

              <entry>200</entry>

              <entry>600</entry>

              <entry>10^1380</entry>
            </row>

            <row>
              <entry>400computers-1200processes</entry>

              <entry>400</entry>

              <entry>1200</entry>

              <entry>10^3122</entry>
            </row>

            <row>
              <entry>800computers-2400processes</entry>

              <entry>800</entry>

              <entry>2400</entry>

              <entry>10^6967</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="cloudBalancingDomainModelDesign">
      <title>Domain Model Design</title>

      <para>Beginning with the domain model:</para>

      <itemizedlist>
        <listitem>
          <para><literal>Computer</literal>: represents a computer with certain hardware (CPU power, RAM memory, network
          bandwidth) and maintenance cost.</para>
        </listitem>

        <listitem>
          <para><literal>Process</literal>: represents a process with a demand. Needs to be assigned to a
          <literal>Computer</literal> by Planner.</para>
        </listitem>

        <listitem>
          <para><literal>CloudBalance</literal>: represents a problem. Contains every <literal>Computer</literal> and
          <literal>Process</literal> for a certain data set.</para>
        </listitem>
      </itemizedlist>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_start/cloudBalanceClassDiagram.png"/>
        </imageobject>
      </mediaobject>

      <para>In the UML class diagram above, the Planner concepts are already annotated:</para>

      <itemizedlist>
        <listitem>
          <para>Planning entity: the class (or classes) that changes during solving. In this example, it is the class
          <literal>Process</literal>.</para>
        </listitem>

        <listitem>
          <para>Planning variable: the property (or properties) of a planning entity class that changes during solving.
          In this example, it is the property <literal>computer</literal> on the class
          <literal>Process</literal>.</para>
        </listitem>

        <listitem>
          <para>Planning solution: the class that represents a data set and contains all planning entities. In this
          example that is the class <literal>CloudBalance</literal>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="cloudBalancingMainMethod">
      <title>Main Method</title>

      <para>Try it yourself. <link linkend="downloadAndRunTheExamples">Download and configure the examples in your
      preferred IDE.</link> Run <literal>org.optaplanner.examples.cloudbalancing.app.CloudBalancingHelloWorld</literal>.
      By default, it is configured to run for 120 seconds. It will execute this code:</para>

      <example>
        <title>CloudBalancingHelloWorld.java</title>

        <programlisting language="java">public class CloudBalancingHelloWorld {

    public static void main(String[] args) {
        // Build the Solver
        SolverFactory&lt;CloudBalance&gt; solverFactory = SolverFactory.createFromXmlResource(
                "org/optaplanner/examples/cloudbalancing/solver/cloudBalancingSolverConfig.xml");
        Solver&lt;CloudBalance&gt; solver = solverFactory.buildSolver();

        // Load a problem with 400 computers and 1200 processes
        CloudBalance unsolvedCloudBalance = new CloudBalancingGenerator().createCloudBalance(400, 1200);

        // Solve the problem
        CloudBalance solvedCloudBalance = solver.solve(unsolvedCloudBalance);

        // Display the result
        System.out.println("\nSolved cloudBalance with 400 computers and 1200 processes:\n"
                + toDisplayString(solvedCloudBalance));
    }

    ...
}</programlisting>
      </example>

      <para>The code example does the following:</para>

      <itemizedlist>
        <listitem>
          <para>Build the <literal>Solver</literal> based on a solver configuration (in this case <link
          linkend="solverConfigurationByXML">an XML file</link> from the classpath).</para>

          <programlisting language="java">        SolverFactory&lt;CloudBalance&gt; solverFactory = SolverFactory.createFromXmlResource(
                "org/optaplanner/examples/cloudbalancing/solver/cloudBalancingSolverConfig.xml");
        Solver solver&lt;CloudBalance&gt; = solverFactory.buildSolver();</programlisting>
        </listitem>

        <listitem>
          <para>Load the problem. <literal>CloudBalancingGenerator</literal> generates a random problem: you will
          replace this with a class that loads a real problem, for example from a database.</para>

          <programlisting language="java">        CloudBalance unsolvedCloudBalance = new CloudBalancingGenerator().createCloudBalance(400, 1200);</programlisting>
        </listitem>

        <listitem>
          <para>Solve the problem.</para>

          <programlisting language="java">        CloudBalance solvedCloudBalance = solver.solve(unsolvedCloudBalance);</programlisting>
        </listitem>

        <listitem>
          <para>Display the result.</para>

          <programlisting language="java">        System.out.println("\nSolved cloudBalance with 400 computers and 1200 processes:\n"
                + toDisplayString(solvedCloudBalance));</programlisting>
        </listitem>
      </itemizedlist>

      <para>The only complicated part is building the <literal>Solver</literal>, as detailed in the next section.</para>
    </section>

    <section xml:id="cloudBalancingSolverConfiguration">
      <title>Solver Configuration</title>

      <para>Take a look at the solver configuration:</para>

      <example>
        <title>cloudBalancingSolverConfig.xml</title>

        <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;solver&gt;
  &lt;!-- Domain model configuration --&gt;
  &lt;scanAnnotatedClasses/&gt;

  &lt;!-- Score configuration --&gt;
  &lt;scoreDirectorFactory&gt;
    &lt;scoreDefinitionType&gt;HARD_SOFT&lt;/scoreDefinitionType&gt;
    &lt;easyScoreCalculatorClass&gt;org.optaplanner.examples.cloudbalancing.solver.score.CloudBalancingEasyScoreCalculator&lt;/easyScoreCalculatorClass&gt;
    &lt;!--&lt;scoreDrl&gt;org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl&lt;/scoreDrl&gt;--&gt;
  &lt;/scoreDirectorFactory&gt;

  &lt;!-- Optimization algorithms configuration --&gt;
  &lt;termination&gt;
    &lt;secondsSpentLimit&gt;30&lt;/secondsSpentLimit&gt;
  &lt;/termination&gt;
&lt;/solver&gt;</programlisting>
      </example>

      <para>This solver configuration consists of three parts:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Domain model configuration</emphasis>: What can Planner change? We need to make
          Planner aware of our domain classes. In this configuration, it will automatically scan all classes in your
          classpath (for an <literal>@PlanningEntity</literal> or <literal>@PlanningSolution</literal>
          annotation):</para>

          <programlisting language="xml">  &lt;scanAnnotatedClasses/&gt;</programlisting>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Score configuration</emphasis>: How should Planner optimize the planning
          variables? What is our goal? Since we have hard and soft constraints, we use a
          <literal>HardSoftScore</literal>. But we also need to tell Planner how to calculate the score, depending on
          our business requirements. Further down, we will look into two alternatives to calculate the score: using an
          easy Java implementation, or using Drools DRL.</para>

          <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDefinitionType&gt;HARD_SOFT&lt;/scoreDefinitionType&gt;
    &lt;easyScoreCalculatorClass&gt;org.optaplanner.examples.cloudbalancing.solver.score.CloudBalancingEasyScoreCalculator&lt;/easyScoreCalculatorClass&gt;
    &lt;!--&lt;scoreDrl&gt;org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl&lt;/scoreDrl&gt;--&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Optimization algorithms configuration</emphasis>: How should Planner optimize it?
          In this case, we use the default <link linkend="optimizationAlgorithms">optimization algorithms</link>
          (because no explicit optimization algorithms are configured) for 30 seconds:</para>

          <programlisting language="xml">  &lt;termination&gt;
    &lt;secondsSpentLimit&gt;30&lt;/secondsSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

          <para>Planner should get a good result in seconds (and even in less than 15 milliseconds with <link
          linkend="realTimePlanning">real-time planning</link>), but the more time it has, the better the result will
          be. Advanced use cases will likely use a different <link linkend="termination">termination criteria</link>
          than a hard time limit.</para>

          <para>The default algorithms will already easily surpass human planners and most in-house implementations. Use
          the <link linkend="benchmarker">Benchmarker</link> to <link linkend="powerTweaking">power tweak</link> to get
          even better results.</para>
        </listitem>
      </itemizedlist>

      <para>Let's examine the domain model classes and the score configuration.</para>
    </section>

    <section xml:id="cloudBalancingDomainModelImplementation">
      <title>Domain Model Implementation</title>

      <section xml:id="cloudBalancingClassComputer">
        <title>The <literal>Computer</literal> Class</title>

        <para>The <literal>Computer</literal> class is a POJO (Plain Old Java Object). Usually, you will have more of
        this kind of classes with input data.</para>

        <example>
          <title>CloudComputer.java</title>

          <programlisting language="java">public class CloudComputer ... {

    private int cpuPower;
    private int memory;
    private int networkBandwidth;
    private int cost;

    ... // getters
}</programlisting>
        </example>
      </section>

      <section xml:id="cloudBalancingClassProcess">
        <title>The <literal>Process</literal> Class</title>

        <para>The <literal>Process</literal> class is particularly important. It is the class that is modified during
        solving. We need to tell Planner that it can change the property <literal>computer</literal>, so we annotate the
        class with <literal>@PlanningEntity</literal> and the getter <literal>getComputer()</literal> with
        <literal>@PlanningVariable</literal>. Of course, the property <literal>computer</literal> needs a setter too, so
        Planner can change it during solving.</para>

        <example>
          <title>CloudProcess.java</title>

          <programlisting language="java">@PlanningEntity(...)
public class CloudProcess ... {

    private int requiredCpuPower;
    private int requiredMemory;
    private int requiredNetworkBandwidth;

    private CloudComputer computer;

    ... // getters

    @PlanningVariable(valueRangeProviderRefs = {"computerRange"})
    public CloudComputer getComputer() {
        return computer;
    }

    public void setComputer(CloudComputer computer) {
        computer = computer;
    }

    // ************************************************************************
    // Complex methods
    // ************************************************************************

    ...

}</programlisting>
        </example>

        <para>Planner needs to know which values it can choose from to assign to the property
        <literal>computer</literal>. Those values are retrieved from the method
        <literal>CloudBalance.getComputerList()</literal> on the planning solution, which returns a list of all
        computers in the current data set. The <literal>@PlanningVariable</literal>'s
        <literal>valueRangeProviderRefs</literal> parameter on <literal>CloudProcess.getComputer()</literal> needs to
        match with the <literal>@ValueRangeProvider</literal>'s <literal>id</literal> on
        CloudBalance.getComputerList().</para>

        <note>
          <para>Instead of getter annotations, it is also possible to use <link linkend="annotationAlternatives">field
          annotations</link>.</para>
        </note>
      </section>

      <section xml:id="cloudBalancingClassCloudBalance">
        <title>The <literal>CloudBalance</literal> Class</title>

        <para>The <literal>CloudBalance</literal> class has a <filename>@PlanningSolution</filename> annotation. It
        holds a list of all computers and processes. It represents both the planning problem and (if it's initialized)
        the planning solution.</para>

        <para>Planner needs to retrieve the collection of processes that it can change, therefore we annotate the getter
        <literal>getProcessList()</literal> with <literal>@PlanningEntityCollectionProperty</literal>.</para>

        <para>The <literal>CloudBalance</literal> class also has a <literal>@PlanningScore</literal> annotated property
        <literal>score</literal>, which is the <literal>Score</literal> of that solution in its current state. Planner
        automatically updates it when it calculates a <literal>Score</literal> for a solution instance and therefore it
        needs a setter.</para>

        <example>
          <title>CloudBalance.java</title>

          <programlisting language="java">@PlanningSolution
public class CloudBalance ... {

    private List&lt;CloudComputer&gt; computerList;

    private List&lt;CloudProcess&gt; processList;

    private HardSoftScore score;

    @ValueRangeProvider(id = "computerRange")
    @ProblemFactCollectionProperty
    public List&lt;CloudComputer&gt; getComputerList() {
        return computerList;
    }

    @PlanningEntityCollectionProperty
    public List&lt;CloudProcess&gt; getProcessList() {
        return processList;
    }

    @PlanningScore
    public HardSoftScore getScore() {
        return score;
    }

    public void setScore(HardSoftScore score) {
        this.score = score;
    }

    ...
}</programlisting>
        </example>

        <para>Especially for score calculation with Drools, the property <literal>computerList</literal> needs to be
        annotated with a <literal>@ProblemFactCollectionProperty</literal> so the computers are known to it.</para>
      </section>
    </section>

    <section xml:id="cloudBalancingScoreConfiguration">
      <title>Score Configuration</title>

      <para>Planner will search for the <literal>Solution</literal> with the highest <literal>Score</literal>. This
      example uses a <literal>HardSoftScore</literal>, which means Planner will look for the solution with no hard
      constraints broken (fulfill hardware requirements) and as little as possible soft constraints broken (minimize
      maintenance cost).</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_start/cloudBalanceScoreCalculation.png"/>
        </imageobject>
      </mediaobject>

      <para>Of course, Planner needs to be told about these domain-specific score constraints. There are several ways to
      implement such a score function:</para>

      <itemizedlist>
        <listitem>
          <para>Easy Java</para>
        </listitem>

        <listitem>
          <para>Incremental Java</para>
        </listitem>

        <listitem>
          <para>Drools</para>
        </listitem>
      </itemizedlist>

      <para>Let's take a look at two different implementations:</para>

      <section xml:id="cloudBalancingEasyJavaScoreConfiguration">
        <title>Easy Java Score Configuration</title>

        <para>One way to define a score function is to implement the interface <literal>EasyScoreCalculator</literal> in
        plain Java.</para>

        <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDefinitionType&gt;HARD_SOFT&lt;/scoreDefinitionType&gt;
    &lt;easyScoreCalculatorClass&gt;org.optaplanner.examples.cloudbalancing.solver.score.CloudBalancingEasyScoreCalculator&lt;/easyScoreCalculatorClass&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

        <para>Just implement the <literal>calculateScore(Solution)</literal> method to return a
        <literal>HardSoftScore</literal> instance.</para>

        <example>
          <title>CloudBalancingEasyScoreCalculator.java</title>

          <programlisting language="java">public class CloudBalancingEasyScoreCalculator implements EasyScoreCalculator&lt;CloudBalance&gt; {

    /**
     * A very simple implementation. The double loop can easily be removed by using Maps as shown in
     * {@link CloudBalancingMapBasedEasyScoreCalculator#calculateScore(CloudBalance)}.
     */
    public HardSoftScore calculateScore(CloudBalance cloudBalance) {
        int hardScore = 0;
        int softScore = 0;
        for (CloudComputer computer : cloudBalance.getComputerList()) {
            int cpuPowerUsage = 0;
            int memoryUsage = 0;
            int networkBandwidthUsage = 0;
            boolean used = false;

            // Calculate usage
            for (CloudProcess process : cloudBalance.getProcessList()) {
                if (computer.equals(process.getComputer())) {
                    cpuPowerUsage += process.getRequiredCpuPower();
                    memoryUsage += process.getRequiredMemory();
                    networkBandwidthUsage += process.getRequiredNetworkBandwidth();
                    used = true;
                }
            }
            
            // Hard constraints
            int cpuPowerAvailable = computer.getCpuPower() - cpuPowerUsage;
            if (cpuPowerAvailable &lt; 0) {
                hardScore += cpuPowerAvailable;
            }
            int memoryAvailable = computer.getMemory() - memoryUsage;
            if (memoryAvailable &lt; 0) {
                hardScore += memoryAvailable;
            }
            int networkBandwidthAvailable = computer.getNetworkBandwidth() - networkBandwidthUsage;
            if (networkBandwidthAvailable &lt; 0) {
                hardScore += networkBandwidthAvailable;
            }
            
            // Soft constraints
            if (used) {
                softScore -= computer.getCost();
            }
        }
        return HardSoftScore.valueOf(hardScore, softScore);
    }

}</programlisting>
        </example>

        <para>Even if we optimize the code above to use <literal>Map</literal>s to iterate through the
        <literal>processList</literal> only once, <emphasis role="bold">it is still slow</emphasis> because it does not
        do <link linkend="incrementalScoreCalculation">incremental score calculation</link>. To fix that, either use
        incremental Java score calculation or Drools score calculation. Let's take a look at the latter.</para>
      </section>

      <section xml:id="cloudBalancingDroolsScoreConfiguration">
        <title>Drools Score Configuration</title>

        <para>To use the Drools rule engine as a score function, simply add a <literal>scoreDrl</literal> resource in
        the classpath:</para>

        <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDefinitionType&gt;HARD_SOFT&lt;/scoreDefinitionType&gt;
    &lt;scoreDrl&gt;org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl&lt;/scoreDrl&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

        <para>First, we want to make sure that all computers have enough CPU, RAM and network bandwidth to support all
        their processes, so we make these hard constraints:</para>

        <example>
          <title>cloudBalancingScoreRules.drl - Hard Constraints</title>

          <programlisting>...

import org.optaplanner.examples.cloudbalancing.domain.CloudBalance;
import org.optaplanner.examples.cloudbalancing.domain.CloudComputer;
import org.optaplanner.examples.cloudbalancing.domain.CloudProcess;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "requiredCpuPowerTotal"
    when
        $computer : CloudComputer($cpuPower : cpuPower)
        $requiredCpuPowerTotal : Number(intValue &gt; $cpuPower) from accumulate(
            CloudProcess(
                computer == $computer,
                $requiredCpuPower : requiredCpuPower),
            sum($requiredCpuPower)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $cpuPower - $requiredCpuPowerTotal.intValue());
end

rule "requiredMemoryTotal"
    ...
end

rule "requiredNetworkBandwidthTotal"
    ...
end</programlisting>
        </example>

        <para>Next, if those constraints are met, we want to minimize the maintenance cost, so we add that as a soft
        constraint:</para>

        <example>
          <title>cloudBalancingScoreRules.drl - Soft Constraints</title>

          <programlisting>// ############################################################################
// Soft constraints
// ############################################################################

rule "computerCost"
    when
        $computer : CloudComputer($cost : cost)
        exists CloudProcess(computer == $computer)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end</programlisting>
        </example>

        <para>If you use the Drools rule engine for score calculation, you can integrate with other Drools technologies,
        such as decision tables (XLS or web based), the KIE Workbench, ...</para>
      </section>
    </section>

    <section xml:id="cloudBalancingBeyondThisTutorial">
      <title>Beyond this Tutorial</title>

      <para>Now that this simple example works, try going further. Enrich the domain model and add extra constraints
      such as these:</para>

      <itemizedlist>
        <listitem>
          <para>Each <literal>Process</literal> belongs to a <literal>Service</literal>. A computer might crash, so
          processes running the same service should be assigned to different computers.</para>
        </listitem>

        <listitem>
          <para>Each <literal>Computer</literal> is located in a <literal>Building</literal>. A building might burn
          down, so processes of the same services should be assigned to computers in different buildings.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</chapter>
