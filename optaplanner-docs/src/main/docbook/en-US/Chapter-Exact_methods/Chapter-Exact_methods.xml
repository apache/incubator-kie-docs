<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="exactMethods" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Exact methods</title>

  <section>
    <title>Overview</title>

    <para>Exact methods will always find the global optimum and recognize it too. That being said, they don't scale (not
    even beyond toy data sets) and are therefore mostly useless.</para>
  </section>

  <section xml:id="bruteForce">
    <title>Brute Force</title>

    <section>
      <title>Algorithm description</title>

      <para>The Brute Force algorithm creates and evaluates every possible solution.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Exact_methods/bruteForceNQueens04.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>Notice that it creates a search tree that explodes as the problem size increases. <emphasis
      role="bold">Brute Force is mostly unusable for a real-world problem due to time limitations</emphasis>,
      as proven by these scalability graphs from the benchmarker:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Exact_methods/bruteForceScalabilityNQueens.png"></imagedata>
        </imageobject>
      </mediaobject>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Exact_methods/bruteForceScalabilityCloudBalance.png"></imagedata>
        </imageobject>
      </mediaobject>
    </section>

    <section>
      <title>Configuration</title>

      <para>Using the brute force algorithm is easy:</para>

      <programlisting language="xml">&lt;solver&gt;
  ...
  &lt;bruteForce&gt;
  &lt;/bruteForce&gt;
&lt;/solver&gt;</programlisting>
    </section>
  </section>

  <section xml:id="depthFirstSearch">
    <title>Depth-first search</title>

    <section>
      <title>Algorithm description</title>

      <para>Depth-First Search is an improvement over Brute Force, as it regularly prunes away an entire subset of
      solutions which cannot have a better solution than the best solution already found at that point. for example: at
      index 15, it can prune away all unvisited solutions with queen A on row 0, because none will be better than the
      solution of index 14 with a score of <literal>-1</literal>.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Exact_methods/backtrackingDepthFirstSearchNQueens04.png"></imagedata>
        </imageobject>
      </mediaobject>

      <para>Notice that it (much like Brute Force) creates a search tree that explodes as the problem size increases.
      <emphasis role="bold">Depth-First Search is mostly unusable for a real-world NP-complete problem due to time
      limitations.</emphasis></para>

      <para>Technically, this Backtracking Depth-First Search with pruning is a form of <emphasis>Branch And
      Bound</emphasis>, although Branch and Bound is often more flexible in its pruning.</para>
    </section>

    <section>
      <title>Configuration</title>

      <para>Depth-first search is not yet implemented. Patches welcome.</para>
    </section>
  </section>
</chapter>
