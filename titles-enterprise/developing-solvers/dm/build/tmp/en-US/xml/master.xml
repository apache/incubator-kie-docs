<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE book [
<!ENTITY % BOOK_ENTITIES SYSTEM "master.ent">
%BOOK_ENTITIES;
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<book version="5.0" xml:lang="en-US" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<?asciidoc-toc ?><?asciidoc-numbered ?>
	<info>
		<title>Developing solvers with Red Hat build of OptaPlanner in Red Hat Decision Manager</title>
		<subtitle></subtitle>
		 <date>2022-06-17</date>
		<productname>Red Hat Decision Manager</productname>
		<productnumber>7.13</productnumber>
		<abstract>
			<para>
				This document describes how to develop solvers with Red Hat build of OptaPlanner in Red Hat Decision Manager to find the optimal solution to planning problems.
			</para>
		</abstract>
		<xi:include href="Common_Content/Legal_Notice.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</info>
	<preface>
		<title>Preface</title>
		<simpara>
			As a developer of business decisions , you can use Red Hat build of OptaPlanner to develop solvers that determine the optimal solution to planning problems. OptaPlanner is a built-in component of Red Hat Decision Manager. You can use solvers as part of your services in Red Hat Decision Manager to optimize limited resources with specific constraints.
		</simpara>
	</preface>
	<preface xml:id="snip-conscious-language_developing-solvers">
		<title>Making open source more inclusive</title>
		<simpara>
			Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. Because of the enormity of this endeavor, these changes will be implemented gradually over several upcoming releases. For more details, see <link xlink:href="https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language"><emphasis>our CTO Chris Wright’s message</emphasis></link>.
		</simpara>
	</preface>
	<part xml:id="assembly-optimizer-migration-8_developing-solvers">
		<title>Upgrading your Red Hat build of OptaPlanner projects to OptaPlanner 8</title>
		<partintro>
			<simpara>
				If you have OptaPlanner projects that you created with the OptaPlanner 7 or earlier pubic API and you want to upgrade your project code to OptaPlanner 8, review the information in this guide. This guide also includes changes to implementation classes which are outside of the pubic API.
			</simpara>
			<simpara>
				The OptaPlanner public API is a subset of the OptaPlanner source code that enables you to interact with OptaPlanner through Java code. So that you can upgrade to higher OptaPlanner versions within the same major release, OptaPlanner follows <link xlink:href="https://semver.org/">semantic versioning</link>. This means that you can upgrade from OptaPlanner 7.44 to OptaPlanner 7.48 for example without breaking your code that uses the OptaPlanner public API. The OptaPlanner public API classes are compatible within the versions of a major OptaPlanner release. However, when Red Hat releases a new major release, disrupting changes are sometimes introduced to the public API.
			</simpara>
			<simpara>
				OptaPlanner 8 is a new major release and some of the changes to the public API are not are not compatible with earlier versions of OptaPlanner. OptaPlanner 8 will be the foundation for the 8.x series for the next few years. The changes to the public API that are not compatible with earlier versions that were required for this release were made for the long term benefit of this project.
			</simpara>
			<table colsep="1" frame="all" rowsep="1">
				<title>Red Hat Decision Manager and Red Hat build of OptaPlanner versions</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="33*"></colspec>
					<colspec colname="col_2" colwidth="67*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Decision Manager</entry>
							<entry align="left" valign="top">OptaPlanner</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								7.7
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								7.33
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								7.8
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								7.39
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								7.9
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								7.44
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								7.10
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								7.48
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								7.11
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								8.5
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<simpara>
				Every upgrade note has a label that indicates how likely it is that your code will be affected by that change. The following table describes each label:
			</simpara>
			<table colsep="1" frame="all" rowsep="1">
				<title>Upgrade impact labels</title>
				<tgroup cols="2">
					<colspec colname="col_1" colwidth="33*"></colspec>
					<colspec colname="col_2" colwidth="67*"></colspec>
					<thead>
						<row>
							<entry align="left" valign="top">Label</entry>
							<entry align="left" valign="top">Impact</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Major
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Likely to affect your code.
							</simpara>
							</entry>
						</row>
						<row>
							<entry align="left" valign="top">
							<simpara>
								Minor
							</simpara>
							</entry>
							<entry align="left" valign="top">
							<simpara>
								Unlikely to affect your code, especially if you followed the examples, unless you have customized the code extensively.
							</simpara>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<simpara>
				Any changes that are not compatible with earlier versions of OptaPlanner are annotated with the <emphasis role="strong">Public API</emphasis> tag.
			</simpara>
		</partintro>
		<chapter xml:id="optaplanner-7-ref_developing-solvers">
			<title>Changes that are not compatible with OptaPlanner 7.x or earlier</title>
			<simpara>
				The changes listed in this section are not compatible with OptaPlanner 7.x or earlier versions of OptaPlanner.
			</simpara>
			<bridgehead remap="_java_11_or_higher_required" renderas="sect2" xml:id="java_11_or_higher_required">Java 11 or higher required</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				If you are using JRE or JDK 8, upgrade to JDK 11 or higher.
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						On Linux, get OpenJDK from your Linux software repository. On Fedora and Red Hat Enterprise Linux, enter the following command:
					</simpara>
					
<programlisting language="bash" linenumbering="unnumbered">sudo dnf install java-11-openjdk-devel</programlisting>
				</listitem>
				<listitem>
					<simpara>
						On Windows and macOS, download OpenJDK from the <link xlink:href="https://adoptopenjdk.net">AdoptOpenJDK</link> website.
					</simpara>
				</listitem>
			</itemizedlist>
			<bridgehead remap="_literal_solverfactory_literal_and_literal_plannerbenchmarkfactory_literal_no_longer_support_kie_containers" renderas="sect2" xml:id="literal_solverfactory_literal_and_literal_plannerbenchmarkfactory_literal_no_longer_support_kie_containers"><literal>SolverFactory</literal> and <literal>PlannerBenchmarkFactory</literal> no longer support KIE containers</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				Because OptaPlanner now aligns with Kogito, the KIE container concept no longer applies. Therefore, <literal>SolverFactory</literal> no longer allows you to create <literal>Solver</literal> instances from KIE containers. This also applies to <literal>PlannerBenchmarkFactory</literal> and benchmarks.
			</simpara>
			<bridgehead remap="_osgi_metadata_removed" renderas="sect2" xml:id="osgi_metadata_removed">OSGi metadata removed</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				Because of the limited usage of OSGi and the maintenance burden it brings, the OptaPlanner JAR files in the OptaPlanner 8.x series no longer include OSGi metadata in the <literal>META-INF/MANIFEST.MF</literal> file.
			</simpara>
			<bridgehead remap="_refrain_from_using_java_serialization" renderas="sect2" xml:id="refrain_from_using_java_serialization">Refrain from using Java serialization</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				In OptaPlanner 8, most uses of the <literal>Serializable</literal> marker interface were removed from the public API. Consider serializing with JSON or another format.
			</simpara>
			<bridgehead remap="_literal_solverfactory_getscoredirectorfactory_literal_replaced_with_literal_scoremanager_literal" renderas="sect2" xml:id="literal_solverfactory_getscoredirectorfactory_literal_replaced_with_literal_scoremanager_literal"><literal>SolverFactory.getScoreDirectorFactory()</literal> replaced with <literal>ScoreManager</literal></bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				In version 7 of OptaPlanner, using <literal>ScoreDirectorFactory</literal> was necessary in order to explain the score. In version 8 of OptaPlanner, new functionality was added to the <literal>ScoreManager</literal> and as a result there is no longer any reason to create new instances of <literal>ScoreDirector</literal>.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">ScoreDirectorFactory&lt;CloudBalance&gt; scoreDirectorFactory = solverFactory.getScoreDirectorFactory();
try (ScoreDirector&lt;CloudBalance&gt; scoreDirector = scoreDirectorFactory.buildScoreDirector()) {
    scoreDirector.setWorkingSolution(solution);
    Score score = scoreDirector.calculateScore();
}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">ScoreManager&lt;CloudBalance&gt; scoreManager = ScoreManager.create(solverFactory);
Score score = scoreManager.updateScore(solution);</programlisting>
			<simpara>
				Methods that allowed you to retrieve an instance of <literal>ScoreDirector</literal> and <literal>ScoreDirectorFactory</literal> have been removed from the public API without replacement. A reduced version of the <literal>ScoreDirector</literal> interface was promoted to the public API to promote the <literal>ProblemFactChange</literal> interface to the public API.
			</simpara>
			<bridgehead remap="_literal_solverfactory_literal_literal_getsolverconfig_literal_removed" renderas="sect2" xml:id="literal_solverfactory_literal_literal_getsolverconfig_literal_removed"><literal>SolverFactory</literal>: <literal>getSolverConfig()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>SolverFactory.getSolverConfig()</literal> method has been deprecated and replaced with the <literal>SolverFactory.create(SolverConfig)</literal> method. A <literal>SolverConfig</literal> instance is now instantiated before a <literal>SolverFactory</literal> instance is instantiated, which is more natural. The previous order has been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverFactory&lt;MySolution&gt; solverFactory = SolverFactory.createFromXmlResource(".../mySolverConfig.xml");
SolverConfig solverConfig = solverFactory.getSolverConfig();
...
Solver&lt;MySolution&gt; solver = solverFactory.buildSolver();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverConfig solverConfig = SolverConfig.createFromXmlResource(".../mySolverConfig.xml");
...
SolverFactory&lt;MySolution&gt; solverFactory = SolverFactory.create(solverConfig);
Solver&lt;MySolution&gt; solver = solverFactory.buildSolver();</programlisting>
			<simpara>
				If you were also passing a <literal>ClassLoader</literal>, pass it to both <literal>SolverConfig.createFromXmlResource()</literal> and <literal>SolverFactory.create()</literal>.
			</simpara>
			<bridgehead remap="_literal_solverconfig_literal_literal_buildsolver_literal_removed" renderas="sect2" xml:id="literal_solverconfig_literal_literal_buildsolver_literal_removed"><literal>SolverConfig</literal>: <literal>buildSolver()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>SolverConfig.buildSolver()</literal> method is an inner method that does not belong in the public API. Use the <literal>SolverFactory.buildSolver()</literal> method instead.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverConfig solverConfig = SolverConfig.createFromXmlResource(".../mySolverConfig.xml");
...
Solver&lt;MySolution&gt; solver = solverConfig.buildSolver();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverConfig solverConfig = SolverConfig.createFromXmlResource(".../mySolverConfig.xml");
...
SolverFactory&lt;MySolution&gt; solverFactory = SolverFactory.create(solverConfig);
Solver&lt;MySolution&gt; solver = solverFactory.buildSolver();</programlisting>
			<bridgehead remap="_literal_plannerbenchmarkconfig_literal_literal_buildplannerbenchmark_literal_removed" renderas="sect2" xml:id="literal_plannerbenchmarkconfig_literal_literal_buildplannerbenchmark_literal_removed"><literal>PlannerBenchmarkConfig</literal>: <literal>buildPlannerBenchmark()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>PlannerBenchmarkConfig.buildPlannerBenchmark()</literal> method is an inner method that does not belong in the public API. Use the <literal>PlannerBenchmarkFactory.buildPlannerBenchmark()</literal> method instead.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">PlannerBenchmarkConfig benchmarkConfig = PlannerBenchmarkConfig.createFromXmlResource(
        ".../cloudBalancingBenchmarkConfig.xml");
...
PlannerBenchmark benchmark = benchmarkFactory.buildPlannerBenchmark();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">PlannerBenchmarkConfig benchmarkConfig = PlannerBenchmarkConfig.createFromXmlResource(
        ".../cloudBalancingBenchmarkConfig.xml");
...
PlannerBenchmarkFactory benchmarkFactory = PlannerBenchmarkFactory.create(benchmarkConfig);
PlannerBenchmark benchmark = benchmarkFactory.buildPlannerBenchmark();</programlisting>
			<bridgehead remap="_literal_solverfactory_literal_literal_clonesolverfactory_literal_removed" renderas="sect2" xml:id="literal_solverfactory_literal_literal_clonesolverfactory_literal_removed"><literal>SolverFactory</literal>: <literal>cloneSolverFactory()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>SolverFactory.cloneSolverFactory()</literal> method has been deprecated and replaced with the new <literal>SolverConfig(SolverConfig)</literal> copy constructors and the <literal>SolverFactory.cloneSolverFactory()</literal> method has been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">private SolverFactory&lt;MySolution&gt; base;

public void userRequest(..., long userInput) {
    SolverFactory&lt;MySolution&gt; solverFactory = base.cloneSolverFactory();
    solverFactory.getSolverConfig()
            .getTerminationConfig()
            .setMinutesSpentLimit(userInput);
    Solver&lt;MySolution&gt; solver = solverFactory.buildSolver();
    ...
}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">private SolverConfig base;

public void userRequest(..., long userInput) {
    SolverConfig solverConfig = new SolverConfig(base); // Copy it
    solverConfig.getTerminationConfig()
            .setMinutesSpentLimit(userInput);
    SolverFactory&lt;MySolution&gt; solverFactory = SolverFactory.create(solverConfig);
    Solver&lt;MySolution&gt; solver = solverFactory.buildSolver();
    ...
}</programlisting>
			<bridgehead remap="_literal_solverfactory_literal_literal_createempty_literal_removed" renderas="sect2" xml:id="literal_solverfactory_literal_literal_createempty_literal_removed"><literal>SolverFactory</literal>: <literal>createEmpty()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>SolverFactory.createEmpty()</literal> method has been deprecated and replaced with the <literal>new SolverConfig()</literal> method. The <literal>SolverFactory.createEmpty()</literal> method has been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverFactory&lt;MySolution&gt; solverFactory = SolverFactory.createEmpty();
SolverConfig solverConfig = solverFactory.getSolverConfig()
...
Solver&lt;MySolution&gt; solver = solverFactory.buildSolver();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverConfig solverConfig = new SolverConfig();
...
SolverFactory&lt;MySolution&gt; solverFactory = SolverFactory.create(solverConfig);
Solver&lt;MySolution&gt; solver = solverFactory.buildSolver();</programlisting>
			<bridgehead remap="_xml_solver_root_element_now_belongs_to_the_http_www_optaplanner_org_xsd_solver_namespace" renderas="sect2" xml:id="xml_solver_root_element_now_belongs_to_the_http_www_optaplanner_org_xsd_solver_namespace">XML &lt;solver/&gt; root element now belongs to the http://www.optaplanner.org/xsd/solver namespace</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				OptaPlanner now provides an XML schema definition for the solver configuration. Although OptaPlanner retains compatibility with previous versions of the existing XML configuration, migrating to the XSD is strongly recommended because OptaPlanner might support only valid configuration XML in the future.
			</simpara>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;solver&gt;
  ...
&lt;/solver&gt;</programlisting>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd"&gt;
  ...
&lt;/solver&gt;</programlisting>
			<simpara>
				Using the XSD might require reordering some of the XML elements of the configuration. Use code completion in the IDE to migrate to a valid XML.
			</simpara>
			<bridgehead remap="_property_literal_subpillarenabled_literal_in_move_selector_configuration_has_been_removed" renderas="sect2" xml:id="property_literal_subpillarenabled_literal_in_move_selector_configuration_has_been_removed">Property <literal>subPillarEnabled</literal> in move selector configuration has been removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>subPillarEnabled</literal> property in <literal>PillarSwapMoveSelector</literal> and <literal>PillarChangeMoveSelector</literal> has been deprecated and replaced with a new property, <literal>subPillarType</literal>. The <literal>subPillarEnabled</literal> property has been removed.
			</simpara>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> and <literal>*BenchmarkConfig.xml</literal> files in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">      &lt;pillar...MoveSelector&gt;
        ...
        &lt;pillarSelector&gt;
          &lt;subPillarEnabled&gt;false&lt;/subPillarEnabled&gt;
          ...
        &lt;/pillarSelector&gt;
        ...
      &lt;/pillar...MoveSelector&gt;</programlisting>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> and <literal>*BenchmarkConfig.xml</literal> files in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">      &lt;pillar...MoveSelector&gt;
        &lt;subPillarType&gt;NONE&lt;/subPillarType&gt;
        &lt;pillarSelector&gt;
          ...
        &lt;/pillarSelector&gt;
        ...
      &lt;/pillar...MoveSelector&gt;</programlisting>
			<bridgehead remap="_literal_solver_literal_literal_getscoredirectorfactory_literal_removed" renderas="sect2" xml:id="literal_solver_literal_literal_getscoredirectorfactory_literal_removed"><literal>Solver</literal>: <literal>getScoreDirectorFactory()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>getScoreDirectorFactory()</literal> method has been deprecated and has now been removed from both <literal>Solver</literal> and <literal>SolverFactory</literal> classes.
			</simpara>
			<simpara>
				You no longer need to create a <literal>Solver</literal> instance just to calculate or explain a score in the UI. Use the <literal>ScoreManager</literal> API instead.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverFactory&lt;VehicleRoutingSolution&gt; solverFactory = SolverFactory.createFromXmlResource(...);
Solver&lt;VehicleRoutingSolution&gt; solver = solverFactory.buildSolver();
uiScoreDirectorFactory = solver.getScoreDirectorFactory();
...</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverFactory&lt;VehicleRoutingSolution&gt; solverFactory = SolverFactory.createFromXmlResource(...);
ScoreManager&lt;VehicleRoutingSolution&gt; scoreManager = ScoreManager.create(solverFactory);
...</programlisting>
			<simpara>
				<literal>ScoreDirectorFactory</literal> should not be used anymore because it has always been outside the public API and all of its functionality is exposed in various parts of the public API.
			</simpara>
			<bridgehead remap="_literal_solver_explainbestscore_literal_has_been_removed" renderas="sect2" xml:id="literal_solver_explainbestscore_literal_has_been_removed"><literal>Solver.explainBestScore()</literal> has been removed</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>explainBestScore()</literal> method on the <literal>Solver</literal> interface was deprecated in 7.x and has now been removed. You can obtain the same information through the new <literal>ScoreManager</literal> API.
			</simpara>
			<simpara>
				Red Hat recommends that you do not parse the results of this method call in any way.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">solver = ...;
scoreExplanation = solver.explainBestScore();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">MySolution solution = ...;
ScoreManager&lt;MySolution&gt; scoreManager = ...;
scoreExplanation = scoreManager.explainScore(solution);</programlisting>
			<bridgehead remap="_the_solver_interface_methods_literal_getbestsolution_literal_literal_getbestscore_literal_and_literal_gettimemillisspent_literal_have_been_removed" renderas="sect2" xml:id="the_solver_interface_methods_literal_getbestsolution_literal_literal_getbestscore_literal_and_literal_gettimemillisspent_literal_have_been_removed">The Solver interface methods <literal>getBestSolution()</literal>, <literal>getBestScore()</literal>, and <literal>getTimeMillisSpent()</literal> have been removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				Several methods on the <literal>Solver</literal> interface were deprecated in 7.x and have been removed. You can obtain the same information by registering an <literal>EventListener</literal> through the <literal>Solver.addEventListener(…​)</literal>.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">solver = ...;
solution = solver.getBestSolution();
score = solver.getBestScore();
timeMillisSpent = solver.getTimeMillisSpent();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">solver = ...;
solver.addEventListener(event -&gt; {
    solution = event.getNewBestSolution();
    score = event.getNewBestScore();
    timeMillisSpent = event.getTimeMillisSpent();
});</programlisting>
			<bridgehead remap="_annotation_scanning_has_been_removed" renderas="sect2" xml:id="annotation_scanning_has_been_removed">Annotation scanning has been removed</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>&lt;scanAnnotatedClasses/&gt;</literal> directive in the solver configuration was deprecated in 7.x and is now removed.
			</simpara>
			<simpara>
				An example from the <literal>*.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;solver&gt;
    ...
    &lt;scanAnnotatedClasses/&gt;
    ...
&lt;/solver&gt;</programlisting>
			<simpara>
				An example from the <literal>*.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;solver&gt;
    ...
    &lt;solutionClass&gt;...&lt;/solutionClass&gt;
    &lt;entityClass&gt;...&lt;/entityClass&gt;
    ...
&lt;/solver&gt;</programlisting>
			<bridgehead remap="_new_package_for_literal_planningfactproperty_literal_and_literal_planningfactcollectionproperty_literal" renderas="sect2" xml:id="new_package_for_literal_planningfactproperty_literal_and_literal_planningfactcollectionproperty_literal">New package for <literal>@PlanningFactProperty</literal> and <literal>@PlanningFactCollectionProperty</literal></bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>@PlanningFactProperty</literal> and <literal>@PlanningFactCollectionProperty</literal> annotations now share the same package with other similar annotations, such as <literal>@PlanningSolution</literal>. The old annotations were deprecated in 7.x and removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">import org.optaplanner.core.api.domain.solution.drools.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.solution.drools.ProblemFactProperty;</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.solution.ProblemFactProperty;</programlisting>
			<bridgehead remap="_literal_filterclasslist_literal_replaced_with_a_single_filter_class" renderas="sect2" xml:id="literal_filterclasslist_literal_replaced_with_a_single_filter_class"><literal>filterClassList</literal> replaced with a single filter class</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The configuration of <literal>EntitySelector</literal>, <literal>ValueSelector</literal>, and <literal>MoveSelector</literal> now has a single filter class in both the configuration API and the solver configuration XML.
			</simpara>
			<simpara>
				In practice, you do not need multiple selection filter classes often, and you can replace them with a single selection filter class that implements the logic of all of them. Passing a single selection class now requires less boilerplate code.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">ValueSelectorConfig valueSelectorConfig = new ValueSelectorConfig();
valueSelectorConfig.setFilterClassList(Collections.singletonList(MySelectionFilterClass.class));</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">ValueSelectorConfig valueSelectorConfig = new ValueSelectorConfig();
valueSelectorConfig.setFilterClass(MySelectionFilterClass.class);</programlisting>
			<formalpara>
				<title>Replacing multiple selection filter classes with a single selection filter class</title>
				<para>
					An example from the <literal>*.xml</literal> file in OptaPlanner 7:
				</para>
			</formalpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;swapMoveSelector&gt;
  &lt;entitySelector&gt;
    &lt;filterClass&gt;com.example.FilterA&lt;/filterClass&gt;
    &lt;filterClass&gt;com.example.FilterB&lt;/filterClass&gt;
  &lt;/entitySelector&gt;
&lt;/swapMoveSelector&gt;</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">package com.example;
...
public class FilterA implements SelectionFilter&lt;MySolution, MyPlanningEntity&gt; {

    @Override
    public boolean accept(ScoreDirector&lt;MySolution&gt; scoreDirector, MyPlanningEntity selection) {
        return selection.getValue() &lt; 500;
    }
}</programlisting>
			
<programlisting language="java" linenumbering="unnumbered">package com.example;
...
public class FilterB implements SelectionFilter&lt;MySolution, MyPlanningEntity&gt; {

    @Override
    public boolean accept(ScoreDirector&lt;MySolution&gt; scoreDirector, MyPlanningEntity selection) {
        return selection.getOrder() == Order.ASC;
    }
}</programlisting>
			<simpara>
				An example from the <literal>*.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;swapMoveSelector&gt;
  &lt;entitySelector&gt;
    &lt;filterClass&gt;com.example.SingleEntityFilter&lt;/filterClass&gt;
  &lt;/entitySelector&gt;
&lt;/swapMoveSelector&gt;</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">package com.example;
...
public class SingleEntityFilter implements SelectionFilter&lt;MySolution, MyPlanningEntity&gt; {

    @Override
    public boolean accept(ScoreDirector&lt;MySolution&gt; scoreDirector, MyPlanningEntity selection) {
        return selection.getValue() &lt; 500 &amp;&amp; selection.getOrder() == Order.ASC;
    }
}</programlisting>
			<bridgehead remap="_literal_acceptorconfig_literal_renamed_to_literal_localsearchacceptorconfig_literal" renderas="sect2" xml:id="literal_acceptorconfig_literal_renamed_to_literal_localsearchacceptorconfig_literal"><literal>AcceptorConfig</literal> renamed to <literal>LocalSearchAcceptorConfig</literal></bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>
			</simpara>
			<simpara>
				This only impacts the configuration API. The solver configuration XML file remains intact.
			</simpara>
			<simpara>
				Naming consistency with other local-search-specific configuration classes has been implemented.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">LocalSearchPhaseConfig localSearchPhaseConfig = new LocalSearchPhaseConfig()
        .withAcceptorConfig(new AcceptorConfig().withEntityTabuSize(5));</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">LocalSearchPhaseConfig localSearchPhaseConfig = new LocalSearchPhaseConfig()
        .withAcceptorConfig(new LocalSearchAcceptorConfig().withEntityTabuSize(5));</programlisting>
			<bridgehead remap="_custom_properties_xml_configuration_format_changes" renderas="sect2" xml:id="custom_properties_xml_configuration_format_changes">Custom properties XML configuration format changes</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				This issue only impacts the solver configuration XML, specifically <literal>&lt;scoreDirectorFactory/&gt;</literal>, <literal>&lt;moveIteratorFactory/&gt;</literal>, <literal>&lt;moveListFactory/&gt;</literal>, <literal>&lt;partitionedSearch/&gt;</literal> and <literal>&lt;customPhase/&gt;</literal>.
			</simpara>
			<simpara>
				This change was made to enforce the structure of the configuration XML in build time.
			</simpara>
			<simpara>
				An example from the <literal>*.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;partitionedSearch&gt;
  &lt;solutionPartitionerClass&gt;com.example.MySolutionPartitioner&lt;/solutionPartitionerClass&gt;
  &lt;solutionPartitionerCustomProperties&gt;
    &lt;partCount&gt;4&lt;/partCount&gt; &lt;!-- a custom property --&gt;
    &lt;minimumProcessListSize&gt;300&lt;/minimumProcessListSize&gt; &lt;!-- a custom property --&gt;
  &lt;/solutionPartitionerCustomProperties&gt;
&lt;/partitionedSearch&gt;</programlisting>
			<simpara>
				An example from the <literal>*.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;partitionedSearch&gt;
  &lt;solutionPartitionerClass&gt;com.example.MySolutionPartitioner&lt;/solutionPartitionerClass&gt;
  &lt;solutionPartitionerCustomProperties&gt;
    &lt;property name="partCount" value="4"/&gt; &lt;!-- a custom property --&gt;
    &lt;property name="minimumProcessListSize" value="300"/&gt; &lt;!-- a custom property --&gt;
  &lt;/solutionPartitionerCustomProperties&gt;
&lt;/partitionedSearch&gt;</programlisting>
			<bridgehead remap="_literal_variablenameinclude_literal_elements_are_now_wrapped_by_the_literal_variablenameincludes_literal_element" renderas="sect2" xml:id="literal_variablenameinclude_literal_elements_are_now_wrapped_by_the_literal_variablenameincludes_literal_element"><literal>&lt;variableNameInclude/&gt;</literal> elements are now wrapped by the <literal>&lt;variableNameIncludes/&gt;</literal> element</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				This update only impacts the solver configuration XML, specifically the <literal>&lt;swapMoveSelector/&gt;</literal> and <literal>&lt;pillarSwapMoveSelector/&gt;</literal> elements.
			</simpara>
			<simpara>
				This change was made to enforce the structure of the configuration XML in build time.
			</simpara>
			<simpara>
				An example from the <literal>*.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;swapMoveSelector&gt;
  &lt;variableNameInclude&gt;variableA&lt;/variableNameInclude&gt;
  &lt;variableNameInclude&gt;variableB&lt;/variableNameInclude&gt;
&lt;/swapMoveSelector&gt;</programlisting>
			<simpara>
				An example from the <literal>*.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;swapMoveSelector&gt;
  &lt;variableNameIncludes&gt;
    &lt;variableNameInclude&gt;variableA&lt;/variableNameInclude&gt;
    &lt;variableNameInclude&gt;variableB&lt;/variableNameInclude&gt;
  &lt;/variableNameIncludes&gt;
&lt;/swapMoveSelector&gt;</programlisting>
			<bridgehead remap="_literal_solution_literal_interface_removed" renderas="sect2" xml:id="literal_solution_literal_interface_removed"><literal>Solution</literal> interface removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>Solution</literal> interface was deprecated and removed. The <literal>AbstractSolution</literal> interface, which is only used by Business Central, has also been removed.
			</simpara>
			<simpara>
				Remove the <literal>Solution</literal> interface, annotate the <literal>getScore()</literal> method with <literal>@PlanningScore</literal>, and replace the <literal>getProblemFacts()</literal> method with a <literal>@ProblemFactCollectionProperty</literal> annotation directly on every problem fact getter (or field).
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningSolution
public class CloudBalance implements Solution&lt;HardSoftScore&gt; {

    private List&lt;CloudComputer&gt; computerList;
    ...

    private HardSoftScore score;

    @ValueRangeProvider(id = "computerRange")
    public List&lt;CloudComputer&gt; getComputerList() {...}

    public HardSoftScore getScore() {...}
    public void setScore(HardSoftScore score) {...}

    public Collection&lt;? extends Object&gt; getProblemFacts() {
        List&lt;Object&gt; facts = new ArrayList&lt;Object&gt;();
        facts.addAll(computerList);
        ...
        return facts;
    }

}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningSolution
public class CloudBalance {

    private List&lt;CloudComputer&gt; computerList;
    ...

    private HardSoftScore score;

    @ValueRangeProvider(id = "computerRange")
    @ProblemFactCollectionProperty
    public List&lt;CloudComputer&gt; getComputerList() {...}

    @PlanningScore
    public HardSoftScore getScore() {...}
    public void setScore(HardSoftScore score) {...}

}</programlisting>
			<simpara>
				For a single problem fact that is not wrapped in a <literal>Collection</literal>, use the <literal>@ProblemFactProperty</literal> annotation, as shown in the following example, with field annotations this time:
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningSolution
public class CloudBalance implements Solution&lt;HardSoftScore&gt; {

    private CloudParametrization parametrization;
    private List&lt;CloudBuilding&gt; buildingList;
    @ValueRangeProvider(id = "computerRange")
    private List&lt;CloudComputer&gt; computerList;
    ...

    public Collection&lt;? extends Object&gt; getProblemFacts() {
        List&lt;Object&gt; facts = new ArrayList&lt;Object&gt;();
        facts.add(parametrization); // not a Collection
        facts.addAll(buildingList);
        facts.addAll(computerList);
        ...
        return facts;
    }

}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningSolution
public class CloudBalance {

    @ProblemFactProperty
    private CloudParametrization parametrization;
    @ProblemFactCollectionProperty
    private List&lt;CloudBuilding&gt; buildingList;
    @ValueRangeProvider(id = "computerRange")
    @ProblemFactCollectionProperty
    private List&lt;CloudComputer&gt; computerList;
    ...

}</programlisting>
			<simpara>
				Do not add the <literal>@ProblemFactCollectionProperty</literal> annotation on getters (or fields) that have a <literal>@PlanningEntityCollectionProperty</literal> annotation.
			</simpara>
			<bridgehead remap="_literal_bestsolutionchangedevent_literal_literal_isnewbestsolutioninitialized_literal_removed" renderas="sect2" xml:id="literal_bestsolutionchangedevent_literal_literal_isnewbestsolutioninitialized_literal_removed"><literal>BestSolutionChangedEvent</literal>: <literal>isNewBestSolutionInitialized()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>BestSolutionChangedEvent.isNewBestSolutionInitialized()</literal> method has been deprecated and replaced with the <literal>BestSolutionChangedEvent.getNewBestSolution().getScore().isSolutionInitialized()</literal> method. The <literal>BestSolutionChangedEvent.isNewBestSolutionInitialized()</literal> method has been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    public void bestSolutionChanged(BestSolutionChangedEvent&lt;CloudBalance&gt; event) {
        if (event.isEveryProblemFactChangeProcessed()
                &amp;&amp; event.isNewBestSolutionInitialized()) {
            ...
        }
    }</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    public void bestSolutionChanged(BestSolutionChangedEvent&lt;CloudBalance&gt; event) {
        if (event.isEveryProblemFactChangeProcessed()
                &amp;&amp; event.getNewBestSolution().getScore().isSolutionInitialized()) {
            ...
        }
    }</programlisting>
			<simpara>
				If you check <literal>isFeasible()</literal>, it checks if the solution is initialized.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    public void bestSolutionChanged(BestSolutionChangedEvent&lt;CloudBalance&gt; event) {
        if (event.isEveryProblemFactChangeProcessed()
                // isFeasible() checks isSolutionInitialized() too
                &amp;&amp; event.getNewBestSolution().getScore().isFeasible()) {
            ...
        }
    }</programlisting>
			<bridgehead remap="_literal_valueselector_literal_literal_variablename_literal_is_now_an_attribute" renderas="sect2" xml:id="literal_valueselector_literal_literal_variablename_literal_is_now_an_attribute"><literal>&lt;valueSelector&gt;</literal>: <literal>variableName</literal> is now an attribute</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				When power-tweaking move selectors, such as <literal>&lt;changeMoveSelector&gt;</literal>, in a use case with multiple planning variables, the <literal>&lt;variableName&gt;</literal> XML element has been replaced with a <literal>variableName="…​"</literal> XML attribute. This change reduces the solver configuration verbosity. After being deprecated for the entire 7.x series, the old way has now been removed.
			</simpara>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> and <literal>*BenchmarkConfig.xml</literal> files in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  &lt;valueSelector&gt;
    &lt;variableName&gt;room&lt;/variableName&gt;
  &lt;/valueSelector&gt;</programlisting>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> and <literal>*BenchmarkConfig.xml</literal> files in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  &lt;valueSelector variableName="room"/&gt;</programlisting>
			<bridgehead remap="_partitioned_search_literal_threadfactoryclass_literal_removed" renderas="sect2" xml:id="partitioned_search_literal_threadfactoryclass_literal_removed">Partitioned Search: <literal>threadFactoryClass</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				Because <literal>&lt;solver&gt;</literal> has supported a <literal>&lt;threadFactoryClass&gt;</literal> element for some time, the <literal>&lt;threadFactoryClass&gt;</literal> element under <literal>&lt;partitionedSearch&gt;</literal> has been removed.
			</simpara>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> and <literal>*BenchmarkConfig.xml</literal> files in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  &lt;solver&gt;
    ...
    &lt;partitionedSearch&gt;
      &lt;threadFactoryClass&gt;...MyAppServerThreadFactory&lt;/threadFactoryClass&gt;
      ...
    &lt;/partitionedSearch&gt;
  &lt;/solver&gt;</programlisting>
			<simpara>
				An example from the <literal>*SolverConfig.xml</literal> and <literal>*BenchmarkConfig.xml</literal> files in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  &lt;solver&gt;
    &lt;threadFactoryClass&gt;...MyAppServerThreadFactory&lt;/threadFactoryClass&gt;
    ...
    &lt;partitionedSearch&gt;
      ...
    &lt;/partitionedSearch&gt;
  &lt;/solver&gt;</programlisting>
			<bridgehead remap="_literal_simpledoublescore_literal_and_literal_hardsoftdoublescore_literal_removed" renderas="sect2" xml:id="literal_simpledoublescore_literal_and_literal_hardsoftdoublescore_literal_removed"><literal>SimpleDoubleScore</literal> and <literal>HardSoftDoubleScore</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The use of double-based score types is not recommended because they can cause score corruption. They have been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningSolution
public class MyPlanningSolution {

    private SimpleDoubleScore score;

    ...

}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningSolution
public class MyPlanningSolution {

    private SimpleLongScore score;

    ...

}</programlisting>
			<bridgehead remap="_literal_score_toinitializedscore_literal_removed" renderas="sect2" xml:id="literal_score_toinitializedscore_literal_removed"><literal>Score.toInitializedScore()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>Score.toInitializedScore()</literal> method was deprecated and replaced with the <literal>Score.withInitScore(int)</literal> method in 7.x and is now removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">score = score.toInitializedScore();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">score = score.withInitScore(0);</programlisting>
			<bridgehead remap="_various_justification_literal_comparators_literal_removed" renderas="sect2" xml:id="various_justification_literal_comparators_literal_removed">Various justification <literal>Comparators</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The following <literal>Comparator</literal> implementations were deprecated in 7.x and removed:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>org.optaplanner.core.api.score.comparator.NaturalScoreComparator</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>org.optaplanner.core.api.score.constraint.ConstraintMatchScoreComparator</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>org.optaplanner.core.api.score.constraint.ConstraintMatchTotalScoreComparator</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>org.optaplanner.core.api.score.constraint.IndictmentScoreComparator</literal>
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">NaturalScoreComparator comparator = new NaturalScoreComparator();
ConstraintMatchScoreComparator comparator2 = new ConstraintMatchScoreComparator();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">Comparator&lt;Score&gt; comparator = Comparable::compareTo;
Comparator&lt;ConstraintMatch&gt; comparator2 = Comparator.comparing(ConstraintMatch::getScore);</programlisting>
			<bridgehead remap="_literal_feasibilityscore_literal_removed" renderas="sect2" xml:id="literal_feasibilityscore_literal_removed"><literal>FeasibilityScore</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>FeasibilityScore</literal> interface was deprecated in 7.x and its only method <literal>isFeasible()</literal> moved to the <literal>Score</literal> supertype. The interface has now been removed.
			</simpara>
			<simpara>
				You should refer to <literal>Score</literal>s by their ultimate type, for example <literal>HardSoftScore</literal> instead of to <literal>Score</literal>.
			</simpara>
			<bridgehead remap="_literal_planningentity_movableentityselectionfilter_literal_removed" renderas="sect2" xml:id="literal_planningentity_movableentityselectionfilter_literal_removed"><literal>@PlanningEntity.movableEntitySelectionFilter</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>movableEntitySelectionFilter</literal> field on the <literal>@PlanningEntity</literal> annotation was deprecated in 7.x and a new field <literal>pinningFilter</literal> has been introduced with a name that shows the relation to the <literal>@PlanningPin</literal> annotation. This filter implements a new <literal>PinningFilter</literal> interface, returning true if the entity is pinned, and false if movable. The logic of this new filter is therefore inverted as compared to the old filter.
			</simpara>
			<simpara>
				You should update your <literal>@PlanningEntity</literal> annotations by supplying the new filter instead of the old filter. The old filter has now been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningEntity(movableEntitySelectionFilter = MyMovableEntitySelectionFilter.class)</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">@PlanningEntity(pinningFilter = MyPinningFilter.class)</programlisting>
			<bridgehead remap="_literal_planningvariable_reinitializevariableentityfilter_literal_removed" renderas="sect2" xml:id="literal_planningvariable_reinitializevariableentityfilter_literal_removed"><literal>@PlanningVariable.reinitializeVariableEntityFilter</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>reinitializeVariableEntityFilter</literal> field on the <literal>@PlanningVariable</literal> annotation was deprecated in 7.x and now removed.
			</simpara>
			<bridgehead remap="_literal_scoreholder_literal_classes_turned_into_interfaces" renderas="sect2" xml:id="literal_scoreholder_literal_classes_turned_into_interfaces"><literal>*ScoreHolder</literal> classes turned into interfaces</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				In OptaPlanner 7, <literal>ScoreHolder</literal> classes, used exclusively for Drools score calculation, exposed a number of public methods which, if used, allowed the user to unintentionally corrupt or otherwise negatively affect their scores.
			</simpara>
			<simpara>
				In OptaPlanner 8, these methods have been removed and the classes have been turned into interfaces. Most users do not use the removed and potentially harmful methods.
			</simpara>
			<simpara>
				However, if you do use these methods, you will find suitable replacements in the public API in areas of score explanation and constraint configuration.
			</simpara>
			<bridgehead remap="_literal_valuerangefactory_literal_class_now_final" renderas="sect2" xml:id="literal_valuerangefactory_literal_class_now_final"><literal>ValueRangeFactory</literal> class now final</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>
			</simpara>
			<simpara>
				<literal>ValueRangeFactory</literal> class is a factory class that has only static methods. There is no need for you to extend this class, and it has therefore been made <literal>final</literal>.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">class MyValueRangeFactory extends ValueRangeFactory {
    ...
}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">class MyValueRangeFactory {
    ...
}</programlisting>
			<bridgehead remap="_literal_constraintmatchtotal_literal_and_literal_indictment_literal_are_now_interfaces" renderas="sect2" xml:id="literal_constraintmatchtotal_literal_and_literal_indictment_literal_are_now_interfaces"><literal>ConstraintMatchTotal</literal> and <literal>Indictment</literal> are now interfaces</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				<literal>ConstraintMatchTotal</literal> and <literal>Indictment</literal> classes have been converted into interfaces. As a result, their implementations were moved out of the public API, together with methods that allowed them to mutate their state. These methods were never intended for the public API, and therefore there is no replacement for them.
			</simpara>
			<simpara>
				You might still need the instances themselves if you choose to implement <literal>ConstraintMatchAwareIncrementalScoreCalculator</literal>:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">ConstraintMatchTotal maximumCapacityMatchTotal = new ConstraintMatchTotal(...);</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">ConstraintMatchTotal maximumCapacityMatchTotal = new DefaultConstraintMatchTotal(...);</programlisting>
			<bridgehead remap="_literal_scoremanager_literal_generic_type_literal_score_literal_added" renderas="sect2" xml:id="literal_scoremanager_literal_generic_type_literal_score_literal_added"><literal>ScoreManager</literal>: generic type <literal>Score</literal> added</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>ScoreManager</literal> and <literal>ScoreExplanation</literal> APIs now have the generic type <literal>Score</literal> to avoid downcasts in your code, for example from <literal>Score</literal> to <literal>HardSoftScore</literal>.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    @Inject // or @Autowired
    ScoreManager&lt;TimeTable&gt; scoreManager;</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    @Inject // or @Autowired
    ScoreManager&lt;TimeTable, HardSoftScore&gt; scoreManager;</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    ScoreExplanation&lt;TimeTable&gt; explanation = scoreManager.explainScore(timeTable);
    HardSoftScore score = (HardSoftScore) explanation.getScore();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    ScoreExplanation&lt;TimeTable, HardSoftScore&gt; explanation = scoreManager.explainScore(timeTable);
    HardSoftScore score = explanation.getScore();</programlisting>
			<bridgehead remap="_literal_constraintmatchtotal_literal_literal_constraintmatch_literal_and_literal_indictment_literal_generic_type_literal_score_literal_added" renderas="sect2" xml:id="literal_constraintmatchtotal_literal_literal_constraintmatch_literal_and_literal_indictment_literal_generic_type_literal_score_literal_added"><literal>ConstraintMatchTotal</literal>, <literal>ConstraintMatch</literal>, and <literal>Indictment</literal>: generic type <literal>Score</literal> added</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>
			</simpara>
			<simpara>
				Similar to <literal>ScoreManager</literal> and <literal>ScoreExplanation</literal>, the <literal>ConstraintMatchTotal</literal>, <literal>ConstraintMatch</literal>, and <literal>Indictment</literal> APIs now have a generic type <literal>Score</literal> to avoid downcasts in your code, for example from <literal>Score</literal> to <literal>HardSoftScore</literal>.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    ScoreExplanation&lt;TimeTable&gt; explanation = scoreManager.explainScore(timeTable);
    Map&lt;String, ConstraintMatchTotal&gt; constraintMatchTotalMap = scoreExplanation.getConstraintMatchTotalMap();
    ConstraintMatchTotal constraintMatchTotal = constraintMatchTotalMap.get(contraintId);
    HardSoftScore totalScore = (HardSoftScore) constraintMatchTotal.getScore();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    ScoreExplanation&lt;TimeTable, HardSoftScore&gt; explanation = scoreManager.explainScore(timeTable);
    Map&lt;String, ConstraintMatchTotal&lt;HardSoftScore&gt;&gt; constraintMatchTotalMap = scoreExplanation.getConstraintMatchTotalMap();
    ConstraintMatchTotal&lt;HardSoftScore&gt; constraintMatchTotal = constraintMatchTotalMap.get(contraintId);
    HardSoftScore totalScore = constraintMatchTotal.getScore();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    ScoreExplanation&lt;TimeTable&gt; explanation = scoreManager.explainScore(timeTable);
    Map&lt;Object, Indictment&gt; indictmentMap = scoreExplanation.getIndictmentMap();
    Indictment indictment = indictmentMap.get(lesson);
    HardSoftScore totalScore = (HardSoftScore) indictment.getScore();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">    ScoreExplanation&lt;TimeTable, HardSoftScore&gt; explanation = scoreManager.explainScore(timeTable);
    Map&lt;Object, Indictment&lt;HardSoftScore&gt;&gt; indictmentMap = scoreExplanation.getIndictmentMap();
    Indictment&lt;HardSoftScore&gt; indictment = indictmentMap.get(lesson);
    HardSoftScore totalScore = indictment.getScore();</programlisting>
			<bridgehead remap="_literal_constraintmatchawareincrementalscorecalculator_literal_generic_type_literal_score_literal_added" renderas="sect2" xml:id="literal_constraintmatchawareincrementalscorecalculator_literal_generic_type_literal_score_literal_added"><literal>ConstraintMatchAwareIncrementalScoreCalculator</literal>: generic type <literal>Score</literal> added</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>
			</simpara>
			<simpara>
				The interface <literal>ConstraintMatchAwareIncrementalScoreCalculator</literal> now also has a generic type parameter for <literal>Score</literal> to avoid raw type usages of <literal>ConstraintMatchTotal</literal> and <literal>Indictment</literal>.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">public class MachineReassignmentIncrementalScoreCalculator
        implements ConstraintMatchAwareIncrementalScoreCalculator&lt;MachineReassignment&gt; {

    @Override
    public Collection&lt;ConstraintMatchTotal&gt; getConstraintMatchTotals() {
        ...
    }


    @Override
    public Map&lt;Object, Indictment&gt; getIndictmentMap() {
        ...
    }

}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">public class MachineReassignmentIncrementalScoreCalculator
        implements ConstraintMatchAwareIncrementalScoreCalculator&lt;MachineReassignment, HardSoftLongScore&gt; {

    @Override
    public Collection&lt;ConstraintMatchTotal&lt;HardSoftLongScore&gt;&gt; getConstraintMatchTotals() {
        ...
    }


    @Override
    public Map&lt;Object, Indictment&lt;HardSoftLongScore&gt;&gt; getIndictmentMap() {
        ...
    }

}</programlisting>
			<bridgehead remap="_literal_abstractcustomphasecommand_literal_was_removed" renderas="sect2" xml:id="literal_abstractcustomphasecommand_literal_was_removed"><literal>AbstractCustomPhaseCommand</literal> was removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The abstract class <literal>AbstractCustomPhaseCommand</literal> was removed. Any class that extends it should directly implement the <literal>CustomPhaseCommand</literal> interface.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">public class DinnerPartySolutionInitializer extends AbstractCustomPhaseCommand&lt;DinnerParty&gt; {

    @Override
    public void changeWorkingSolution(ScoreDirector&lt;DinnerParty&gt; scoreDirector) {
        ...
    }

}</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">public class DinnerPartySolutionInitializer implements CustomPhaseCommand&lt;DinnerParty&gt; {

    @Override
    public void changeWorkingSolution(ScoreDirector&lt;DinnerParty&gt; scoreDirector) {
        ...
    }

}</programlisting>
			<bridgehead remap="_score_calculators_moved_to_the_public_api" renderas="sect2" xml:id="score_calculators_moved_to_the_public_api">Score calculators moved to the public API</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>
			</simpara>
			<simpara>
				The interfaces <literal>EasyScoreCalculator</literal>, <literal>IncrementalScoreCalculator</literal>, and <literal>ConstraintMatchAwareIncrementalScoreCalculator</literal> have moved to a new package in the public API. Their deprecated counterparts have been removed. The deprecated class <literal>org.optaplanner.core.impl.score.director.incremental.AbstractIncrementalScoreCalculator</literal> has also been removed. Replace the use of the removed interfaces and classes with their counterparts in the public API.
			</simpara>
			<simpara>
				An example from the <literal><emphasis role="strong">EasyScoreCalculator.java</emphasis></literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  ...
  import org.optaplanner.core.impl.score.director.easy.EasyScoreCalculator;
  ...

  public class CloudBalancingEasyScoreCalculator implements EasyScoreCalculator&lt;CloudBalance&gt; {
    ...
  }</programlisting>
			<simpara>
				An example from the <literal><emphasis role="strong">EasyScoreCalculator.java</emphasis></literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  ...
  import org.optaplanner.core.api.score.calculator.EasyScoreCalculator;
  ...

  public class CloudBalancingEasyScoreCalculator implements EasyScoreCalculator&lt;CloudBalance, HardSoftScore&gt; {
    ...
  }</programlisting>
			<simpara>
				An example from the <literal><emphasis role="strong">IncrementalScoreCalculator.java</emphasis></literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  ...
  import org.optaplanner.core.impl.score.director.incremental.AbstractIncrementalScoreCalculator;
  ...

  public class CloudBalancingIncrementalScoreCalculator extends AbstractIncrementalScoreCalculator&lt;CloudBalance&gt; {
    ...
  }</programlisting>
			<simpara>
				An example from the <literal><emphasis role="strong">IncrementalScoreCalculator.java</emphasis></literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  ...
  import org.optaplanner.core.api.score.calculator.IncrementalScoreCalculator;
  ...

  public class CloudBalancingIncrementalScoreCalculator implements IncrementalScoreCalculator&lt;CloudBalance, HardSoftScore&gt; {
    ...
  }</programlisting>
			<simpara>
				An example from the <literal><emphasis role="strong">ConstraintMatchAwareIncrementalScoreCalculator.java</emphasis></literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  ...
  import org.optaplanner.core.impl.score.director.incremental.AbstractIncrementalScoreCalculator;
  import org.optaplanner.core.impl.score.director.incremental.ConstraintMatchAwareIncrementalScoreCalculator;
  ...

  public class CheapTimeConstraintMatchAwareIncrementalScoreCalculator
        extends AbstractIncrementalScoreCalculator&lt;CheapTimeSolution&gt;
        implements ConstraintMatchAwareIncrementalScoreCalculator&lt;CheapTimeSolution&gt; {
    ...
  }</programlisting>
			<simpara>
				An example from the <literal><emphasis role="strong">ConstraintMatchAwareIncrementalScoreCalculator.java</emphasis></literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">  ...
  import org.optaplanner.core.api.score.calculator.ConstraintMatchAwareIncrementalScoreCalculator;
  ...

  public class CheapTimeConstraintMatchAwareIncrementalScoreCalculator
        implements ConstraintMatchAwareIncrementalScoreCalculator&lt;CheapTimeSolution, HardMediumSoftLongScore&gt; {
    ...
  }</programlisting>
			<bridgehead remap="_literal_plannerbenchmarkfactory_literal_literal_createfromsolverfactory_literal_removed" renderas="sect2" xml:id="literal_plannerbenchmarkfactory_literal_literal_createfromsolverfactory_literal_removed"><literal>PlannerBenchmarkFactory</literal>: <literal>createFromSolverFactory()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>PlannerBenchmarkFactory.createFromSolverFactory()</literal> method has been deprecated and replaced with the <literal>PlannerBenchmarkFactory.createFromSolverConfigXmlResource(String)</literal> method. The <literal>PlannerBenchmarkFactory.createFromSolverFactory()</literal> method has been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverFactory&lt;CloudBalance&gt; solverFactory = SolverFactory.createFromXmlResource(
        ".../cloudBalancingSolverConfig.xml");
PlannerBenchmarkFactory benchmarkFactory = PlannerBenchmarkFactory.createFromSolverFactory(solverFactory);</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">PlannerBenchmarkFactory benchmarkFactory = PlannerBenchmarkFactory.createFromSolverConfigXmlResource(
        ".../cloudBalancingSolverConfig.xml");</programlisting>
			<simpara>
				If you programmatically adjust the solver configuration, you can use <literal>PlannerBenchmarkConfig.createFromSolverConfig(SolverConfig)</literal> and then <literal>PlannerBenchmarkFactory.create(PlannerBenchmarkConfig)</literal> instead.
			</simpara>
			<bridgehead remap="_literal_plannerbenchmarkfactory_literal_literal_getplannerbenchmarkconfig_literal_removed" renderas="sect2" xml:id="literal_plannerbenchmarkfactory_literal_literal_getplannerbenchmarkconfig_literal_removed"><literal>PlannerBenchmarkFactory</literal>: <literal>getPlannerBenchmarkConfig()</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>PlannerBenchmarkFactory.getPlannerBenchmarkConfig()</literal> method has been deprecated and replaced with the <literal>PlannerBenchmarkFactory.create(PlannerBenchmarkConfig)</literal> method. A <literal>PlannerBenchmarkConfig</literal> instance is now instantiated before a <literal>PlannerBenchmarkFactory</literal> instance is instantiated. This order is more logical. <literal>PlannerBenchmarkFactory.getPlannerBenchmarkConfig()</literal> has been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">PlannerBenchmarkFactory benchmarkFactory = PlannerBenchmarkFactory.createFromXmlResource(
        ".../cloudBalancingBenchmarkConfig.xml");
PlannerBenchmarkConfig benchmarkConfig = benchmarkFactory.getPlannerBenchmarkConfig();
...
PlannerBenchmark benchmark = benchmarkFactory.buildPlannerBenchmark();</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">PlannerBenchmarkConfig benchmarkConfig = PlannerBenchmarkConfig.createFromXmlResource(
        ".../cloudBalancingBenchmarkConfig.xml");
...
PlannerBenchmarkFactory benchmarkFactory = PlannerBenchmarkFactory.create(benchmarkConfig);
PlannerBenchmark benchmark = benchmarkFactory.buildPlannerBenchmark();</programlisting>
			<bridgehead remap="_xml_plannerbenchmark_root_element_now_belongs_to_the_http_www_optaplanner_org_xsd_benchmark_namespace" renderas="sect2" xml:id="xml_plannerbenchmark_root_element_now_belongs_to_the_http_www_optaplanner_org_xsd_benchmark_namespace">XML &lt;plannerBenchmark/&gt; root element now belongs to the http://www.optaplanner.org/xsd/benchmark namespace</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				OptaPlanner now provides an XML Schema Definition (XSD) for the benchmark configuration. Although OptaPlanner keeps compatibility with earlier versions of the existing XML configuration, migrating to the XSD is strongly recommended because OptaPlanner might support only valid configuration XML in the future.
			</simpara>
			<simpara>
				An example from the <literal>*BenchmarkConfig.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;plannerBenchmark&gt;
  ...
&lt;/plannerBenchmark&gt;</programlisting>
			<simpara>
				An example from the <literal>*BenchmarkConfig.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;plannerBenchmark xmlns="https://www.optaplanner.org/xsd/benchmark" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://www.optaplanner.org/xsd/benchmark https://www.optaplanner.org/xsd/benchmark/benchmark.xsd"&gt;
  ...
&lt;/plannerBenchmark&gt;</programlisting>
			<simpara>
				Using the XSD might require reordering some of the XML elements of the configuration. Use code completion in the IDE to migrate to a valid XML.
			</simpara>
			<bridgehead remap="_literal_problembenchmarksconfig_literal_literal_xstreamannotatedclass_literal_removed" renderas="sect2" xml:id="literal_problembenchmarksconfig_literal_literal_xstreamannotatedclass_literal_removed"><literal>ProblemBenchmarksConfig</literal>: <literal>xStreamAnnotatedClass</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The <literal>&lt;xStreamAnnotatedClass/&gt;</literal> has been removed from the <literal>&lt;problemBenchmarks/&gt;</literal> configuration together with the corresponding <literal>getXStreamAnnotatedClassList()</literal> and <literal>setXStreamAnnotatedClassList()</literal> methods in the <literal>ProblemBenchmarksConfig</literal> class.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">ProblemBenchmarksConfig problemBenchmarksConfig = new ProblemBenchmarksConfig();
problemBenchmarksConfig.setXStreamAnnotatedClassList(MySolution.class);</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">package com.example;
...
public class MySolutionFileIO extends XStreamSolutionFileIO&lt;MySolution&gt; {
    public MySolutionFileIO() {
        super(MySolution.class);
    }
}

...

ProblemBenchmarksConfig problemBenchmarksConfig = new ProblemBenchmarksConfig();
problemBenchmarksConfig.setSolutionFileIOClass(MySolutionFileIO.class);</programlisting>
			<simpara>
				An example from the <literal>*BenchmarkConfig.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;plannerBenchmark&gt;
...
  &lt;solverBenchmark&gt;
    &lt;problemBenchmarks&gt;
      &lt;xStreamAnnotatedClass&gt;com.example.MySolution&lt;/xStreamAnnotatedClass&gt;
      ...
    &lt;/problemBenchmarks&gt;
    ...
  &lt;/solverBenchmark&gt;
...
&lt;/plannerBenchmark&gt;</programlisting>
			<simpara>
				An example from the <literal>*BenchmarkConfig.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">&lt;plannerBenchmark&gt;
...
  &lt;solverBenchmark&gt;
    &lt;problemBenchmarks&gt;
      &lt;!-- See the "After in *.java" section to create the MySolutionFileIO. --&gt;
      &lt;solutionFileIOClass&gt;com.example.MySolutionFileIO&lt;/solutionFileIOClass&gt;
      ...
    &lt;/problemBenchmarks&gt;
    ...
  &lt;/solverBenchmark&gt;
...
&lt;/plannerBenchmark&gt;</programlisting>
			<bridgehead remap="_literal_benchmarkaggregatorframe_createanddisplay_plannerbenchmarkfactory_literal_removed" renderas="sect2" xml:id="literal_benchmarkaggregatorframe_createanddisplay_plannerbenchmarkfactory_literal_removed"><literal>BenchmarkAggregatorFrame.createAndDisplay(PlannerBenchmarkFactory)</literal> removed</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>
			</simpara>
			<simpara>
				The <literal>BenchmarkAggregatorFrame.createAndDisplay(PlannerBenchmarkFactory)</literal> method has been deprecated and replaced with the <literal>BenchmarkAggregatorFrame.createAndDisplayFromXmlResource(String)</literal> method. The <literal>BenchmarkAggregatorFrame.createAndDisplay(PlannerBenchmarkFactory)</literal> method has been removed.
			</simpara>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">PlannerBenchmarkFactory benchmarkFactory = PlannerBenchmarkFactory.createFromXmlResource(
        ".../cloudBalancingBenchmarkConfig.xml");
BenchmarkAggregatorFrame.createAndDisplay(benchmarkFactory);</programlisting>
			<simpara>
				An example from a <literal>*.java</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">BenchmarkAggregatorFrame.createAndDisplayFromXmlResource(
        ".../cloudBalancingBenchmarkConfig.xml");</programlisting>
			<simpara>
				If you programmatically adjust the benchmark configuration, you can use <literal>BenchmarkAggregatorFrame.createAndDisplay(PlannerBenchmarkConfig)</literal> instead.
			</simpara>
			<bridgehead remap="_removed_javascript_expression_support_in_configuration" renderas="sect2" xml:id="removed_javascript_expression_support_in_configuration">Removed JavaScript expression support in configuration</bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>
			</simpara>
			<simpara>
				Various elements of both the solver configuration and benchmark configuration no longer support nested JavaScript expressions. You must replace these with either auto-configuration or with integer constants.
			</simpara>
			<simpara>
				An example from the <literal>solverConfig.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">    &lt;solver&gt;
        ...
        &lt;moveThreadCount&gt;availableProcessorCount - 1&lt;/moveThreadCount&gt;
        ...
    &lt;/solver&gt;</programlisting>
			<simpara>
				An example from the `solverConfig.xml`file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">    &lt;solver&gt;
        ...
        &lt;moveThreadCount&gt;1&lt;/moveThreadCount&gt; &lt;!-- Alternatively, use "AUTO" or omit entirely. --&gt;
        ...
    &lt;/solver&gt;</programlisting>
			<simpara>
				An example from the <literal>benchmarkConfig.xml</literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">    &lt;plannerBenchmark&gt;
      ...
      &lt;parallelBenchmarkCount&gt;availableProcessorCount - 1&lt;/parallelBenchmarkCount&gt;
      ...
    &lt;/plannerBenchmark&gt;</programlisting>
			<simpara>
				An example from the <literal>benchmarkConfig.xml</literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="xml" linenumbering="unnumbered">    &lt;plannerBenchmark&gt;
      ...
      &lt;parallelBenchmarkCount&gt;1&lt;/parallelBenchmarkCount&gt; &lt;!-- Alternatively, use "AUTO" or omit entirely. --&gt;
      ...
    &lt;/plannerBenchmark&gt;</programlisting>
			<bridgehead remap="_removed_the_deprecated_variable_listeners" renderas="sect2" xml:id="removed_the_deprecated_variable_listeners">Removed the deprecated variable listeners</bridgehead>
			<simpara>
				<emphasis role="strong">Major</emphasis>, <emphasis role="strong">Public API</emphasis>
			</simpara>
			<simpara>
				The deprecated interface <literal>VariableListener</literal> from the package <literal>org.optaplanner.core.impl.domain.variable.listener</literal> has been removed, along with the deprecated interface <literal>StatefulVariableListener</literal> and the deprecated class <literal>VariableListenerAdapter</literal> in that same package. Use a <literal>VariableListener</literal> interface from the <literal>org.optaplanner.core.api.domain.variable</literal> package instead.
			</simpara>
			<simpara>
				An example of a <literal><emphasis role="strong">VariableListener.java</emphasis></literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">  ...
  import org.optaplanner.core.impl.domain.variable.listener.VariableListenerAdapter;
  ...

  public class MyVariableListener extends VariableListenerAdapter&lt;Object&gt; {

    ...

    @Override
    void afterEntityRemoved(ScoreDirector scoreDirector, Object entity);
      ...
    }

    ...
  }</programlisting>
			<simpara>
				An example from a <literal><emphasis role="strong">VariableListener.java</emphasis></literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">  ...
  import org.optaplanner.core.api.domain.variable.VariableListener;
  ...

  public class MyVariableListener extends VariableListener&lt;MySolution, Object&gt; {

    ...

    @Override
    void afterEntityRemoved(ScoreDirector&lt;MySolution&gt; scoreDirector, Object entity);
      ...
    }

    ...
  }</programlisting>
			<simpara>
				An example of a <literal><emphasis role="strong">StatefulVariableListener.java</emphasis></literal> file in OptaPlanner 7:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">  ...
  import org.optaplanner.core.impl.domain.variable.listener.StatefulVariableListener;
  ...

  public class MyStatefulVariableListener implements StatefulVariableListener&lt;Object&gt; {

    ...

    @Override
    public void clearWorkingSolution(ScoreDirector scoreDirector) {
      ...
    }

    ...
  }</programlisting>
			<simpara>
				An example from the <literal><emphasis role="strong">StatefulVariableListener.java</emphasis></literal> file in OptaPlanner 8:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">  ...
  import org.optaplanner.core.api.domain.variable.VariableListener;
  ...

  public class MyStatefulVariableListener implements VariableListener&lt;MySolution, Object&gt; {

    ...

    @Override
    public void close() {
      ...
    }

    ...
  }</programlisting>
		</chapter>
		<chapter xml:id="optaplanner-8-ref_developing-solvers">
			<title>Changes between OptaPlanner 8.2.0 and OptaPlanner 8.3.0</title>
			<simpara>
				The changes listed in this section were made between OptaPlanner 8.2.0 and OptaPlanner 8.3.0.
			</simpara>
			<bridgehead remap="_literal_constraintmatch_compareto_literal_inconsistent_with_literal_equals_literal" renderas="sect3" xml:id="literal_constraintmatch_compareto_literal_inconsistent_with_literal_equals_literal"><literal>ConstraintMatch.compareTo()</literal> inconsistent with <literal>equals()</literal></bridgehead>
			<simpara>
				<emphasis role="strong">Minor</emphasis>
			</simpara>
			<simpara>
				The <literal>equals()</literal> override in <literal>ConstraintMatch</literal> has been removed. As a result, two different <literal>ConstraintMatch</literal> instances are never considered equal. This contrasts with the <literal>compareTo()</literal> method, which continues to consider two instances equal if all their field values are equal.
			</simpara>
		</chapter>
	</part>
	<part xml:id="assembly-getting-started-business-optimizer">
		<title>Getting started with Red Hat build of OptaPlanner</title>
		<partintro>
			<simpara>
				As a business rules developer, you can use Red Hat build of OptaPlanner to find the optimal solution to planning problems based on a set of limited resources and under specific constraints.
			</simpara>
			<simpara>
				Use this document to start developing solvers with OptaPlanner.
			</simpara>
		</partintro>
		<chapter xml:id="optimizer-about-optimizer-con_getting-started-optaplanner">
			<title>Introduction to Red Hat build of OptaPlanner</title>
			<simpara>
				OptaPlanner is a lightweight, embeddable planning engine that optimizes planning problems. It helps normal Java programmers solve planning problems efficiently, and it combines optimization heuristics and metaheuristics with very efficient score calculations.
			</simpara>
			<simpara>
				For example, OptaPlanner helps solve various use cases:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<emphasis>Employee/Patient Rosters</emphasis>: It helps create timetables for nurses and keeps track of patient bed management.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis>Educational Timetables</emphasis>: It helps schedule lessons, courses, exams, and conference presentations.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis>Shop Schedules</emphasis>: It tracks car assembly lines, machine queue planning, and workforce task planning.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis>Cutting Stock</emphasis>: It minimizes waste by reducing the consumption of resources such as paper and steel.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Every organization faces planning problems; that is, they provide products and services with a limited set of constrained resources (employees, assets, time, and money).
			</simpara>
			<simpara>
				OptaPlanner is open source software under the Apache Software License 2.0. It is 100% pure Java and runs on most Java virtual machines (JVMs).
			</simpara>
			<section xml:id="optimizer-planning-problem-con">
				<title>Planning problems</title>
				<simpara>
					A <emphasis>planning problem</emphasis> has an optimal goal, based on limited resources and under specific constraints. Optimal goals can be any number of things, such as:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Maximized profits - the optimal goal results in the highest possible profit.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Minimized ecological footprint - the optimal goal has the least amount of environmental impact.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Maximized satisfaction for employees or customers - the optimal goal prioritizes the needs of employees or customers.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The ability to achieve these goals relies on the number of resources available. For example, the following resources might be limited:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Number of people
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Amount of time
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Budget
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Physical assets, for example, machinery, vehicles, computers, buildings
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					You must also take into account the specific constraints related to these resources, such as the number of hours a person works, their ability to use certain machines, or compatibility between pieces of equipment.
				</simpara>
				<simpara>
					Red Hat build of OptaPlanner helps Java programmers solve constraint satisfaction problems efficiently. It combines optimization heuristics and metaheuristics with efficient score calculation.
				</simpara>
			</section>
			<section xml:id="optimizer-NP-complete-vs-NP-hard-con">
				<title>NP-completeness in planning problems</title>
				<simpara>
					The provided use cases are <emphasis>probably</emphasis> <link xlink:href="http://en.wikipedia.org/wiki/NP-complete">NP-complete or NP-hard</link>, which means the following statements apply:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							It is easy to verify a specific solution to a problem in reasonable time.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							There is no simple way to find the optimal solution of a problem in reasonable time.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The implication is that solving your problem is probably harder than you anticipated, because the two common techniques do not suffice:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A brute force algorithm (even a more advanced variant) takes too long.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A quick algorithm, for example in the <link xlink:href="https://en.wikipedia.org/wiki/Bin_packing_problem">bin packing problem</link>, <emphasis>putting in the largest items first</emphasis> returns a solution that is far from optimal.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					By using advanced optimization algorithms, OptaPlanner finds a good solution in reasonable time for such planning problems.
				</simpara>
			</section>
			<section xml:id="optimizer-planning-problem-search-space-con">
				<title>Solutions to planning problems</title>
				<simpara>
					A planning problem has a number of solutions.
				</simpara>
				<simpara>
					Several categories of solutions are:
				</simpara>
				<variablelist>
					<varlistentry>
						<term>Possible solution</term>
						<listitem>
							<simpara>
								A possible solution is any solution, whether or not it breaks any number of constraints. Planning problems often have an incredibly large number of possible solutions. Many of those solutions are not useful.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Feasible solution</term>
						<listitem>
							<simpara>
								A feasible solution is a solution that does not break any (negative) hard constraints. The number of feasible solutions are relative to the number of possible solutions. Sometimes there are no feasible solutions. Every feasible solution is a possible solution.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Optimal solution</term>
						<listitem>
							<simpara>
								Optimal solutions are the solutions with the highest scores. Planning problems usually have a few optimal solutions. They always have at least one optimal solution, even in the case that there are no feasible solutions and the optimal solution is not feasible.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Best solution found</term>
						<listitem>
							<simpara>
								The best solution is the solution with the highest score found by an implementation in a specified amount of time. The best solution found is likely to be feasible and, given enough time, it’s an optimal solution.
							</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
				<simpara>
					Counterintuitively, the number of possible solutions is huge (if calculated correctly), even with a small data set.
				</simpara>
				<simpara>
					In the examples provided in the <literal>planner-engine</literal> distribution folder, most instances have a large number of possible solutions. As there is no guaranteed way to find the optimal solution, any implementation is forced to evaluate at least a subset of all those possible solutions.
				</simpara>
				<simpara>
					OptaPlanner supports several optimization algorithms to efficiently wade through that incredibly large number of possible solutions.
				</simpara>
				<simpara>
					Depending on the use case, some optimization algorithms perform better than others, but it is impossible to know in advance. Using OptaPlanner, you can switch the optimization algorithm by changing the solver configuration in a few lines of XML or code.
				</simpara>
			</section>
			<section xml:id="optimizer-hard-vs-soft-constraints-con">
				<title>Constraints on planning problems</title>
				<simpara>
					Usually, a planning problem has minimum two levels of constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <emphasis>(negative) hard constraint</emphasis> must not be broken.
						</simpara>
						<simpara>
							For example, one teacher can not teach two different lessons at the same time.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A <emphasis>(negative) soft constraint</emphasis> should not be broken if it can be avoided.
						</simpara>
						<simpara>
							For example, Teacher A does not like to teach on Friday afternoons.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Some problems also have positive constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <emphasis>positive soft constraint (or reward)</emphasis> should be fulfilled if possible.
						</simpara>
						<simpara>
							For example, Teacher B likes to teach on Monday mornings.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Some basic problems only have hard constraints. Some problems have three or more levels of constraints, for example, hard, medium, and soft constraints.
				</simpara>
				<simpara>
					These constraints define the <emphasis>score calculation</emphasis> (otherwise known as the <emphasis>fitness function</emphasis>) of a planning problem. Each solution of a planning problem is graded with a score. With OptaPlanner, score constraints are written in an object oriented language such as Java, or in Drools rules.
				</simpara>
				<simpara>
					This type of code is flexible and scalable.
				</simpara>
			</section>
			<section xml:id="examples-con">
				<title>Examples provided with Red Hat build of OptaPlanner</title>
				<simpara>
					Several Red Hat build of OptaPlanner examples are shipped with Red Hat Decision Manager. You can review the code for examples and modify it as necessary to suit your needs.
				</simpara>
				<note>
					<simpara>
						Red Hat does not provide support for the example code included in the Red Hat Decision Manager distribution.
					</simpara>
				</note>
				<simpara>
					Some of the OptaPlanner examples solve problems that are presented in academic contests. The <literal>Contest</literal> column in the following table lists the contests. It also identifies an example as being either <emphasis>realistic</emphasis> or <emphasis>unrealistic</emphasis> for the purpose of a contest. A <emphasis>realistic contest</emphasis> is an official, independent contest that meets the following standards:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Clearly defined real-world use cases
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Real-world constraints
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Multiple real-world datasets
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Reproducible results within a specific time limit on specific hardware
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Serious participation from the academic and/or enterprise Operations Research community.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Realistic contests provide an objective comparison of OptaPlanner with competitive software and academic research.
				</simpara>
				<table colsep="1" frame="all" rowsep="1">
					<title>Examples overview</title>
					<tgroup cols="5">
						<colspec colname="col_1" colwidth="13*"></colspec>
						<colspec colname="col_2" colwidth="25*"></colspec>
						<colspec colname="col_3" colwidth="25*"></colspec>
						<colspec colname="col_4" colwidth="13*"></colspec>
						<colspec colname="col_5" colwidth="25*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Example</entry>
								<entry align="left" valign="top">Domain</entry>
								<entry align="left" valign="top">Size</entry>
								<entry align="left" valign="top">Contest</entry>
								<entry align="left" valign="top">Directory name</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-nQueens-ref">N queens</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>256</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>256</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^616</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Pointless (cheatable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>nqueens</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-cloudBalancing-ref">Cloud balancing</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>2400</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>800</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^6967</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No (Defined by us)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>cloudbalancing</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-tsp-ref">Traveling salesman</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 chained variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>980</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>980</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^2504</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Unrealistic <link xlink:href="http://www.math.uwaterloo.ca/tsp/">TSP web</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>tsp</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-tennis-ref">Tennis club scheduling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>72</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>7</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^60</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No (Defined by us)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>tennis</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-meetingScheduling-ref">Meeting scheduling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(2 variables)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>10</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>320</literal> and ⇐ <literal>5</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^320</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No (Defined by us)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>meetingscheduling</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-curriculumCourse-ref">Course timetabling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(2 variables)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>434</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>25</literal> and ⇐ <literal>20</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^1171</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Realistic <link xlink:href="http://www.cs.qub.ac.uk/itc2007/curriculmcourse/course_curriculm_index.htm">ITC 2007 track 3</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>curriculumCourse</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-machineReassignment-ref">Machine reassignment</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>50000</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>5000</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^184948</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Nearly realistic <link xlink:href="http://challenge.roadef.org/2012/en/">ROADEF 2012</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>machineReassignment</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-vehicleRouting-ref">Vehicle routing</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 chained variable)
								</simpara>
								<simpara>
									1 shadow entity class
								</simpara>
								<simpara>
									(1 automatic shadow variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>2740</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>2795</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^8380</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Unrealistic VRP web
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>vehiclerouting</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-vehicleRouting-ref">Vehicle routing</link> with time windows
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									All of Vehicle routing
								</simpara>
								<simpara>
									(1 shadow variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>2740</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>2795</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^8380</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Unrealistic VRP web
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>vehiclerouting</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-projectJobScheduling-ref">Project job scheduling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(2 variables)
								</simpara>
								<simpara>
									(1 shadow variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>640</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>?</literal> and ⇐ <literal>?</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>?</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Nearly realistic <link xlink:href="http://gent.cs.kuleuven.be/mista2013challenge/">MISTA 2013</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>projectjobscheduling</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-taskAssigning-ref">Task assigning</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 chained variable)
								</simpara>
								<simpara>
									(1 shadow variable)
								</simpara>
								<simpara>
									1 shadow entity class
								</simpara>
								<simpara>
									(1 automatic shadow variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>500</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>520</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^1168</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No Defined by us
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>taskassigning</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-examination-ref">Exam timetabling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									2 entity classes (same hierarchy)
								</simpara>
								<simpara>
									(2 variables)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>1096</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>80</literal> and ⇐ <literal>49</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^3374</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Realistic <link xlink:href="http://www.cs.qub.ac.uk/itc2007/examtrack/exam_track_index.htm">ITC 2007 track 1</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>examination</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-nurseRostering-ref">Nurse rostering</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>752</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>50</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^1277</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Realistic <link xlink:href="http://www.kuleuven-kortrijk.be/nrpcompetition">INRC 2010</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>nurserostering</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-travelingTournament-ref">Traveling tournament</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>1560</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>78</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^2301</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Unrealistic <link xlink:href="http://mat.tepper.cmu.edu/TOURN/">TTP</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>travelingtournament</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-cheapTimeScheduling-ref">Cheap time scheduling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(2 variables)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>500</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>100</literal> and ⇐ <literal>288</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^20078</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Nearly realistic <link xlink:href="https://web.archive.org/web/20170223060433/http://iconchallenge.insight-centre.org/challenge-energy">ICON Energy</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>cheaptimescheduling</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-investment-ref">Investment</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>11</literal>
								</simpara>
								<simpara>
									Value = <literal>1000</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^4</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No Defined by us
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>investment</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-conferenceScheduling-ref">Conference scheduling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(2 variables)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>216</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>18</literal> and ⇐ <literal>20</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^552</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No Defined by us
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>conferencescheduling</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-rockTour-ref">Rock tour</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 chained variable)
								</simpara>
								<simpara>
									(4 shadow variables)
								</simpara>
								<simpara>
									1 shadow entity class
								</simpara>
								<simpara>
									(1 automatic shadow variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>47</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>48</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^59</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No Defined by us
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>rocktour</literal>
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<link linkend="ex-flightCrewScheduling-ref">Flight crew scheduling</link>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									1 entity class
								</simpara>
								<simpara>
									(1 variable)
								</simpara>
								<simpara>
									1 shadow entity class
								</simpara>
								<simpara>
									(1 automatic shadow variable)
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Entity ⇐ <literal>4375</literal>
								</simpara>
								<simpara>
									Value ⇐ <literal>750</literal>
								</simpara>
								<simpara>
									Search space ⇐ <literal>10^12578</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									No Defined by us
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>flightcrewscheduling</literal>
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section xml:id="ex-nQueens-ref">
				<title>N queens</title>
				<simpara>
					Place <emphasis>n</emphasis> number of queens on an <emphasis>n</emphasis> sized chessboard so that no two queens can attack each other. The most common <emphasis>n</emphasis> queens puzzle is the eight queens puzzle, with <emphasis>n = 8</emphasis>:
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/NQueens/nQueensScreenshot.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>nQueensScreenshot</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Use a chessboard of <emphasis>n</emphasis> columns and <emphasis>n</emphasis> rows.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Place <emphasis>n</emphasis> queens on the chessboard.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							No two queens can attack each other. A queen can attack any other queen on the same horizontal, vertical, or diagonal line.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					This documentation heavily uses the four queens puzzle as the primary example.
				</simpara>
				<simpara>
					A proposed solution could be:
				</simpara>
				<figure>
					<title>A wrong solution for the four queens puzzle</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/NQueens/partiallySolvedNQueens04Explained.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>partiallySolvedNQueens04Explained</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					The above solution is wrong because queens <literal>A1</literal> and <literal>B0</literal> can attack each other (so can queens <literal>B0</literal> and <literal>D0</literal>). Removing queen <literal>B0</literal> would respect the "no two queens can attack each other" constraint, but would break the "place <emphasis>n</emphasis> queens" constraint.
				</simpara>
				<simpara>
					Below is a correct solution:
				</simpara>
				<figure>
					<title>A correct solution for the Four queens puzzle</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/NQueens/solvedNQueens04.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>solvedNQueens04</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					All the constraints have been met, so the solution is correct.
				</simpara>
				<simpara>
					Note that most <emphasis>n</emphasis> queens puzzles have multiple correct solutions. We will focus on finding a single correct solution for a specific <emphasis>n</emphasis>, not on finding the number of possible correct solutions for a specific <emphasis>n</emphasis>.
				</simpara>
				<formalpara xml:id="nQueensProblemSize">
					<title>Problem size</title>
					<para>
						
<screen>4queens   has   4 queens with a search space of    256.
8queens   has   8 queens with a search space of   10^7.
16queens  has  16 queens with a search space of  10^19.
32queens  has  32 queens with a search space of  10^48.
64queens  has  64 queens with a search space of 10^115.
256queens has 256 queens with a search space of 10^616.</screen>
					</para>
				</formalpara>
				<simpara>
					The implementation of the <emphasis>n</emphasis> queens example has not been optimized because it functions as a beginner example. Nevertheless, it can easily handle 64 queens. With a few changes it has been shown to easily handle 5000 queens and more.
				</simpara>
				<section xml:id="nQueensDomainModel">
					<title>Domain model for N queens</title>
					<simpara>
						This example uses the domain model to solve the four queens problem.
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<emphasis role="strong">Creating a Domain Model</emphasis>
							</simpara>
							<simpara>
								A good domain model will make it easier to understand and solve your planning problem.
							</simpara>
							<simpara>
								This is the domain model for the <emphasis>n</emphasis> queens example:
							</simpara>
							
<programlisting language="java" linenumbering="unnumbered">public class Column {

    private int index;

    // ... getters and setters
}</programlisting>
							
<programlisting language="java" linenumbering="unnumbered">public class Row {

    private int index;

    // ... getters and setters
}</programlisting>
							
<programlisting language="java" linenumbering="unnumbered">public class Queen {

    private Column column;
    private Row row;

    public int getAscendingDiagonalIndex() {...}
    public int getDescendingDiagonalIndex() {...}

    // ... getters and setters
}</programlisting>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Calculating the Search Space.</emphasis>
							</simpara>
							<simpara>
								A <literal>Queen</literal> instance has a <literal>Column</literal> (for example: 0 is column A, 1 is column B, …​) and a <literal>Row</literal> (its row, for example: 0 is row 0, 1 is row 1, …​).
							</simpara>
							<simpara>
								The ascending diagonal line and the descending diagonal line can be calculated based on the column and the row.
							</simpara>
							<simpara>
								The column and row indexes start from the upper left corner of the chessboard.
							</simpara>
							
<programlisting language="java" linenumbering="unnumbered">public class NQueens {

    private int n;
    private List&lt;Column&gt; columnList;
    private List&lt;Row&gt; rowList;

    private List&lt;Queen&gt; queenList;

    private SimpleScore score;

    // ... getters and setters
}</programlisting>
						</listitem>
						<listitem>
							<simpara>
								<emphasis role="strong">Finding the Solution</emphasis>
							</simpara>
							<simpara>
								A single <literal>NQueens</literal> instance contains a list of all <literal>Queen</literal> instances. It is the <literal>Solution</literal> implementation which will be supplied to, solved by, and retrieved from the Solver.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						Notice that in the four queens example, the NQueens <literal>getN()</literal> method will always return four.
					</simpara>
					<figure>
						<title>A solution for Four Queens</title>
						<mediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/_images/UseCasesAndExamples/NQueens/partiallySolvedNQueens04Explained.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>partiallySolvedNQueens04Explained</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<table colsep="1" frame="all" rowsep="1">
						<title>Details of the solution in the domain model</title>
						<tgroup cols="5">
							<colspec colname="col_1" colwidth="9*"></colspec>
							<colspec colname="col_2" colwidth="18*"></colspec>
							<colspec colname="col_3" colwidth="18*"></colspec>
							<colspec colname="col_4" colwidth="27*"></colspec>
							<colspec colname="col_5" colwidth="27*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top"></entry>
									<entry align="left" valign="top">columnIndex</entry>
									<entry align="left" valign="top">rowIndex</entry>
									<entry align="left" valign="top">ascendingDiagonalIndex (columnIndex + rowIndex)</entry>
									<entry align="left" valign="top">descendingDiagonalIndex (columnIndex - rowIndex)</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										A1
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										0
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										1
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">1 (**)</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										-1
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										B0
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										1
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">0 (*)</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">1 (**)</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										1
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										C2
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										2
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										2
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										4
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										0
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										D0
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										3
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										<emphasis role="strong">0 (*)</emphasis>
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										3
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										3
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<simpara>
						When two queens share the same column, row or diagonal line, such as (*) and (**), they can attack each other.
					</simpara>
				</section>
			</section>
			<section xml:id="ex-cloudBalancing-ref">
				<title>Cloud balancing</title>
				<simpara>
					For information about this example, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/developing_solvers_with_red_hat_build_of_optaplanner_in_red_hat_decision_manager#assembly-optaplanner-quickstarts_developing-solvers"><emphasis>Red Hat build of OptaPlanner quick start guides</emphasis></link>.
				</simpara>
			</section>
			<section xml:id="ex-tsp-ref">
				<title>Traveling salesman (TSP - Traveling Salesman Problem)</title>
				<simpara>
					Given a list of cities, find the shortest tour for a salesman that visits each city exactly once.
				</simpara>
				<simpara>
					The problem is defined by <link xlink:href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">Wikipedia</link>. It is <link xlink:href="http://www.math.uwaterloo.ca/tsp/">one of the most intensively studied problems</link> in computational mathematics. Yet, in the real world, it is often only part of a planning problem, along with other constraints, such as employee shift rostering constraints.
				</simpara>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>dj38     has  38 cities with a search space of   10^43.
europe40 has  40 cities with a search space of   10^46.
st70     has  70 cities with a search space of   10^98.
pcb442   has 442 cities with a search space of  10^976.
lu980    has 980 cities with a search space of 10^2504.</screen>
					</para>
				</formalpara>
				<formalpara>
					<title>Problem difficulty</title>
					<para>
						Despite TSP’s simple definition, the problem is surprisingly hard to solve. Because it is an NP-hard problem (like most planning problems), the optimal solution for a specific problem dataset can change a lot when that problem dataset is slightly altered:
					</para>
				</formalpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/TravellingSalesman/tspOptimalSolutionVolatility.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>tspOptimalSolutionVolatility</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
			</section>
			<section xml:id="ex-tennis-ref">
				<title>Tennis club scheduling</title>
				<simpara>
					Every week the tennis club has four teams playing round robin against each other. Assign those four spots to the teams fairly.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Conflict: A team can only play once per day.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Unavailability: Some teams are unavailable on some dates.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Medium constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Fair assignment: All teams should play an (almost) equal number of times.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Evenly confrontation: Each team should play against every other team an equal number of times.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>munich-7teams has 7 teams, 18 days, 12 unavailabilityPenalties and 72 teamAssignments with a search space of 10^60.</screen>
					</para>
				</formalpara>
				<figure>
					<title>Domain model</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/TennisScheduling/tennisClassDiagram.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>tennisClassDiagram</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			<section xml:id="ex-meetingScheduling-ref">
				<title>Meeting scheduling</title>
				<simpara>
					Assign each meeting to a starting time and a room. Meetings have different durations.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Room conflict: Two meetings must not use the same room at the same time.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Required attendance: A person cannot have two required meetings at the same time.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Required room capacity: A meeting must not be in a room that doesn’t fit all of the meeting’s attendees.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Start and end on same day: A meeting shouldn’t be scheduled over multiple days.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Medium constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Preferred attendance: A person cannot have two preferred meetings at the same time, nor a preferred and a required meeting at the same time.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Sooner rather than later: Schedule all meetings as soon as possible.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A break between meetings: Any two meetings should have at least one time grain break between them.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Overlapping meetings: To minimize the number of meetings in parallel so people don’t have to choose one meeting over the other.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Assign larger rooms first: If a larger room is available any meeting should be assigned to that room in order to accommodate as many people as possible even if they haven’t signed up to that meeting.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Room stability: If a person has two consecutive meetings with two or less time grains break between them they better be in the same room.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>50meetings-160timegrains-5rooms  has  50 meetings, 160 timeGrains and 5 rooms with a search space of 10^145.
100meetings-320timegrains-5rooms has 100 meetings, 320 timeGrains and 5 rooms with a search space of 10^320.
200meetings-640timegrains-5rooms has 200 meetings, 640 timeGrains and 5 rooms with a search space of 10^701.
400meetings-1280timegrains-5rooms has 400 meetings, 1280 timeGrains and 5 rooms with a search space of 10^1522.
800meetings-2560timegrains-5rooms has 800 meetings, 2560 timeGrains and 5 rooms with a search space of 10^3285.</screen>
					</para>
				</formalpara>
			</section>
			<section xml:id="ex-curriculumCourse-ref">
				<title>Course timetabling (ITC 2007 Track 3 - Curriculum Course Scheduling)</title>
				<simpara>
					Schedule each lecture into a timeslot and into a room.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Teacher conflict: A teacher must not have two lectures in the same period.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Curriculum conflict: A curriculum must not have two lectures in the same period.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Room occupancy: Two lectures must not be in the same room in the same period.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Unavailable period (specified per dataset): A specific lecture must not be assigned to a specific period.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Room capacity: A room’s capacity should not be less than the number of students in its lecture.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Minimum working days: Lectures of the same course should be spread out into a minimum number of days.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Curriculum compactness: Lectures belonging to the same curriculum should be adjacent to each other (so in consecutive periods).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Room stability: Lectures of the same course should be assigned to the same room.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The problem is defined by <link xlink:href="http://www.cs.qub.ac.uk/itc2007/curriculmcourse/course_curriculm_index.htm">the International Timetabling Competition 2007 track 3</link>.
				</simpara>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>comp01 has 24 teachers,  14 curricula,  30 courses, 160 lectures, 30 periods,  6 rooms and   53 unavailable period constraints with a search space of  10^360.
comp02 has 71 teachers,  70 curricula,  82 courses, 283 lectures, 25 periods, 16 rooms and  513 unavailable period constraints with a search space of  10^736.
comp03 has 61 teachers,  68 curricula,  72 courses, 251 lectures, 25 periods, 16 rooms and  382 unavailable period constraints with a search space of  10^653.
comp04 has 70 teachers,  57 curricula,  79 courses, 286 lectures, 25 periods, 18 rooms and  396 unavailable period constraints with a search space of  10^758.
comp05 has 47 teachers, 139 curricula,  54 courses, 152 lectures, 36 periods,  9 rooms and  771 unavailable period constraints with a search space of  10^381.
comp06 has 87 teachers,  70 curricula, 108 courses, 361 lectures, 25 periods, 18 rooms and  632 unavailable period constraints with a search space of  10^957.
comp07 has 99 teachers,  77 curricula, 131 courses, 434 lectures, 25 periods, 20 rooms and  667 unavailable period constraints with a search space of 10^1171.
comp08 has 76 teachers,  61 curricula,  86 courses, 324 lectures, 25 periods, 18 rooms and  478 unavailable period constraints with a search space of  10^859.
comp09 has 68 teachers,  75 curricula,  76 courses, 279 lectures, 25 periods, 18 rooms and  405 unavailable period constraints with a search space of  10^740.
comp10 has 88 teachers,  67 curricula, 115 courses, 370 lectures, 25 periods, 18 rooms and  694 unavailable period constraints with a search space of  10^981.
comp11 has 24 teachers,  13 curricula,  30 courses, 162 lectures, 45 periods,  5 rooms and   94 unavailable period constraints with a search space of  10^381.
comp12 has 74 teachers, 150 curricula,  88 courses, 218 lectures, 36 periods, 11 rooms and 1368 unavailable period constraints with a search space of  10^566.
comp13 has 77 teachers,  66 curricula,  82 courses, 308 lectures, 25 periods, 19 rooms and  468 unavailable period constraints with a search space of  10^824.
comp14 has 68 teachers,  60 curricula,  85 courses, 275 lectures, 25 periods, 17 rooms and  486 unavailable period constraints with a search space of  10^722.</screen>
					</para>
				</formalpara>
				<figure>
					<title>Domain model</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/CourseTimetabling/curriculumCourseClassDiagram.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>curriculumCourseClassDiagram</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			<section xml:id="ex-machineReassignment-ref">
				<title>Machine reassignment (Google ROADEF 2012)</title>
				<simpara>
					Assign each process to a machine. All processes already have an original (unoptimized) assignment. Each process requires an amount of each resource (such as CPU or RAM). This is a more complex version of the Cloud Balancing example.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Maximum capacity: The maximum capacity for each resource for each machine must not be exceeded.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Conflict: Processes of the same service must run on distinct machines.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Spread: Processes of the same service must be spread out across locations.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Dependency: The processes of a service depending on another service must run in the neighborhood of a process of the other service.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Transient usage: Some resources are transient and count towards the maximum capacity of both the original machine as the newly assigned machine.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Load: The safety capacity for each resource for each machine should not be exceeded.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Balance: Leave room for future assignments by balancing the available resources on each machine.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Process move cost: A process has a move cost.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Service move cost: A service has a move cost.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Machine move cost: Moving a process from machine A to machine B has another A-B specific move cost.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The problem is defined by <link xlink:href="http://challenge.roadef.org/2012/en/">the Google ROADEF/EURO Challenge 2012</link>.
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/MachineReassignment/cloudOptimizationIsLikeTetris.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>cloudOptimizationIsLikeTetris</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<figure xml:id="machineReassignmentValueProposition">
					<title>Value proposition</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/shared/cloudOptimizationValueProposition.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>cloudOptimizationValueProposition</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>model_a1_1 has  2 resources,  1 neighborhoods,   4 locations,    4 machines,    79 services,   100 processes and 1 balancePenalties with a search space of     10^60.
model_a1_2 has  4 resources,  2 neighborhoods,   4 locations,  100 machines,   980 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a1_3 has  3 resources,  5 neighborhoods,  25 locations,  100 machines,   216 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a1_4 has  3 resources, 50 neighborhoods,  50 locations,   50 machines,   142 services,  1000 processes and 1 balancePenalties with a search space of   10^1698.
model_a1_5 has  4 resources,  2 neighborhoods,   4 locations,   12 machines,   981 services,  1000 processes and 1 balancePenalties with a search space of   10^1079.
model_a2_1 has  3 resources,  1 neighborhoods,   1 locations,  100 machines,  1000 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a2_2 has 12 resources,  5 neighborhoods,  25 locations,  100 machines,   170 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a2_3 has 12 resources,  5 neighborhoods,  25 locations,  100 machines,   129 services,  1000 processes and 0 balancePenalties with a search space of   10^2000.
model_a2_4 has 12 resources,  5 neighborhoods,  25 locations,   50 machines,   180 services,  1000 processes and 1 balancePenalties with a search space of   10^1698.
model_a2_5 has 12 resources,  5 neighborhoods,  25 locations,   50 machines,   153 services,  1000 processes and 0 balancePenalties with a search space of   10^1698.
model_b_1  has 12 resources,  5 neighborhoods,  10 locations,  100 machines,  2512 services,  5000 processes and 0 balancePenalties with a search space of  10^10000.
model_b_2  has 12 resources,  5 neighborhoods,  10 locations,  100 machines,  2462 services,  5000 processes and 1 balancePenalties with a search space of  10^10000.
model_b_3  has  6 resources,  5 neighborhoods,  10 locations,  100 machines, 15025 services, 20000 processes and 0 balancePenalties with a search space of  10^40000.
model_b_4  has  6 resources,  5 neighborhoods,  50 locations,  500 machines,  1732 services, 20000 processes and 1 balancePenalties with a search space of  10^53979.
model_b_5  has  6 resources,  5 neighborhoods,  10 locations,  100 machines, 35082 services, 40000 processes and 0 balancePenalties with a search space of  10^80000.
model_b_6  has  6 resources,  5 neighborhoods,  50 locations,  200 machines, 14680 services, 40000 processes and 1 balancePenalties with a search space of  10^92041.
model_b_7  has  6 resources,  5 neighborhoods,  50 locations, 4000 machines, 15050 services, 40000 processes and 1 balancePenalties with a search space of 10^144082.
model_b_8  has  3 resources,  5 neighborhoods,  10 locations,  100 machines, 45030 services, 50000 processes and 0 balancePenalties with a search space of 10^100000.
model_b_9  has  3 resources,  5 neighborhoods, 100 locations, 1000 machines,  4609 services, 50000 processes and 1 balancePenalties with a search space of 10^150000.
model_b_10 has  3 resources,  5 neighborhoods, 100 locations, 5000 machines,  4896 services, 50000 processes and 1 balancePenalties with a search space of 10^184948.</screen>
					</para>
				</formalpara>
				<figure>
					<title>Domain model</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/MachineReassignment/machineReassignmentClassDiagram.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>machineReassignmentClassDiagram</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			<section xml:id="ex-vehicleRouting-ref">
				<title>Vehicle routing</title>
				<simpara>
					Using a fleet of vehicles, pick up the objects of each customer and bring them to the depot. Each vehicle can service multiple customers, but it has a limited capacity.
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/vehicleRoutingUseCase.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>vehicleRoutingUseCase</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Besides the basic case (CVRP), there is also a variant with time windows (CVRPTW).
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Vehicle capacity: a vehicle cannot carry more items then its capacity.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Time windows (only in CVRPTW):
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Travel time: Traveling from one location to another takes time.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Customer service duration: A vehicle must stay at the customer for the length of the service duration.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Customer ready time: A vehicle may arrive before the customer’s ready time, but it must wait until the ready time before servicing.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Customer due time: A vehicle must arrive on time, before the customer’s due time.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Total distance: Minimize the total distance driven (fuel consumption) of all vehicles.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The capacitated vehicle routing problem (CVRP) and its time-windowed variant (CVRPTW) are defined by the VRP web.
				</simpara>
				<figure>
					<title>Value proposition</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/vehicleRoutingValueProposition.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>vehicleRoutingValueProposition</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<formalpara>
					<title>Problem size</title>
					<para>
						CVRP instances (without time windows):
					</para>
				</formalpara>
				
<screen>belgium-n50-k10             has  1 depots, 10 vehicles and   49 customers with a search space of   10^74.
belgium-n100-k10            has  1 depots, 10 vehicles and   99 customers with a search space of  10^170.
belgium-n500-k20            has  1 depots, 20 vehicles and  499 customers with a search space of 10^1168.
belgium-n1000-k20           has  1 depots, 20 vehicles and  999 customers with a search space of 10^2607.
belgium-n2750-k55           has  1 depots, 55 vehicles and 2749 customers with a search space of 10^8380.
belgium-road-km-n50-k10     has  1 depots, 10 vehicles and   49 customers with a search space of   10^74.
belgium-road-km-n100-k10    has  1 depots, 10 vehicles and   99 customers with a search space of  10^170.
belgium-road-km-n500-k20    has  1 depots, 20 vehicles and  499 customers with a search space of 10^1168.
belgium-road-km-n1000-k20   has  1 depots, 20 vehicles and  999 customers with a search space of 10^2607.
belgium-road-km-n2750-k55   has  1 depots, 55 vehicles and 2749 customers with a search space of 10^8380.
belgium-road-time-n50-k10   has  1 depots, 10 vehicles and   49 customers with a search space of   10^74.
belgium-road-time-n100-k10  has  1 depots, 10 vehicles and   99 customers with a search space of  10^170.
belgium-road-time-n500-k20  has  1 depots, 20 vehicles and  499 customers with a search space of 10^1168.
belgium-road-time-n1000-k20 has  1 depots, 20 vehicles and  999 customers with a search space of 10^2607.
belgium-road-time-n2750-k55 has  1 depots, 55 vehicles and 2749 customers with a search space of 10^8380.
belgium-d2-n50-k10          has  2 depots, 10 vehicles and   48 customers with a search space of   10^74.
belgium-d3-n100-k10         has  3 depots, 10 vehicles and   97 customers with a search space of  10^170.
belgium-d5-n500-k20         has  5 depots, 20 vehicles and  495 customers with a search space of 10^1168.
belgium-d8-n1000-k20        has  8 depots, 20 vehicles and  992 customers with a search space of 10^2607.
belgium-d10-n2750-k55       has 10 depots, 55 vehicles and 2740 customers with a search space of 10^8380.

A-n32-k5  has 1 depots,  5 vehicles and  31 customers with a search space of  10^40.
A-n33-k5  has 1 depots,  5 vehicles and  32 customers with a search space of  10^41.
A-n33-k6  has 1 depots,  6 vehicles and  32 customers with a search space of  10^42.
A-n34-k5  has 1 depots,  5 vehicles and  33 customers with a search space of  10^43.
A-n36-k5  has 1 depots,  5 vehicles and  35 customers with a search space of  10^46.
A-n37-k5  has 1 depots,  5 vehicles and  36 customers with a search space of  10^48.
A-n37-k6  has 1 depots,  6 vehicles and  36 customers with a search space of  10^49.
A-n38-k5  has 1 depots,  5 vehicles and  37 customers with a search space of  10^49.
A-n39-k5  has 1 depots,  5 vehicles and  38 customers with a search space of  10^51.
A-n39-k6  has 1 depots,  6 vehicles and  38 customers with a search space of  10^52.
A-n44-k7  has 1 depots,  7 vehicles and  43 customers with a search space of  10^61.
A-n45-k6  has 1 depots,  6 vehicles and  44 customers with a search space of  10^62.
A-n45-k7  has 1 depots,  7 vehicles and  44 customers with a search space of  10^63.
A-n46-k7  has 1 depots,  7 vehicles and  45 customers with a search space of  10^65.
A-n48-k7  has 1 depots,  7 vehicles and  47 customers with a search space of  10^68.
A-n53-k7  has 1 depots,  7 vehicles and  52 customers with a search space of  10^77.
A-n54-k7  has 1 depots,  7 vehicles and  53 customers with a search space of  10^79.
A-n55-k9  has 1 depots,  9 vehicles and  54 customers with a search space of  10^82.
A-n60-k9  has 1 depots,  9 vehicles and  59 customers with a search space of  10^91.
A-n61-k9  has 1 depots,  9 vehicles and  60 customers with a search space of  10^93.
A-n62-k8  has 1 depots,  8 vehicles and  61 customers with a search space of  10^94.
A-n63-k9  has 1 depots,  9 vehicles and  62 customers with a search space of  10^97.
A-n63-k10 has 1 depots, 10 vehicles and  62 customers with a search space of  10^98.
A-n64-k9  has 1 depots,  9 vehicles and  63 customers with a search space of  10^99.
A-n65-k9  has 1 depots,  9 vehicles and  64 customers with a search space of 10^101.
A-n69-k9  has 1 depots,  9 vehicles and  68 customers with a search space of 10^108.
A-n80-k10 has 1 depots, 10 vehicles and  79 customers with a search space of 10^130.
F-n45-k4  has 1 depots,  4 vehicles and  44 customers with a search space of  10^60.
F-n72-k4  has 1 depots,  4 vehicles and  71 customers with a search space of 10^108.
F-n135-k7 has 1 depots,  7 vehicles and 134 customers with a search space of 10^240.</screen>
				<simpara>
					CVRPTW instances (with time windows):
				</simpara>
				
<screen>belgium-tw-d2-n50-k10    has  2 depots, 10 vehicles and   48 customers with a search space of   10^74.
belgium-tw-d3-n100-k10   has  3 depots, 10 vehicles and   97 customers with a search space of  10^170.
belgium-tw-d5-n500-k20   has  5 depots, 20 vehicles and  495 customers with a search space of 10^1168.
belgium-tw-d8-n1000-k20  has  8 depots, 20 vehicles and  992 customers with a search space of 10^2607.
belgium-tw-d10-n2750-k55 has 10 depots, 55 vehicles and 2740 customers with a search space of 10^8380.
belgium-tw-n50-k10       has  1 depots, 10 vehicles and   49 customers with a search space of   10^74.
belgium-tw-n100-k10      has  1 depots, 10 vehicles and   99 customers with a search space of  10^170.
belgium-tw-n500-k20      has  1 depots, 20 vehicles and  499 customers with a search space of 10^1168.
belgium-tw-n1000-k20     has  1 depots, 20 vehicles and  999 customers with a search space of 10^2607.
belgium-tw-n2750-k55     has  1 depots, 55 vehicles and 2749 customers with a search space of 10^8380.

Solomon_025_C101       has 1 depots,  25 vehicles and   25 customers with a search space of   10^40.
Solomon_025_C201       has 1 depots,  25 vehicles and   25 customers with a search space of   10^40.
Solomon_025_R101       has 1 depots,  25 vehicles and   25 customers with a search space of   10^40.
Solomon_025_R201       has 1 depots,  25 vehicles and   25 customers with a search space of   10^40.
Solomon_025_RC101      has 1 depots,  25 vehicles and   25 customers with a search space of   10^40.
Solomon_025_RC201      has 1 depots,  25 vehicles and   25 customers with a search space of   10^40.
Solomon_100_C101       has 1 depots,  25 vehicles and  100 customers with a search space of  10^185.
Solomon_100_C201       has 1 depots,  25 vehicles and  100 customers with a search space of  10^185.
Solomon_100_R101       has 1 depots,  25 vehicles and  100 customers with a search space of  10^185.
Solomon_100_R201       has 1 depots,  25 vehicles and  100 customers with a search space of  10^185.
Solomon_100_RC101      has 1 depots,  25 vehicles and  100 customers with a search space of  10^185.
Solomon_100_RC201      has 1 depots,  25 vehicles and  100 customers with a search space of  10^185.
Homberger_0200_C1_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^429.
Homberger_0200_C2_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^429.
Homberger_0200_R1_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^429.
Homberger_0200_R2_2_1  has 1 depots,  50 vehicles and  200 customers with a search space of  10^429.
Homberger_0200_RC1_2_1 has 1 depots,  50 vehicles and  200 customers with a search space of  10^429.
Homberger_0200_RC2_2_1 has 1 depots,  50 vehicles and  200 customers with a search space of  10^429.
Homberger_0400_C1_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of  10^978.
Homberger_0400_C2_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of  10^978.
Homberger_0400_R1_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of  10^978.
Homberger_0400_R2_4_1  has 1 depots, 100 vehicles and  400 customers with a search space of  10^978.
Homberger_0400_RC1_4_1 has 1 depots, 100 vehicles and  400 customers with a search space of  10^978.
Homberger_0400_RC2_4_1 has 1 depots, 100 vehicles and  400 customers with a search space of  10^978.
Homberger_0600_C1_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1571.
Homberger_0600_C2_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1571.
Homberger_0600_R1_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1571.
Homberger_0600_R2_6_1  has 1 depots, 150 vehicles and  600 customers with a search space of 10^1571.
Homberger_0600_RC1_6_1 has 1 depots, 150 vehicles and  600 customers with a search space of 10^1571.
Homberger_0600_RC2_6_1 has 1 depots, 150 vehicles and  600 customers with a search space of 10^1571.
Homberger_0800_C1_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2195.
Homberger_0800_C2_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2195.
Homberger_0800_R1_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2195.
Homberger_0800_R2_8_1  has 1 depots, 200 vehicles and  800 customers with a search space of 10^2195.
Homberger_0800_RC1_8_1 has 1 depots, 200 vehicles and  800 customers with a search space of 10^2195.
Homberger_0800_RC2_8_1 has 1 depots, 200 vehicles and  800 customers with a search space of 10^2195.
Homberger_1000_C110_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^2840.
Homberger_1000_C210_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^2840.
Homberger_1000_R110_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^2840.
Homberger_1000_R210_1  has 1 depots, 250 vehicles and 1000 customers with a search space of 10^2840.
Homberger_1000_RC110_1 has 1 depots, 250 vehicles and 1000 customers with a search space of 10^2840.
Homberger_1000_RC210_1 has 1 depots, 250 vehicles and 1000 customers with a search space of 10^2840.</screen>
				<section xml:id="vehicleRoutingDomainModel">
					<title>Domain model for Vehicle routing</title>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/vehicleRoutingClassDiagram.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>vehicleRoutingClassDiagram</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						The vehicle routing with time windows domain model makes heavy use of the shadow variable feature. This allows it to express its constraints more naturally, because properties such as <literal>arrivalTime</literal> and <literal>departureTime</literal>, are directly available on the domain model.
					</simpara>
					<formalpara>
						<title>Road Distances Instead of Air Distances</title>
						<para>
							In the real world, vehicles cannot follow a straight line from location to location: they have to use roads and highways. From a business point of view, this matters a lot:
						</para>
					</formalpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/vehicleRoutingDistanceType.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>vehicleRoutingDistanceType</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						For the optimization algorithm, this does not matter much, as long as the distance between two points can be looked up (and are preferably precalculated). The road cost does not even need to be a distance. It can also be travel time, fuel cost, or a weighted function of those. There are several technologies available to precalculate road costs, such as <link xlink:href="https://graphhopper.com/">GraphHopper</link> (embeddable, offline Java engine), <link xlink:href="http://open.mapquestapi.com/directions/#matrix">Open MapQuest</link> (web service) and <link xlink:href="https://developers.google.com/maps/documentation/webservices/client-library">Google Maps Client API</link> (web service).
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/integrationWithRealMaps.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>integrationWithRealMaps</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						There are also several technologies to render it, such as <link xlink:href="http://leafletjs.com">Leaflet</link> and <link xlink:href="https://developers.google.com/maps/">Google Maps for developers</link>.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/vehicleRoutingLeafletAndGoogleMaps.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>vehicleRoutingLeafletAndGoogleMaps</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						It is even possible to render the actual road routes with GraphHopper or Google Map Directions, but because of route overlaps on highways, it can become harder to see the standstill order:
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/vehicleRoutingGoogleMapsDirections.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>vehicleRoutingGoogleMapsDirections</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						Take special care that the road costs between two points use the same optimization criteria as the one used in OptaPlanner. For example, GraphHopper will by default return the fastest route, not the shortest route. Don’t use the km (or miles) distances of the fastest GPS routes to optimize the shortest trip in OptaPlanner: this leads to a suboptimal solution as shown below:
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/VehicleRouting/roadDistanceTriangleInequality.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>roadDistanceTriangleInequality</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						Contrary to popular belief, most users do not want the shortest route: they want the fastest route instead. They prefer highways over normal roads. They prefer normal roads over dirt roads. In the real world, the fastest and shortest route are rarely the same.
					</simpara>
				</section>
			</section>
			<section xml:id="ex-projectJobScheduling-ref">
				<title>Project job scheduling</title>
				<simpara>
					Schedule all jobs in time and execution mode to minimize project delays. Each job is part of a project. A job can be executed in different ways: each way is an execution mode that implies a different duration but also different resource usages. This is a form of flexible <emphasis>job shop scheduling</emphasis>.
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/ProjectJobScheduling/projectJobSchedulingUseCase.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>projectJobSchedulingUseCase</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Job precedence: a job can only start when all its predecessor jobs are finished.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Resource capacity: do not use more resources than available.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Resources are local (shared between jobs of the same project) or global (shared between all jobs)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Resources are renewable (capacity available per day) or nonrenewable (capacity available for all days)
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					Medium constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Total project delay: minimize the duration (makespan) of each project.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Total makespan: minimize the duration of the whole multi-project schedule.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The problem is defined by <link xlink:href="http://gent.cs.kuleuven.be/mista2013challenge/">the MISTA 2013 challenge</link>.
				</simpara>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>Schedule A-1  has  2 projects,  24 jobs,   64 execution modes,  7 resources and  150 resource requirements.
Schedule A-2  has  2 projects,  44 jobs,  124 execution modes,  7 resources and  420 resource requirements.
Schedule A-3  has  2 projects,  64 jobs,  184 execution modes,  7 resources and  630 resource requirements.
Schedule A-4  has  5 projects,  60 jobs,  160 execution modes, 16 resources and  390 resource requirements.
Schedule A-5  has  5 projects, 110 jobs,  310 execution modes, 16 resources and  900 resource requirements.
Schedule A-6  has  5 projects, 160 jobs,  460 execution modes, 16 resources and 1440 resource requirements.
Schedule A-7  has 10 projects, 120 jobs,  320 execution modes, 22 resources and  900 resource requirements.
Schedule A-8  has 10 projects, 220 jobs,  620 execution modes, 22 resources and 1860 resource requirements.
Schedule A-9  has 10 projects, 320 jobs,  920 execution modes, 31 resources and 2880 resource requirements.
Schedule A-10 has 10 projects, 320 jobs,  920 execution modes, 31 resources and 2970 resource requirements.
Schedule B-1  has 10 projects, 120 jobs,  320 execution modes, 31 resources and  900 resource requirements.
Schedule B-2  has 10 projects, 220 jobs,  620 execution modes, 22 resources and 1740 resource requirements.
Schedule B-3  has 10 projects, 320 jobs,  920 execution modes, 31 resources and 3060 resource requirements.
Schedule B-4  has 15 projects, 180 jobs,  480 execution modes, 46 resources and 1530 resource requirements.
Schedule B-5  has 15 projects, 330 jobs,  930 execution modes, 46 resources and 2760 resource requirements.
Schedule B-6  has 15 projects, 480 jobs, 1380 execution modes, 46 resources and 4500 resource requirements.
Schedule B-7  has 20 projects, 240 jobs,  640 execution modes, 61 resources and 1710 resource requirements.
Schedule B-8  has 20 projects, 440 jobs, 1240 execution modes, 42 resources and 3180 resource requirements.
Schedule B-9  has 20 projects, 640 jobs, 1840 execution modes, 61 resources and 5940 resource requirements.
Schedule B-10 has 20 projects, 460 jobs, 1300 execution modes, 42 resources and 4260 resource requirements.</screen>
					</para>
				</formalpara>
			</section>
			<section xml:id="ex-taskAssigning-ref">
				<title>Task assigning</title>
				<simpara>
					Assign each task to a spot in an employee’s queue. Each task has a duration which is affected by the employee’s affinity level with the task’s customer.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Skill: Each task requires one or more skills. The employee must possess all these skills.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft level 0 constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Critical tasks: Complete critical tasks first, sooner than major and minor tasks.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft level 1 constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Minimize makespan: Reduce the time to complete all tasks.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Start with the longest working employee first, then the second longest working employee and so forth, to create fairness and load balancing.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft level 2 constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Major tasks: Complete major tasks as soon as possible, sooner than minor tasks.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft level 3 constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Minor tasks: Complete minor tasks as soon as possible.
						</simpara>
					</listitem>
				</itemizedlist>
				<figure>
					<title>Value proposition</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/TaskAssigning/taskAssigningValueProposition.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>taskAssigningValueProposition</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>24tasks-8employees   has  24 tasks, 6 skills,  8 employees,   4 task types and  4 customers with a search space of   10^30.
50tasks-5employees   has  50 tasks, 5 skills,  5 employees,  10 task types and 10 customers with a search space of   10^69.
100tasks-5employees  has 100 tasks, 5 skills,  5 employees,  20 task types and 15 customers with a search space of  10^164.
500tasks-20employees has 500 tasks, 6 skills, 20 employees, 100 task types and 60 customers with a search space of 10^1168.</screen>
					</para>
				</formalpara>
				<figure>
					<title>Domain model</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/TaskAssigning/taskAssigningClassDiagram.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>taskAssigningClassDiagram</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			<section xml:id="ex-examination-ref">
				<title>Exam timetabling (ITC 2007 track 1 - Examination)</title>
				<simpara>
					Schedule each exam into a period and into a room. Multiple exams can share the same room during the same period.
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/ExamTimetabling/examinationTimetablingUseCase.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>examinationTimetablingUseCase</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Exam conflict: Two exams that share students must not occur in the same period.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Room capacity: A room’s seating capacity must suffice at all times.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Period duration: A period’s duration must suffice for all of its exams.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Period related hard constraints (specified per dataset):
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Coincidence: Two specified exams must use the same period (but possibly another room).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Exclusion: Two specified exams must not use the same period.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									After: A specified exam must occur in a period after another specified exam’s period.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Room related hard constraints (specified per dataset):
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Exclusive: One specified exam should not have to share its room with any other exam.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints (each of which has a parametrized penalty):
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							The same student should not have two exams in a row.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The same student should not have two exams on the same day.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Period spread: Two exams that share students should be a number of periods apart.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Mixed durations: Two exams that share a room should not have different durations.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Front load: Large exams should be scheduled earlier in the schedule.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Period penalty (specified per dataset): Some periods have a penalty when used.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Room penalty (specified per dataset): Some rooms have a penalty when used.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					It uses large test data sets of real-life universities.
				</simpara>
				<simpara>
					The problem is defined by <link xlink:href="http://www.cs.qub.ac.uk/itc2007/examtrack/exam_track_index.htm">the International Timetabling Competition 2007 track 1</link>. Geoffrey De Smet finished 4th in that competition with a very early version of OptaPlanner. Many improvements have been made since then.
				</simpara>
				<formalpara xml:id="examinationProblemSize">
					<title>Problem Size</title>
					<para>
						
<screen>exam_comp_set1 has  7883 students,  607 exams, 54 periods,  7 rooms,  12 period constraints and  0 room constraints with a search space of 10^1564.
exam_comp_set2 has 12484 students,  870 exams, 40 periods, 49 rooms,  12 period constraints and  2 room constraints with a search space of 10^2864.
exam_comp_set3 has 16365 students,  934 exams, 36 periods, 48 rooms, 168 period constraints and 15 room constraints with a search space of 10^3023.
exam_comp_set4 has  4421 students,  273 exams, 21 periods,  1 rooms,  40 period constraints and  0 room constraints with a search space of  10^360.
exam_comp_set5 has  8719 students, 1018 exams, 42 periods,  3 rooms,  27 period constraints and  0 room constraints with a search space of 10^2138.
exam_comp_set6 has  7909 students,  242 exams, 16 periods,  8 rooms,  22 period constraints and  0 room constraints with a search space of  10^509.
exam_comp_set7 has 13795 students, 1096 exams, 80 periods, 15 rooms,  28 period constraints and  0 room constraints with a search space of 10^3374.
exam_comp_set8 has  7718 students,  598 exams, 80 periods,  8 rooms,  20 period constraints and  1 room constraints with a search space of 10^1678.</screen>
					</para>
				</formalpara>
				<section remap="_domain_model_for_exam_timetabling" xml:id="domain_model_for_exam_timetabling">
					<title>Domain model for exam timetabling</title>
					<simpara>
						The following diagram shows the main examination domain classes:
					</simpara>
					<figure>
						<title>Examination domain class diagram</title>
						<mediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/_images/UseCasesAndExamples/ExamTimetabling/examinationDomainDiagram.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>examinationDomainDiagram</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<simpara>
						Notice that we’ve split up the exam concept into an <literal>Exam</literal> class and a <literal>Topic</literal> class. The <literal>Exam</literal> instances change during solving (this is the planning entity class), when their period or room property changes. The <literal>Topic</literal>, <literal>Period</literal> and <literal>Room</literal> instances never change during solving (these are problem facts, just like some other classes).
					</simpara>
				</section>
			</section>
			<section xml:id="ex-nurseRostering-ref">
				<title>Nurse rostering (INRC 2010)</title>
				<simpara>
					For each shift, assign a nurse to work that shift.
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/NurseRostering/employeeShiftRosteringUseCase.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>employeeShiftRosteringUseCase</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">No unassigned shifts</emphasis> (built-in): Every shift need to be assigned to an employee.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Shift conflict</emphasis>: An employee can have only one shift per day.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Contract obligations. The business frequently violates these, so they decided to define these as soft constraints instead of hard constraints.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Minimum and maximum assignments</emphasis>: Each employee needs to work more than x shifts and less than y shifts (depending on their contract).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Minimum and maximum consecutive working days</emphasis>: Each employee needs to work between x and y days in a row (depending on their contract).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Minimum and maximum consecutive free days</emphasis>: Each employee needs to be free between x and y days in a row (depending on their contract).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Minimum and maximum consecutive working weekends</emphasis>: Each employee needs to work between x and y weekends in a row (depending on their contract).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Complete weekends</emphasis>: Each employee needs to work every day in a weekend or not at all.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Identical shift types during weekend</emphasis>: Each weekend shift for the same weekend of the same employee must be the same shift type.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Unwanted patterns</emphasis>: A combination of unwanted shift types in a row, for example a late shift followed by an early shift followed by a late shift.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Employee wishes:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<emphasis role="strong">Day on request</emphasis>: An employee wants to work on a specific day.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Day off request</emphasis>: An employee does not want to work on a specific day.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Shift on request</emphasis>: An employee wants to be assigned to a specific shift.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<emphasis role="strong">Shift off request</emphasis>: An employee does not want to be assigned to a specific shift.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">Alternative skill</emphasis>: An employee assigned to a skill should have a proficiency in every skill required by that shift.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The problem is defined by <link xlink:href="http://www.kuleuven-kortrijk.be/nrpcompetition">the International Nurse Rostering Competition 2010</link>.
				</simpara>
				<figure>
					<title>Value proposition</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/NurseRostering/employeeRosteringValueProposition.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>employeeRosteringValueProposition</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<formalpara>
					<title>Problem size</title>
					<para>
						There are three dataset types:
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Sprint: must be solved in seconds.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Medium: must be solved in minutes.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Long: must be solved in hours.
						</simpara>
					</listitem>
				</itemizedlist>
				
<screen>toy1          has 1 skills, 3 shiftTypes, 2 patterns, 1 contracts,  6 employees,  7 shiftDates,  35 shiftAssignments and   0 requests with a search space of   10^27.
toy2          has 1 skills, 3 shiftTypes, 3 patterns, 2 contracts, 20 employees, 28 shiftDates, 180 shiftAssignments and 140 requests with a search space of  10^234.

sprint01      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint02      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint03      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint04      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint05      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint06      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint07      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint08      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint09      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint10      has 1 skills, 4 shiftTypes, 3 patterns, 4 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_hint01 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_hint02 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_hint03 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late01 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late02 has 1 skills, 3 shiftTypes, 4 patterns, 3 contracts, 10 employees, 28 shiftDates, 144 shiftAssignments and 139 requests with a search space of  10^144.
sprint_late03 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 160 shiftAssignments and 150 requests with a search space of  10^160.
sprint_late04 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 160 shiftAssignments and 150 requests with a search space of  10^160.
sprint_late05 has 1 skills, 4 shiftTypes, 8 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late06 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late07 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.
sprint_late08 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and   0 requests with a search space of  10^152.
sprint_late09 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and   0 requests with a search space of  10^152.
sprint_late10 has 1 skills, 4 shiftTypes, 0 patterns, 3 contracts, 10 employees, 28 shiftDates, 152 shiftAssignments and 150 requests with a search space of  10^152.

medium01      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium02      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium03      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium04      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium05      has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 31 employees, 28 shiftDates, 608 shiftAssignments and 403 requests with a search space of  10^906.
medium_hint01 has 1 skills, 4 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_hint02 has 1 skills, 4 shiftTypes, 7 patterns, 3 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_hint03 has 1 skills, 4 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_late01 has 1 skills, 4 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 424 shiftAssignments and 390 requests with a search space of  10^626.
medium_late02 has 1 skills, 4 shiftTypes, 7 patterns, 3 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_late03 has 1 skills, 4 shiftTypes, 0 patterns, 4 contracts, 30 employees, 28 shiftDates, 428 shiftAssignments and 390 requests with a search space of  10^632.
medium_late04 has 1 skills, 4 shiftTypes, 7 patterns, 3 contracts, 30 employees, 28 shiftDates, 416 shiftAssignments and 390 requests with a search space of  10^614.
medium_late05 has 2 skills, 5 shiftTypes, 7 patterns, 4 contracts, 30 employees, 28 shiftDates, 452 shiftAssignments and 390 requests with a search space of  10^667.

long01        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long02        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long03        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long04        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long05        has 2 skills, 5 shiftTypes, 3 patterns, 3 contracts, 49 employees, 28 shiftDates, 740 shiftAssignments and 735 requests with a search space of 10^1250.
long_hint01   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.
long_hint02   has 2 skills, 5 shiftTypes, 7 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.
long_hint03   has 2 skills, 5 shiftTypes, 7 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.
long_late01   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late02   has 2 skills, 5 shiftTypes, 9 patterns, 4 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late03   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late04   has 2 skills, 5 shiftTypes, 9 patterns, 4 contracts, 50 employees, 28 shiftDates, 752 shiftAssignments and   0 requests with a search space of 10^1277.
long_late05   has 2 skills, 5 shiftTypes, 9 patterns, 3 contracts, 50 employees, 28 shiftDates, 740 shiftAssignments and   0 requests with a search space of 10^1257.</screen>
				<figure>
					<title>Domain model</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/NurseRostering/nurseRosteringClassDiagram.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>nurseRosteringClassDiagram</phrase>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			<section xml:id="ex-travelingTournament-ref">
				<title>Traveling tournament problem (TTP)</title>
				<simpara>
					Schedule matches between <emphasis>n</emphasis> number of teams.
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata align="center" fileref="images/_images/UseCasesAndExamples/TravellingTournament/travelingTournamentUseCase.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>travelingTournamentUseCase</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Each team plays twice against every other team: once home and once away.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Each team has exactly one match on each timeslot.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							No team must have more than three consecutive home or three consecutive away matches.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							No repeaters: no two consecutive matches of the same two opposing teams.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Minimize the total distance traveled by all teams.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The problem is defined on <link xlink:href="http://mat.tepper.cmu.edu/TOURN/">Michael Trick’s website (which contains the world records too)</link>.
				</simpara>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>1-nl04     has  6 days,  4 teams and   12 matches with a search space of    10^5.
1-nl06     has 10 days,  6 teams and   30 matches with a search space of   10^19.
1-nl08     has 14 days,  8 teams and   56 matches with a search space of   10^43.
1-nl10     has 18 days, 10 teams and   90 matches with a search space of   10^79.
1-nl12     has 22 days, 12 teams and  132 matches with a search space of  10^126.
1-nl14     has 26 days, 14 teams and  182 matches with a search space of  10^186.
1-nl16     has 30 days, 16 teams and  240 matches with a search space of  10^259.
2-bra24    has 46 days, 24 teams and  552 matches with a search space of  10^692.
3-nfl16    has 30 days, 16 teams and  240 matches with a search space of  10^259.
3-nfl18    has 34 days, 18 teams and  306 matches with a search space of  10^346.
3-nfl20    has 38 days, 20 teams and  380 matches with a search space of  10^447.
3-nfl22    has 42 days, 22 teams and  462 matches with a search space of  10^562.
3-nfl24    has 46 days, 24 teams and  552 matches with a search space of  10^692.
3-nfl26    has 50 days, 26 teams and  650 matches with a search space of  10^838.
3-nfl28    has 54 days, 28 teams and  756 matches with a search space of  10^999.
3-nfl30    has 58 days, 30 teams and  870 matches with a search space of 10^1175.
3-nfl32    has 62 days, 32 teams and  992 matches with a search space of 10^1367.
4-super04  has  6 days,  4 teams and   12 matches with a search space of    10^5.
4-super06  has 10 days,  6 teams and   30 matches with a search space of   10^19.
4-super08  has 14 days,  8 teams and   56 matches with a search space of   10^43.
4-super10  has 18 days, 10 teams and   90 matches with a search space of   10^79.
4-super12  has 22 days, 12 teams and  132 matches with a search space of  10^126.
4-super14  has 26 days, 14 teams and  182 matches with a search space of  10^186.
5-galaxy04 has  6 days,  4 teams and   12 matches with a search space of    10^5.
5-galaxy06 has 10 days,  6 teams and   30 matches with a search space of   10^19.
5-galaxy08 has 14 days,  8 teams and   56 matches with a search space of   10^43.
5-galaxy10 has 18 days, 10 teams and   90 matches with a search space of   10^79.
5-galaxy12 has 22 days, 12 teams and  132 matches with a search space of  10^126.
5-galaxy14 has 26 days, 14 teams and  182 matches with a search space of  10^186.
5-galaxy16 has 30 days, 16 teams and  240 matches with a search space of  10^259.
5-galaxy18 has 34 days, 18 teams and  306 matches with a search space of  10^346.
5-galaxy20 has 38 days, 20 teams and  380 matches with a search space of  10^447.
5-galaxy22 has 42 days, 22 teams and  462 matches with a search space of  10^562.
5-galaxy24 has 46 days, 24 teams and  552 matches with a search space of  10^692.
5-galaxy26 has 50 days, 26 teams and  650 matches with a search space of  10^838.
5-galaxy28 has 54 days, 28 teams and  756 matches with a search space of  10^999.
5-galaxy30 has 58 days, 30 teams and  870 matches with a search space of 10^1175.
5-galaxy32 has 62 days, 32 teams and  992 matches with a search space of 10^1367.
5-galaxy34 has 66 days, 34 teams and 1122 matches with a search space of 10^1576.
5-galaxy36 has 70 days, 36 teams and 1260 matches with a search space of 10^1801.
5-galaxy38 has 74 days, 38 teams and 1406 matches with a search space of 10^2042.
5-galaxy40 has 78 days, 40 teams and 1560 matches with a search space of 10^2301.</screen>
					</para>
				</formalpara>
			</section>
			<section xml:id="ex-cheapTimeScheduling-ref">
				<title>Cheap time scheduling</title>
				<simpara>
					Schedule all tasks in time and on a machine to minimize power cost. Power prices differ in time. This is a form of <emphasis>job shop scheduling</emphasis>.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Start time limits: Each task must start between its earliest start and latest start limit.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Maximum capacity: The maximum capacity for each resource for each machine must not be exceeded.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Startup and shutdown: Each machine must be active in the periods during which it has assigned tasks. Between tasks it is allowed to be idle to avoid startup and shutdown costs.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Medium constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Power cost: Minimize the total power cost of the whole schedule.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Machine power cost: Each active or idle machine consumes power, which infers a power cost (depending on the power price during that time).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Task power cost: Each task consumes power too, which infers a power cost (depending on the power price during its time).
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Machine startup and shutdown cost: Every time a machine starts up or shuts down, an extra cost is incurred.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints (addendum to the original problem definition):
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Start early: Prefer starting a task sooner rather than later.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The problem is defined by <link xlink:href="https://web.archive.org/web/20180318013828/http://iconchallenge.insight-centre.org/">the ICON challenge</link>.
				</simpara>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>sample01   has 3 resources,   2 machines, 288 periods and   25 tasks with a search space of    10^53.
sample02   has 3 resources,   2 machines, 288 periods and   50 tasks with a search space of   10^114.
sample03   has 3 resources,   2 machines, 288 periods and  100 tasks with a search space of   10^226.
sample04   has 3 resources,   5 machines, 288 periods and  100 tasks with a search space of   10^266.
sample05   has 3 resources,   2 machines, 288 periods and  250 tasks with a search space of   10^584.
sample06   has 3 resources,   5 machines, 288 periods and  250 tasks with a search space of   10^673.
sample07   has 3 resources,   2 machines, 288 periods and 1000 tasks with a search space of  10^2388.
sample08   has 3 resources,   5 machines, 288 periods and 1000 tasks with a search space of  10^2748.
sample09   has 4 resources,  20 machines, 288 periods and 2000 tasks with a search space of  10^6668.
instance00 has 1 resources,  10 machines, 288 periods and  200 tasks with a search space of   10^595.
instance01 has 1 resources,  10 machines, 288 periods and  200 tasks with a search space of   10^599.
instance02 has 1 resources,  10 machines, 288 periods and  200 tasks with a search space of   10^599.
instance03 has 1 resources,  10 machines, 288 periods and  200 tasks with a search space of   10^591.
instance04 has 1 resources,  10 machines, 288 periods and  200 tasks with a search space of   10^590.
instance05 has 2 resources,  25 machines, 288 periods and  200 tasks with a search space of   10^667.
instance06 has 2 resources,  25 machines, 288 periods and  200 tasks with a search space of   10^660.
instance07 has 2 resources,  25 machines, 288 periods and  200 tasks with a search space of   10^662.
instance08 has 2 resources,  25 machines, 288 periods and  200 tasks with a search space of   10^651.
instance09 has 2 resources,  25 machines, 288 periods and  200 tasks with a search space of   10^659.
instance10 has 2 resources,  20 machines, 288 periods and  500 tasks with a search space of  10^1657.
instance11 has 2 resources,  20 machines, 288 periods and  500 tasks with a search space of  10^1644.
instance12 has 2 resources,  20 machines, 288 periods and  500 tasks with a search space of  10^1637.
instance13 has 2 resources,  20 machines, 288 periods and  500 tasks with a search space of  10^1659.
instance14 has 2 resources,  20 machines, 288 periods and  500 tasks with a search space of  10^1643.
instance15 has 3 resources,  40 machines, 288 periods and  500 tasks with a search space of  10^1782.
instance16 has 3 resources,  40 machines, 288 periods and  500 tasks with a search space of  10^1778.
instance17 has 3 resources,  40 machines, 288 periods and  500 tasks with a search space of  10^1764.
instance18 has 3 resources,  40 machines, 288 periods and  500 tasks with a search space of  10^1769.
instance19 has 3 resources,  40 machines, 288 periods and  500 tasks with a search space of  10^1778.
instance20 has 3 resources,  50 machines, 288 periods and 1000 tasks with a search space of  10^3689.
instance21 has 3 resources,  50 machines, 288 periods and 1000 tasks with a search space of  10^3678.
instance22 has 3 resources,  50 machines, 288 periods and 1000 tasks with a search space of  10^3706.
instance23 has 3 resources,  50 machines, 288 periods and 1000 tasks with a search space of  10^3676.
instance24 has 3 resources,  50 machines, 288 periods and 1000 tasks with a search space of  10^3681.
instance25 has 3 resources,  60 machines, 288 periods and 1000 tasks with a search space of  10^3774.
instance26 has 3 resources,  60 machines, 288 periods and 1000 tasks with a search space of  10^3737.
instance27 has 3 resources,  60 machines, 288 periods and 1000 tasks with a search space of  10^3744.
instance28 has 3 resources,  60 machines, 288 periods and 1000 tasks with a search space of  10^3731.
instance29 has 3 resources,  60 machines, 288 periods and 1000 tasks with a search space of  10^3746.
instance30 has 4 resources,  70 machines, 288 periods and 2000 tasks with a search space of  10^7718.
instance31 has 4 resources,  70 machines, 288 periods and 2000 tasks with a search space of  10^7740.
instance32 has 4 resources,  70 machines, 288 periods and 2000 tasks with a search space of  10^7686.
instance33 has 4 resources,  70 machines, 288 periods and 2000 tasks with a search space of  10^7672.
instance34 has 4 resources,  70 machines, 288 periods and 2000 tasks with a search space of  10^7695.
instance35 has 4 resources,  80 machines, 288 periods and 2000 tasks with a search space of  10^7807.
instance36 has 4 resources,  80 machines, 288 periods and 2000 tasks with a search space of  10^7814.
instance37 has 4 resources,  80 machines, 288 periods and 2000 tasks with a search space of  10^7764.
instance38 has 4 resources,  80 machines, 288 periods and 2000 tasks with a search space of  10^7736.
instance39 has 4 resources,  80 machines, 288 periods and 2000 tasks with a search space of  10^7783.
instance40 has 4 resources,  90 machines, 288 periods and 4000 tasks with a search space of 10^15976.
instance41 has 4 resources,  90 machines, 288 periods and 4000 tasks with a search space of 10^15935.
instance42 has 4 resources,  90 machines, 288 periods and 4000 tasks with a search space of 10^15887.
instance43 has 4 resources,  90 machines, 288 periods and 4000 tasks with a search space of 10^15896.
instance44 has 4 resources,  90 machines, 288 periods and 4000 tasks with a search space of 10^15885.
instance45 has 4 resources, 100 machines, 288 periods and 5000 tasks with a search space of 10^20173.
instance46 has 4 resources, 100 machines, 288 periods and 5000 tasks with a search space of 10^20132.
instance47 has 4 resources, 100 machines, 288 periods and 5000 tasks with a search space of 10^20126.
instance48 has 4 resources, 100 machines, 288 periods and 5000 tasks with a search space of 10^20110.
instance49 has 4 resources, 100 machines, 288 periods and 5000 tasks with a search space of 10^20078.</screen>
					</para>
				</formalpara>
			</section>
			<section xml:id="ex-investment-ref">
				<title>Investment asset class allocation (Portfolio Optimization)</title>
				<simpara>
					Decide the relative quantity to invest in each asset class.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Risk maximum: the total standard deviation must not be higher than the standard deviation maximum.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Total standard deviation calculation takes asset class correlations into account by applying <link xlink:href="https://en.wikipedia.org/wiki/Modern_portfolio_theory">Markowitz Portfolio Theory</link>.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Region maximum: Each region has a quantity maximum.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Sector maximum: Each sector has a quantity maximum.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Maximize expected return.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>de_smet_1 has 1 regions, 3 sectors and 11 asset classes with a search space of 10^4.
irrinki_1 has 2 regions, 3 sectors and 6 asset classes with a search space of 10^3.</screen>
					</para>
				</formalpara>
				<simpara>
					Larger datasets have not been created or tested yet, but should not pose a problem. A good source of data is <link xlink:href="https://www.portfoliovisualizer.com/asset-correlations">this Asset Correlation website</link>.
				</simpara>
			</section>
			<section xml:id="ex-conferenceScheduling-ref">
				<title>Conference scheduling</title>
				<simpara>
					Assign each conference talk to a timeslot and a room. Timeslots can overlap. Read and write to and from an <literal>*.xlsx</literal> file that can be edited with LibreOffice or Excel.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Talk type of timeslot: The type of a talk must match the timeslot’s talk type.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Room unavailable timeslots: A talk’s room must be available during the talk’s timeslot.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Room conflict: Two talks can’t use the same room during overlapping timeslots.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Speaker unavailable timeslots: Every talk’s speaker must be available during the talk’s timeslot.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Speaker conflict: Two talks can’t share a speaker during overlapping timeslots.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Generic purpose timeslot and room tags:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Speaker required timeslot tag: If a speaker has a required timeslot tag, then all of his or her talks must be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Speaker prohibited timeslot tag: If a speaker has a prohibited timeslot tag, then all of his or her talks cannot be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk required timeslot tag: If a talk has a required timeslot tag, then it must be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk prohibited timeslot tag: If a talk has a prohibited timeslot tag, then it cannot be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Speaker required room tag: If a speaker has a required room tag, then all of his or her talks must be assigned to a room with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Speaker prohibited room tag: If a speaker has a prohibited room tag, then all of his or her talks cannot be assigned to a room with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk required room tag: If a talk has a required room tag, then it must be assigned to a room with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk prohibited room tag: If a talk has a prohibited room tag, then it cannot be assigned to a room with that tag.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Talk mutually-exclusive-talks tag: Talks that share such a tag must not be scheduled in overlapping timeslots.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Talk prerequisite talks: A talk must be scheduled after all its prerequisite talks.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Theme track conflict: Minimize the number of talks that share a theme tag during overlapping timeslots.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Sector conflict: Minimize the number of talks that share a same sector tag during overlapping timeslots.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Content audience level flow violation: For every content tag, schedule the introductory talks before the advanced talks.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Audience level diversity: For every timeslot, maximize the number of talks with a different audience level.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Language diversity: For every timeslot, maximize the number of talks with a different language.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Generic purpose timeslot and room tags:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Speaker preferred timeslot tag: If a speaker has a preferred timeslot tag, then all of his or her talks should be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Speaker undesired timeslot tag: If a speaker has an undesired timeslot tag, then none of his or her talks should be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk preferred timeslot tag: If a talk has a preferred timeslot tag, then it should be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk undesired timeslot tag: If a talk has an undesired timeslot tag, then it should not be assigned to a timeslot with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Speaker preferred room tag: If a speaker has a preferred room tag, then all of his or her talks should be assigned to a room with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Speaker undesired room tag: If a speaker has an undesired room tag, then none of his or her talks should be assigned to a room with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk preferred room tag: If a talk has a preferred room tag, then it should be assigned to a room with that tag.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Talk undesired room tag: If a talk has an undesired room tag, then it should not be assigned to a room with that tag.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Same day talks: All talks that share a theme tag or content tag should be scheduled in the minimum number of days (ideally in the same day).
						</simpara>
					</listitem>
				</itemizedlist>
				<figure>
					<title>Value proposition</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/UseCasesAndExamples/ConferenceScheduling/conferenceSchedulingValueProposition.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>conferenceSchedulingValueProposition</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>18talks-6timeslots-5rooms    has  18 talks,  6 timeslots and  5 rooms with a search space of  10^26.
36talks-12timeslots-5rooms   has  36 talks, 12 timeslots and  5 rooms with a search space of  10^64.
72talks-12timeslots-10rooms  has  72 talks, 12 timeslots and 10 rooms with a search space of 10^149.
108talks-18timeslots-10rooms has 108 talks, 18 timeslots and 10 rooms with a search space of 10^243.
216talks-18timeslots-20rooms has 216 talks, 18 timeslots and 20 rooms with a search space of 10^552.</screen>
					</para>
				</formalpara>
			</section>
			<section xml:id="ex-rockTour-ref">
				<title>Rock tour</title>
				<simpara>
					Drive the rock bank bus from show to show, but schedule shows only on available days.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Schedule every required show.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Schedule as many shows as possible.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Medium constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Maximize revenue opportunity.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Minimize driving time.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Visit sooner than later.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Avoid long driving times.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>47shows has 47 shows with a search space of 10^59.</screen>
					</para>
				</formalpara>
			</section>
			<section xml:id="ex-flightCrewScheduling-ref">
				<title>Flight crew scheduling</title>
				<simpara>
					Assign flights to pilots and flight attendants.
				</simpara>
				<simpara>
					Hard constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Required skill: each flight assignment has a required skill. For example, flight AB0001 requires 2 pilots and 3 flight attendants.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Flight conflict: each employee can only attend one flight at the same time
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Transfer between two flights: between two flights, an employee must be able to transfer from the arrival airport to the departure airport. For example, Ann arrives in Brussels at 10:00 and departs in Amsterdam at 15:00.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Employee unavailability: the employee must be available on the day of the flight. For example, Ann is on PTO on 1-Feb.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Soft constraints:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							First assignment departing from home
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Last assignment arriving at home
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Load balance flight duration total per employee
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Problem size</title>
					<para>
						
<screen>175flights-7days-Europe  has 2 skills, 50 airports, 150 employees, 175 flights and  875 flight assignments with a search space of  10^1904.
700flights-28days-Europe has 2 skills, 50 airports, 150 employees, 700 flights and 3500 flight assignments with a search space of  10^7616.
875flights-7days-Europe  has 2 skills, 50 airports, 750 employees, 875 flights and 4375 flight assignments with a search space of 10^12578.
175flights-7days-US      has 2 skills, 48 airports, 150 employees, 175 flights and  875 flight assignments with a search space of  10^1904.</screen>
					</para>
				</formalpara>
			</section>
		</chapter>
		<chapter xml:id="examples-download-proc">
			<title>Downloading Red Hat build of OptaPlanner examples</title>
			<simpara>
				You can download the Red Hat build of OptaPlanner examples as a part of the Red Hat Decision Manager add-ons package available on the Red Hat Customer Portal.
			</simpara>
			<orderedlist numeration="arabic">
				<title>Procedure</title>
				<listitem>
					<simpara>
						Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Product: Decision Manager
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Version: 7.13
							</simpara>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<simpara>
						Download <emphasis role="strong">Red Hat Decision Manager 7.13 Add Ons</emphasis>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Extract the <literal>rhdm-7.13.0-add-ons.zip</literal> file. The extracted <literal>add-ons</literal> folder contains the <literal>rhdm-7.13.0-planner-engine.zip</literal> file.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Extract the <literal>rhdm-7.13.0-planner-engine.zip</literal> file.
					</simpara>
				</listitem>
			</orderedlist>
			<formalpara>
				<title>Result</title>
				<para>
					The extracted <literal>rhdm-7.13.0-planner-engine</literal> directory contains example source code under the following subdirectories:
				</para>
			</formalpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>examples/sources/src/main/java/org/optaplanner/examples</literal>
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>examples/sources/src/main/resources/org/optaplanner/examples</literal>
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="optimizer-running-the-examples-proc">
				<title>Running OptaPlanner examples</title>
				<simpara>
					Red Hat build of OptaPlanner includes several examples that demonstrate a variety of planning use cases. Download and use the examples to explore different types of planning solutions.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have downloaded and extracted the examples as described in <xref linkend="examples-download-proc" />.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							To run the examples, in the <literal>rhdm-7.13.0-planner-engine/examples</literal> directory enter one of the following commands:
						</simpara>
						<simpara>
							Linux or Mac:
						</simpara>
						
<screen>$ ./runExamples.sh</screen>
						<simpara>
							Windows:
						</simpara>
						
<screen>$ runExamples.bat</screen>
						<simpara>
							The OptaPlanner Examples window opens.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select an example to run that example.
						</simpara>
					</listitem>
				</orderedlist>
				<note>
					<simpara>
						Red Hat build of OptaPlanner has no GUI dependencies. It runs just as well on a server or a mobile JVM as it does on the desktop.
					</simpara>
				</note>
			</section>
			<section xml:id="optimizer-running-the-examples-in-an-IDE-proc">
				<title>Running the Red Hat build of OptaPlanner examples in an IDE (IntelliJ, Eclipse, or Netbeans)</title>
				<simpara>
					If you use an integrated development environment (IDE), such as IntelliJ, Eclipse, or Netbeans, you can run your downloaded OptaPlanner examples within your development environment.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have downloaded and extracted the OptaPlanner examples as described in <xref linkend="examples-download-proc" />.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open the OptaPlanner examples as a new project:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									For IntelliJ or Netbeans, open <literal>examples/sources/pom.xml</literal> as the new project. The Maven integration guides you through the rest of the installation. Skip the rest of the steps in this procedure.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									For Eclipse, open a new project for the <literal>/examples/binaries</literal> directory, located under the <literal>rhdm-7.13.0-planner-engine</literal> directory.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Add all the JAR files that are in the <literal>binaries</literal> directory to the classpath, except for the <literal>examples/binaries/optaplanner-examples-7.67.0.Final-redhat-00006.jar</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add the Java source directory <literal>src/main/java</literal> and the Java resources directory <literal>src/main/resources</literal>, located under the <literal>rhdm-7.13.0-planner-engine/examples/sources/</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create a run configuration:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Main class: <literal>org.optaplanner.examples.app.OptaPlannerExamplesApp</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									VM parameters (optional): <literal>-Xmx512M -server -Dorg.optaplanner.examples.dataDir=examples/sources/data</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Working directory: <literal>examples/sources</literal>
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Run the run configuration.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="workbench-er-tutorial-con">
			<title>Getting started with OptaPlanner in Business Central: An employee rostering example</title>
			<simpara>
				You can build and deploy the <literal>employee-rostering</literal> sample project in Business Central. The project demonstrates how to create each of the Business Central assets required to solve the shift rostering planning problem and use Red Hat build of OptaPlanner to find the best possible solution.
			</simpara>
			<simpara>
				You can deploy the preconfigured <literal>employee-rostering</literal> project in Business Central. Alternatively, you can create the project yourself using Business Central.
			</simpara>
			<note>
				<simpara>
					The <literal>employee-rostering</literal> sample project in Business Central does not include a data set. You must supply a data set in XML format using a REST API call.
				</simpara>
			</note>
			<section xml:id="wb-employee-rostering-example-deploying-in-central-proc">
				<title>Deploying the employee rostering sample project in Business Central</title>
				<simpara>
					Business Central includes a number of sample projects that you can use to get familiar with the product and its features. The employee rostering sample project is designed and created to demonstrate the shift rostering use case for Red Hat build of OptaPlanner. Use the following procedure to deploy and run the employee rostering sample in Business Central.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							Red Hat Decision Manager has been downloaded and installed. For installation options, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/installing_and_configuring_red_hat_decision_manager#assembly-planning"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You have started Red Hat Decision Manager, as described the installation documentation, and you are logged in to Business Central as a user with <literal>admin</literal> permissions.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							In the preconfigured <literal>MySpace</literal> space, click <emphasis role="strong">Try Samples</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">employee-rostering</emphasis> from the list of sample projects and click <emphasis role="strong">Ok</emphasis> in the upper-right corner to import the project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							After the asset list has complied, click <emphasis role="strong">Build &amp; Deploy</emphasis> to deploy the employee rostering example.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					The rest of this document explains each of the project assets and their configuration.
				</simpara>
			</section>
			<section xml:id="wb-employee-rostering-example-recreate-con">
				<title>Re-creating the employee rostering sample project</title>
				<simpara>
					The employee rostering sample project is a preconfigured project available in Business Central. You can learn about how to deploy this project in <xref linkend="wb-employee-rostering-example-deploying-in-central-proc" />.
				</simpara>
				<simpara>
					You can create the employee rostering example "from scratch". You can use the workflow in this example to create a similar project of your own in Business Central.
				</simpara>
				<section xml:id="wb-employee-rostering-example-setup-proc">
					<title>Setting up the employee rostering project</title>
					<simpara>
						To start developing a solver in Business Central, you must set up the project.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								Red Hat Decision Manager has been downloaded and installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You have deployed Business Central and logged in with a user that has the <literal>admin</literal> role.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Create a new project in Business Central by clicking <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> → <emphasis role="strong">Add Project</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Add Project</emphasis> window, fill out the following fields:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Name</emphasis>: <literal>employee-rostering</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Description</emphasis>(optional): Employee rostering problem optimization using OptaPlanner. Assigns employees to shifts based on their skill.
									</simpara>
								</listitem>
							</itemizedlist>
							<simpara>
								Optional: Click <emphasis role="strong">Configure Advanced Options</emphasis> to populate the <literal>Group ID</literal>, <literal>Artifact ID</literal>, and <literal>Version</literal> information.
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">Group ID</emphasis>: <literal>employeerostering</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Artifact ID</emphasis>: <literal>employeerostering</literal>
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Version</emphasis>: <literal>1.0.0-SNAPSHOT</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Add</emphasis> to add the project to the Business Central project repository.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="wb-employee-rostering-facts-vs-entities-con">
					<title>Problem facts and planning entities</title>
					<simpara>
						Each of the domain classes in the employee rostering planning problem is categorized as one of the following:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								An unrelated class: not used by any of the score constraints. From a planning standpoint, this data is obsolete.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A <emphasis>problem fact</emphasis> class: used by the score constraints, but does not change during planning (as long as the problem stays the same), for example, <literal>Shift</literal> and <literal>Employee</literal>. All the properties of a problem fact class are problem properties.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A <emphasis>planning entity</emphasis> class: used by the score constraints and changes during planning, for example, <literal>ShiftAssignment</literal>. The properties that change during planning are <emphasis>planning variables</emphasis>. The other properties are problem properties.
							</simpara>
							<simpara>
								Ask yourself the following questions:
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis>What class changes during planning?</emphasis>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<emphasis>Which class has variables that I want the <literal>Solver</literal> to change?</emphasis>
							</simpara>
							<simpara>
								That class is a planning entity.
							</simpara>
							<simpara>
								A planning entity class needs to be annotated with the <literal>@PlanningEntity</literal> annotation, or defined in Business Central using the Red Hat build of OptaPlanner dock in the domain designer.
							</simpara>
							<simpara>
								Each planning entity class has one or more <emphasis>planning variables</emphasis>, and must also have one or more defining properties.
							</simpara>
							<simpara>
								Most use cases have only one planning entity class, and only one planning variable per planning entity class.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="wb-employee-rostering-data-model-proc">
					<title>Creating the data model for the employee rostering project</title>
					<simpara>
						Use this section to create the data objects required to run the employee rostering sample project in Business Central.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have completed the project setup described in <xref linkend="wb-employee-rostering-example-setup-proc" />.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								With your new project, either click <emphasis role="strong">Data Object</emphasis> in the project perspective, or click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">Data Object</emphasis> to create a new data object.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Name the first data object <literal>Timeslot</literal>, and select <literal>employeerostering.employeerostering</literal> as the <emphasis role="strong">Package</emphasis>.
							</simpara>
							<simpara>
								Click <emphasis role="strong">Ok</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Data Objects</emphasis> perspective, click <emphasis role="strong">+add field</emphasis> to add fields to the <literal>Timeslot</literal> data object.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">id</emphasis> field, type <literal>endTime</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the drop-down menu next to <emphasis role="strong">Type</emphasis> and select <literal>LocalDateTime</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Create and continue</emphasis> to add another field.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add another field with the <emphasis role="strong">id</emphasis> <literal>startTime</literal> and <emphasis role="strong">Type</emphasis> <literal>LocalDateTime</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Create</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Save</emphasis> in the upper-right corner to save the <literal>Timeslot</literal> data object.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the <emphasis role="strong">x</emphasis> in the upper-right corner to close the <emphasis role="strong">Data Objects</emphasis> perspective and return to the <emphasis role="strong">Assets</emphasis> menu.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Using the previous steps, create the following data objects and their attributes:
							</simpara>
							<table colsep="1" frame="all" rowsep="1">
								<title>Skill</title>
								<tgroup cols="2">
									<colspec colname="col_1" colwidth="50*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">id</entry>
											<entry align="left" valign="top">Type</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>name</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>String</literal>
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<table colsep="1" frame="all" rowsep="1">
								<title>Employee</title>
								<tgroup cols="2">
									<colspec colname="col_1" colwidth="50*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">id</entry>
											<entry align="left" valign="top">Type</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>name</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>String</literal>
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>skills</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>employeerostering.employeerostering.Skill[List]</literal>
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<table colsep="1" frame="all" rowsep="1">
								<title>Shift</title>
								<tgroup cols="2">
									<colspec colname="col_1" colwidth="50*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">id</entry>
											<entry align="left" valign="top">Type</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>requiredSkill</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>employeerostering.employeerostering.Skill</literal>
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>timeslot</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>employeerostering.employeerostering.Timeslot</literal>
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<table colsep="1" frame="all" rowsep="1">
								<title>DayOffRequest</title>
								<tgroup cols="2">
									<colspec colname="col_1" colwidth="50*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">id</entry>
											<entry align="left" valign="top">Type</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>date</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>LocalDate</literal>
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>employee</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>employeerostering.employeerostering.Employee</literal>
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
							<table colsep="1" frame="all" rowsep="1">
								<title>ShiftAssignment</title>
								<tgroup cols="2">
									<colspec colname="col_1" colwidth="50*"></colspec>
									<colspec colname="col_2" colwidth="50*"></colspec>
									<thead>
										<row>
											<entry align="left" valign="top">id</entry>
											<entry align="left" valign="top">Type</entry>
										</row>
									</thead>
									<tbody>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>employee</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>employeerostering.employeerostering.Employee</literal>
											</simpara>
											</entry>
										</row>
										<row>
											<entry align="left" valign="top">
											<simpara>
												<literal>shift</literal>
											</simpara>
											</entry>
											<entry align="left" valign="top">
											<simpara>
												<literal>employeerostering.employeerostering.Shift</literal>
											</simpara>
											</entry>
										</row>
									</tbody>
								</tgroup>
							</table>
						</listitem>
					</orderedlist>
					<simpara>
						For more examples of creating data objects, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/getting_started_with_red_hat_decision_manager#assembly-getting-started-decision-services"><emphasis>Getting started with decision services</emphasis></link>.
					</simpara>
					<section xml:id="wb-employee-rostering-planning-entity-proc">
						<title>Creating the employee roster planning entity</title>
						<simpara>
							In order to solve the employee rostering planning problem, you must create a planning entity and a solver. The planning entity is defined in the domain designer using the attributes available in the Red Hat build of OptaPlanner dock.
						</simpara>
						<simpara>
							Use the following procedure to define the <literal>ShiftAssignment</literal> data object as the planning entity for the employee rostering example.
						</simpara>
						<itemizedlist>
							<title>Prerequisites</title>
							<listitem>
								<simpara>
									You have created the relevant data objects and planning entity required to run the employee rostering example by completing the procedures in <xref linkend="wb-employee-rostering-data-model-proc" />.
								</simpara>
							</listitem>
						</itemizedlist>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									From the project <emphasis role="strong">Assets</emphasis> menu, open the <literal>ShiftAssignment</literal> data object.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the <emphasis role="strong">Data Objects</emphasis> perspective, open the OptaPlanner dock by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/optimizer-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>OptaPlanner icon</phrase>
										</textobject>
									</inlinemediaobject>
									 on the right.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Planning Entity</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <literal>employee</literal> from the list of fields under the <literal>ShiftAssignment</literal> data object.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the OptaPlanner dock, select <emphasis role="strong">Planning Variable</emphasis>.
								</simpara>
								<simpara>
									In the <emphasis role="strong">Value Range Id</emphasis> input field, type <literal>employeeRange</literal>. This adds the <literal>@ValueRangeProvider</literal> annotation to the planning entity, which you can view by clicking the <literal>Source</literal> tab in the designer.
								</simpara>
								<simpara>
									The value range of a planning variable is defined with the <literal>@ValueRangeProvider</literal> annotation. A <literal>@ValueRangeProvider</literal> annotation always has a property <literal>id</literal>, which is referenced by the <literal>@PlanningVariable</literal> property <literal>valueRangeProviderRefs</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Close the dock and click <emphasis role="strong">Save</emphasis> to save the data object.
								</simpara>
							</listitem>
						</orderedlist>
					</section>
					<section xml:id="wb-employee-rostering-planning-solution-proc">
						<title>Creating the employee roster planning solution</title>
						<simpara>
							The employee roster problem relies on a defined planning solution. The planning solution is defined in the domain designer using the attributes available in the Red Hat build of OptaPlanner dock.
						</simpara>
						<itemizedlist>
							<title>Prerequisites</title>
							<listitem>
								<simpara>
									You have created the relevant data objects and planning entity required to run the employee rostering example by completing the procedures in <xref linkend="wb-employee-rostering-data-model-proc" /> and <xref linkend="wb-employee-rostering-planning-entity-proc" />.
								</simpara>
							</listitem>
						</itemizedlist>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									Create a new data object with the identifier <literal>EmployeeRoster</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Create the following fields:
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>EmployeeRoster</title>
									<tgroup cols="2">
										<colspec colname="col_1" colwidth="50*"></colspec>
										<colspec colname="col_2" colwidth="50*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">id</entry>
												<entry align="left" valign="top">Type</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>dayOffRequestList</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													<literal>employeerostering.employeerostering.DayOffRequest[List]</literal>
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>shiftAssignmentList</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													<literal>employeerostering.employeerostering.ShiftAssignment[List]</literal>
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>shiftList</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													<literal>employeerostering.employeerostering.Shift[List]</literal>
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>skillList</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													<literal>employeerostering.employeerostering.Skill[List]</literal>
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>timeslotList</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													<literal>employeerostering.employeerostering.Timeslot[List]</literal>
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
							</listitem>
							<listitem>
								<simpara>
									In the <emphasis role="strong">Data Objects</emphasis> perspective, open the OptaPlanner dock by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/optimizer-icon.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>OptaPlanner icon</phrase>
										</textobject>
									</inlinemediaobject>
									 on the right.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Planning Solution</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Leave the default <literal>Hard soft score</literal> as the <emphasis role="strong">Solution Score Type</emphasis>. This automatically generates a <literal>score</literal> field in the <literal>EmployeeRoster</literal> data object with the solution score as the type.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add a new field with the following attributes:
								</simpara>
								<informaltable colsep="1" frame="all" rowsep="1">
									<tgroup cols="2">
										<colspec colname="col_1" colwidth="50*"></colspec>
										<colspec colname="col_2" colwidth="50*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">id</entry>
												<entry align="left" valign="top">Type</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>employeeList</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													<literal>employeerostering.employeerostering.Employee[List]</literal>
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</informaltable>
							</listitem>
							<listitem>
								<simpara>
									With the <literal>employeeList</literal> field selected, open the OptaPlanner dock and select the <emphasis role="strong">Planning Value Range Provider</emphasis> box.
								</simpara>
								<simpara>
									In the <emphasis role="strong">id</emphasis> field, type <literal>employeeRange</literal>. Close the dock.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Save</emphasis> in the upper-right corner to save the asset.
								</simpara>
							</listitem>
						</orderedlist>
					</section>
				</section>
				<section xml:id="wb-employee-rostering-constraints-con">
					<title>Employee rostering constraints</title>
					<simpara>
						Employee rostering is a planning problem. All planning problems include constraints that must be satisfied in order to find an optimal solution.
					</simpara>
					<simpara>
						The employee rostering sample project in Business Central includes the following hard and soft constraints:
					</simpara>
					<variablelist>
						<varlistentry>
							<term>Hard constraint</term>
							<listitem>
								<itemizedlist>
									<listitem>
										<simpara>
											Employees are only assigned one shift per day.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											All shifts that require a particular employee skill are assigned an employee with that particular skill.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Soft constraints</term>
							<listitem>
								<itemizedlist>
									<listitem>
										<simpara>
											All employees are assigned a shift.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											If an employee requests a day off, their shift is reassigned to another employee.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</varlistentry>
					</variablelist>
					<simpara>
						Hard and soft constraints are defined in Business Central using either the free-form DRL designer, or using guided rules.
					</simpara>
					<section xml:id="drl-rules-con_getting-started-optaplanner">
						<title>DRL (Drools Rule Language) rules</title>
						<simpara>
							DRL (Drools Rule Language) rules are business rules that you define directly in <literal>.drl</literal> text files. These DRL files are the source in which all other rule assets in Business Central are ultimately rendered. You can create and manage DRL files within the Business Central interface, or create them externally as part of a Maven or Java project using Red Hat CodeReady Studio or another integrated development environment (IDE). A DRL file can contain one or more rules that define at a minimum the rule conditions (<literal>when</literal>) and actions (<literal>then</literal>). The DRL designer in Business Central provides syntax highlighting for Java, DRL, and XML.
						</simpara>
						<simpara>
							DRL files consist of the following components:
						</simpara>
						<formalpara>
							<title>Components in a DRL file</title>
							<para>
								
<screen>package

import

function  // Optional

query  // Optional

declare   // Optional

global   // Optional

rule "rule name"
    // Attributes
    when
        // Conditions
    then
        // Actions
end

rule "rule2 name"

...</screen>
							</para>
						</formalpara>
						<simpara>
							The following example DRL rule determines the age limit in a loan application decision service:
						</simpara>
						<formalpara>
							<title>Example rule for loan application age limit</title>
							<para>
								
<screen>rule "Underage"
  salience 15
  agenda-group "applicationGroup"
  when
    $application : LoanApplication()
    Applicant( age &lt; 21 )
  then
    $application.setApproved( false );
    $application.setExplanation( "Underage" );
end</screen>
							</para>
						</formalpara>
						<simpara>
							A DRL file can contain single or multiple rules, queries, and functions, and can define resource declarations such as imports, globals, and attributes that are assigned and used by your rules and queries. The DRL package must be listed at the top of a DRL file and the rules are typically listed last. All other DRL components can follow any order.
						</simpara>
						<simpara>
							Each rule must have a unique name within the rule package. If you use the same rule name more than once in any DRL file in the package, the rules fail to compile. Always enclose rule names with double quotation marks (<literal>rule "rule name"</literal>) to prevent possible compilation errors, especially if you use spaces in rule names.
						</simpara>
						<simpara>
							All data objects related to a DRL rule must be in the same project package as the DRL file in Business Central. Assets in the same package are imported by default. Existing assets in other packages can be imported with the DRL rule.
						</simpara>
					</section>
					<section xml:id="wb-employee-rostering-optimizer-drools-rules-proc">
						<title>Defining constraints for employee rostering using the DRL designer</title>
						<simpara>
							You can create constraint definitions for the employee rostering example using the free-form DRL designer in Business Central.
						</simpara>
						<simpara>
							Use this procedure to create a <emphasis>hard constraint</emphasis> where no employee is assigned a shift that begins less than 10 hours after their previous shift ended.
						</simpara>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">DRL file</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the <emphasis role="strong">DRL file</emphasis> name field, type <literal>ComplexScoreRules</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select the <literal>employeerostering.employeerostering</literal> package.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">+Ok</emphasis> to create the DRL file.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the <emphasis role="strong">Model</emphasis> tab of the DRL designer, define the <literal>Employee10HourShiftSpace</literal> rule as a DRL file:
								</simpara>
								
<screen>package employeerostering.employeerostering;

rule "Employee10HourShiftSpace"
    when
        $shiftAssignment : ShiftAssignment( $employee : employee != null, $shiftEndDateTime : shift.timeslot.endTime)
        ShiftAssignment( this != $shiftAssignment, $employee == employee, $shiftEndDateTime &lt;= shift.timeslot.endTime,
                $shiftEndDateTime.until(shift.timeslot.startTime, java.time.temporal.ChronoUnit.HOURS) &lt;10)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end</screen>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Save</emphasis> to save the DRL file.
								</simpara>
							</listitem>
						</orderedlist>
						<simpara>
							For more information about creating DRL files, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/developing_decision_services_in_red_hat_decision_manager#assembly-drl-rules"><emphasis>Designing a decision service using DRL rules</emphasis></link>.
						</simpara>
					</section>
				</section>
				<section xml:id="wb-employee-rostering-guided-rule-editor-proc">
					<title>Creating rules for employee rostering using guided rules</title>
					<simpara>
						You can create rules that define hard and soft constraints for employee rostering using the guided rules designer in Business Central.
					</simpara>
					<section xml:id="guided-rules-con_getting-started-optaplanner">
						<title>Guided rules</title>
						<simpara>
							Guided rules are business rules that you create in a UI-based guided rules designer in Business Central that leads you through the rule-creation process. The guided rules designer provides fields and options for acceptable input based on the data objects for the rule being defined. The guided rules that you define are compiled into Drools Rule Language (DRL) rules as with all other rule assets.
						</simpara>
						<simpara>
							All data objects related to a guided rule must be in the same project package as the guided rule. Assets in the same package are imported by default. After you create the necessary data objects and the guided rule, you can use the <emphasis role="strong">Data Objects</emphasis> tab of the guided rules designer to verify that all required data objects are listed or to import other existing data objects by adding a <emphasis role="strong">New item</emphasis>.
						</simpara>
					</section>
					<section xml:id="wb-employee-rostering-balance-employees-shift-rule-proc">
						<title>Creating a guided rule to balance employee shift numbers</title>
						<simpara>
							The <literal>BalanceEmployeesShiftNumber</literal> guided rule creates a soft constraint that ensures shifts are assigned to employees in a way that is balanced as evenly as possible. It does this by creating a score penalty that increases when shift distribution is less even. The score formula, implemented by the rule, incentivizes the Solver to distribute shifts in a more balanced way.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/employee-rostering/BalanceEmployeesShiftNumber.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>BalanceEmployeesShiftNumber Guided Rule</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">Guided Rule</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Enter <literal>BalanceEmployeesShiftNumber</literal> as the <emphasis role="strong">Guided Rule</emphasis> name and select the <literal>employeerostering.employeerostering</literal> <emphasis role="strong">Package</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Ok</emphasis> to create the rule asset.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add a <emphasis role="strong">WHEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">WHEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <literal>Employee</literal> in the <emphasis role="strong">Add a condition to the rule</emphasis> window. Click <emphasis role="strong">+Ok</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click the <literal>Employee</literal> condition to modify the constraints and add the variable name <literal>$employee</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add the <emphasis role="strong">WHEN</emphasis> condition <literal>From Accumulate</literal>.
								</simpara>
								<orderedlist numeration="loweralpha">
									<listitem>
										<simpara>
											Above the <literal>From Accumulate</literal> condition, click <emphasis role="strong">click to add pattern</emphasis> and select <literal>Number</literal> as the fact type from the drop-down list.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Add the variable name <literal>$shiftCount</literal> to the <literal>Number</literal> condition.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Below the <literal>From Accumulate</literal> condition, click <emphasis role="strong">click to add pattern</emphasis> and select the <literal>ShiftAssignment</literal> fact type from the drop-down list.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Add the variable name <literal>$shiftAssignment</literal> to the <literal>ShiftAssignment</literal> fact type.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Click the <literal>ShiftAssignment</literal> condition again and from the <emphasis role="strong">Add a restriction on a field</emphasis> drop-down list, select <literal>employee</literal>.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Select <literal>equal to</literal> from the drop-down list next to the <literal>employee</literal> constraint.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Click the 
											<inlinemediaobject>
												<imageobject>
													<imagedata fileref="images/_images/employee-rostering/6191.png" format="PNG" />
												</imageobject>
												<textobject>
													<phrase>edit</phrase>
												</textobject>
											</inlinemediaobject>
											 icon next to the drop-down button to add a variable, and click <emphasis role="strong">Bound variable</emphasis> in the <emphasis role="strong">Field value</emphasis> window.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Select <literal>$employee</literal> from the drop-down list.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											In the <emphasis role="strong">Function</emphasis> box type <literal>count($shiftAssignment)</literal>.
										</simpara>
									</listitem>
								</orderedlist>
							</listitem>
							<listitem>
								<simpara>
									Add the <emphasis role="strong">THEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">THEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <literal>Modify Soft Score</literal> in the <emphasis role="strong">Add a new action</emphasis> window. Click <emphasis role="strong">+Ok</emphasis>.
								</simpara>
								<orderedlist numeration="loweralpha">
									<listitem>
										<simpara>
											Type the following expression into the box: <literal>-($shiftCount.intValue()*$shiftCount.intValue())</literal>
										</simpara>
									</listitem>
								</orderedlist>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Validate</emphasis> in the upper-right corner to check all rule conditions are valid. If the rule validation fails, address any problems described in the error message, review all components in the rule, and try again to validate the rule until the rule passes.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Save</emphasis> to save the rule.
								</simpara>
							</listitem>
						</orderedlist>
						<simpara>
							For more information about creating guided rules, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/developing_decision_services_in_red_hat_decision_manager#assembly-guided-rules"><emphasis>Designing a decision service using guided rules</emphasis></link>.
						</simpara>
					</section>
					<section xml:id="wb-employee-rostering-one-shift-per-day-rule-proc">
						<title>Creating a guided rule for no more than one shift per day</title>
						<simpara>
							The <literal>OneEmployeeShiftPerDay</literal> guided rule creates a hard constraint that employees are not assigned more than one shift per day. In the employee rostering example, this constraint is created using the guided rule designer.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/employee-rostering/OneEmployeeShiftPerDay.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>OneEmployeeShiftPerDay Guided Rule</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">Guided Rule</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Enter <literal>OneEmployeeShiftPerDay</literal> as the <emphasis role="strong">Guided Rule</emphasis> name and select the <literal>employeerostering.employeerostering</literal> <emphasis role="strong">Package</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Ok</emphasis> to create the rule asset.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add a <emphasis role="strong">WHEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">WHEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Free form DRL</emphasis> from the <emphasis role="strong">Add a condition to the rule</emphasis> window.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the free form DRL box, type the following condition:
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">$shiftAssignment : ShiftAssignment( employee != null )
		ShiftAssignment( this != $shiftAssignment , employee == $shiftAssignment.employee , shift.timeslot.startTime.toLocalDate() == $shiftAssignment.shift.timeslot.startTime.toLocalDate() )</programlisting>
								<simpara>
									This condition states that a shift cannot be assigned to an employee that already has another shift assignment on the same day.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add the <emphasis role="strong">THEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">THEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Add free form DRL</emphasis> from the <emphasis role="strong">Add a new action</emphasis> window.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the free form DRL box, type the following condition:
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">scoreHolder.addHardConstraintMatch(kcontext, -1);</programlisting>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Validate</emphasis> in the upper-right corner to check all rule conditions are valid. If the rule validation fails, address any problems described in the error message, review all components in the rule, and try again to validate the rule until the rule passes.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Save</emphasis> to save the rule.
								</simpara>
							</listitem>
						</orderedlist>
						<simpara>
							For more information about creating guided rules, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/developing_decision_services_in_red_hat_decision_manager#assembly-guided-rules"><emphasis>Designing a decision service using guided rules</emphasis></link>.
						</simpara>
					</section>
					<section xml:id="wb-employee-rostering-shift-required-skills-met-proc">
						<title>Creating a guided rule to match skills to shift requirements</title>
						<simpara>
							The <literal>ShiftReqiredSkillsAreMet</literal> guided rule creates a hard constraint that ensures all shifts are assigned an employee with the correct set of skills. In the employee rostering example, this constraint is created using the guided rule designer.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/employee-rostering/ShiftRequiredSkillsAreMet.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>ShiftRequiredSkillsAreMet Guided Rule</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">Guided Rule</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Enter <literal>ShiftReqiredSkillsAreMet</literal> as the <emphasis role="strong">Guided Rule</emphasis> name and select the <literal>employeerostering.employeerostering</literal> <emphasis role="strong">Package</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Ok</emphasis> to create the rule asset.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add a <emphasis role="strong">WHEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">WHEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <literal>ShiftAssignment</literal> in the <emphasis role="strong">Add a condition to the rule</emphasis> window. Click <emphasis role="strong">+Ok</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click the <literal>ShiftAssignment</literal> condition, and select <literal>employee</literal> from the <emphasis role="strong">Add a restriction on a field</emphasis> drop-down list.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the designer, click the drop-down list next to <literal>employee</literal> and select <literal>is not null</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click the <literal>ShiftAssignment</literal> condition, and click <emphasis role="strong">Expression editor</emphasis>.
								</simpara>
								<orderedlist numeration="loweralpha">
									<listitem>
										<simpara>
											In the designer, click <literal>[not bound]</literal> to open the <emphasis role="strong">Expression editor</emphasis>, and bind the expression to the variable <literal>$requiredSkill</literal>. Click <emphasis role="strong">Set</emphasis>.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											In the designer, next to <literal>$requiredSkill</literal>, select <literal>shift</literal> from the first drop-down list, then <literal>requiredSkill</literal> from the next drop-down list.
										</simpara>
									</listitem>
								</orderedlist>
							</listitem>
							<listitem>
								<simpara>
									Click the <literal>ShiftAssignment</literal> condition, and click <emphasis role="strong">Expression editor</emphasis>.
								</simpara>
								<orderedlist numeration="loweralpha">
									<listitem>
										<simpara>
											In the designer, next to <literal>[not bound]</literal>, select <literal>employee</literal> from the first drop-down list, then <literal>skills</literal> from the next drop-down list.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Leave the next drop-down list as <literal>Choose</literal>.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											In the next drop-down box, change <literal>please choose</literal> to <literal>excludes</literal>.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Click the 
											<inlinemediaobject>
												<imageobject>
													<imagedata fileref="images/_images/employee-rostering/6191.png" format="PNG" />
												</imageobject>
												<textobject>
													<phrase>edit</phrase>
												</textobject>
											</inlinemediaobject>
											 icon next to <literal>excludes</literal>, and in the <emphasis role="strong">Field value</emphasis> window, click the <emphasis role="strong">New formula</emphasis> button.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											Type <literal>$requiredSkill</literal> into the formula box.
										</simpara>
									</listitem>
								</orderedlist>
							</listitem>
							<listitem>
								<simpara>
									Add the <emphasis role="strong">THEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">THEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <literal>Modify Hard Score</literal> in the <emphasis role="strong">Add a new action</emphasis> window. Click <emphasis role="strong">+Ok</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Type <literal>-1</literal> into the score actions box.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Validate</emphasis> in the upper-right corner to check all rule conditions are valid. If the rule validation fails, address any problems described in the error message, review all components in the rule, and try again to validate the rule until the rule passes.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Save</emphasis> to save the rule.
								</simpara>
							</listitem>
						</orderedlist>
						<simpara>
							For more information about creating guided rules, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/developing_decision_services_in_red_hat_decision_manager#assembly-guided-rules"><emphasis>Designing a decision service using guided rules</emphasis></link>.
						</simpara>
					</section>
					<section xml:id="wb-employee-rostering-day-off-request-rule-proc">
						<title>Creating a guided rule to manage day off requests</title>
						<simpara>
							The <literal>DayOffRequest</literal> guided rule creates a soft constraint. This constraint allows a shift to be reassigned to another employee in the event the employee who was originally assigned the shift is no longer able to work that day. In the employee rostering example, this constraint is created using the guided rule designer.
						</simpara>
						<informalfigure>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/_images/employee-rostering/DayOffRequest.png" format="PNG" />
							</imageobject>
							<textobject>
								<phrase>DayOffRequest Guided Rule</phrase>
							</textobject>
						</mediaobject>
						</informalfigure>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">Guided Rule</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Enter <literal>DayOffRequest</literal> as the <emphasis role="strong">Guided Rule</emphasis> name and select the <literal>employeerostering.employeerostering</literal> <emphasis role="strong">Package</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Ok</emphasis> to create the rule asset.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add a <emphasis role="strong">WHEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">WHEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Free form DRL</emphasis> from the <emphasis role="strong">Add a condition to the rule</emphasis> window.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the free form DRL box, type the following condition:
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">$dayOffRequest : DayOffRequest( )
		ShiftAssignment( employee == $dayOffRequest.employee , shift.timeslot.startTime.toLocalDate() == $dayOffRequest.date )</programlisting>
								<simpara>
									This condition states if a shift is assigned to an employee who has made a day off request, the employee can be unassigned the shift on that day.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Add the <emphasis role="strong">THEN</emphasis> condition by clicking the 
									<inlinemediaobject>
										<imageobject>
											<imagedata fileref="images/_images/employee-rostering/5686.png" format="PNG" />
										</imageobject>
										<textobject>
											<phrase>5686</phrase>
										</textobject>
									</inlinemediaobject>
									 in the <emphasis role="strong">THEN</emphasis> field.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select <emphasis role="strong">Add free form DRL</emphasis> from the <emphasis role="strong">Add a new action</emphasis> window.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the free form DRL box, type the following condition:
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">scoreHolder.addSoftConstraintMatch(kcontext, -100);</programlisting>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Validate</emphasis> in the upper-right corner to check all rule conditions are valid. If the rule validation fails, address any problems described in the error message, review all components in the rule, and try again to validate the rule until the rule passes.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Save</emphasis> to save the rule.
								</simpara>
							</listitem>
						</orderedlist>
						<simpara>
							For more information about creating guided rules, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.13/html-single/developing_decision_services_in_red_hat_decision_manager#assembly-guided-rules"><emphasis>Designing a decision service using guided rules</emphasis></link>.
						</simpara>
					</section>
				</section>
				<section xml:id="wb-employee-rostering-solver-configuration-proc">
					<title>Creating a solver configuration for employee rostering</title>
					<simpara>
						You can create and edit Solver configurations in Business Central. The Solver configuration designer creates a solver configuration that can be run after the project is deployed.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								Red Hat Decision Manager has been downloaded and installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You have created and configured all of the relevant assets for the employee rostering example.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In Business Central, click <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Projects</emphasis>, and click your project to open it.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Assets</emphasis> perspective, click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">Solver configuration</emphasis>
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Create new Solver configuration</emphasis> window, type the name <literal>EmployeeRosteringSolverConfig</literal> for your Solver and click <emphasis role="strong">Ok</emphasis>.
							</simpara>
							<simpara>
								This opens the <emphasis role="strong">Solver configuration</emphasis> designer.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Score Director Factory</emphasis> configuration section, define a KIE base that contains scoring rule definitions. The employee rostering sample project uses <literal>defaultKieBase</literal>.
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Select one of the KIE sessions defined within the KIE base. The employee rostering sample project uses <literal>defaultKieSession</literal>.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Validate</emphasis> in the upper-right corner to check the <emphasis role="strong">Score Director Factory</emphasis> configuration is correct. If validation fails, address any problems described in the error message, and try again to validate until the configuration passes.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Save</emphasis> to save the Solver configuration.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="wb-employee-rostering-solver-termination-configuration-proc">
					<title>Configuring Solver termination for the employee rostering project</title>
					<simpara>
						You can configure the Solver to terminate after a specified amount of time. By default, the planning engine is given an unlimited time period to solve a problem instance.
					</simpara>
					<simpara>
						The employee rostering sample project is set up to run for 30 seconds.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have created all relevant assets for the employee rostering project and created the <literal>EmployeeRosteringSolverConfig</literal> solver configuration in Business Central as described in <xref linkend="wb-employee-rostering-solver-configuration-proc" />.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Open the <literal>EmployeeRosteringSolverConfig</literal> from the <emphasis role="strong">Assets</emphasis> perspective. This will open the <emphasis role="strong">Solver configuration</emphasis> designer.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Termination</emphasis> section, click <emphasis role="strong">Add</emphasis> to create new termination element within the selected logical group.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select the <literal>Time spent</literal> termination type from the drop-down list. This is added as an input field in the termination configuration.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Use the arrows next to the time elements to adjust the amount of time spent to 30 seconds.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Validate</emphasis> in the upper-right corner to check the <emphasis role="strong">Score Director Factory</emphasis> configuration is correct. If validation fails, address any problems described in the error message, and try again to validate until the configuration passes.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Save</emphasis> to save the Solver configuration.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
			</section>
			<section xml:id="wb-employee-rostering-using-rest-proc">
				<title>Accessing the solver using the REST API</title>
				<simpara>
					After deploying or re-creating the sample solver, you can access it using the REST API.
				</simpara>
				<simpara>
					You must register a solver instance using the REST API. Then you can supply data sets and retrieve optimized solutions.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							The employee rostering project is set up and deployed according to the previous sections in this document. You can either deploy the sample project, as described in <xref linkend="wb-employee-rostering-example-deploying-in-central-proc" />, or re-create the project, as described in <xref linkend="wb-employee-rostering-example-recreate-con" />.
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="wb-employee-rostering-register-solver-proc">
					<title>Registering the Solver using the REST API</title>
					<simpara>
						You must register the solver instance using the REST API before you can use the solver.
					</simpara>
					<simpara>
						Each solver instance is capable of optimizing one planning problem at a time.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Create a HTTP request using the following header:
							</simpara>
							
<screen>authorization: admin:admin
X-KIE-ContentType: xstream
content-type: application/xml</screen>
						</listitem>
						<listitem>
							<simpara>
								Register the Solver using the following request:
							</simpara>
							<variablelist>
								<varlistentry>
									<term>PUT</term>
									<listitem>
										<simpara>
											<literal>http://localhost:8080/kie-server/services/rest/server/containers/employeerostering_1.0.0-SNAPSHOT/solvers/EmployeeRosteringSolver</literal>
										</simpara>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term>Request body</term>
									<listitem>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;solver-instance&gt;
  &lt;solver-config-file&gt;employeerostering/employeerostering/EmployeeRosteringSolverConfig.solver.xml&lt;/solver-config-file&gt;
&lt;/solver-instance&gt;</programlisting>
									</listitem>
								</varlistentry>
							</variablelist>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="wb-employee-rostering-call-solver-proc">
					<title>Calling the Solver using the REST API</title>
					<simpara>
						After registering the solver instance, you can use the REST API to submit a data set to the solver and to retrieve an optimized solution.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Create a HTTP request using the following header:
							</simpara>
							
<screen>authorization: admin:admin
X-KIE-ContentType: xstream
content-type: application/xml</screen>
						</listitem>
						<listitem>
							<simpara>
								Submit a request to the Solver with a data set, as in the following example:
							</simpara>
							<variablelist>
								<varlistentry>
									<term>POST</term>
									<listitem>
										<simpara>
											<literal>http://localhost:8080/kie-server/services/rest/server/containers/employeerostering_1.0.0-SNAPSHOT/solvers/EmployeeRosteringSolver/state/solving</literal>
										</simpara>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term>Request body</term>
									<listitem>
										
<programlisting language="xml" linenumbering="unnumbered">&lt;employeerostering.employeerostering.EmployeeRoster&gt;
  &lt;employeeList&gt;
    &lt;employeerostering.employeerostering.Employee&gt;
      &lt;name&gt;John&lt;/name&gt;
      &lt;skills&gt;
        &lt;employeerostering.employeerostering.Skill&gt;
          &lt;name&gt;reading&lt;/name&gt;
        &lt;/employeerostering.employeerostering.Skill&gt;
      &lt;/skills&gt;
    &lt;/employeerostering.employeerostering.Employee&gt;
    &lt;employeerostering.employeerostering.Employee&gt;
      &lt;name&gt;Mary&lt;/name&gt;
      &lt;skills&gt;
        &lt;employeerostering.employeerostering.Skill&gt;
          &lt;name&gt;writing&lt;/name&gt;
        &lt;/employeerostering.employeerostering.Skill&gt;
      &lt;/skills&gt;
    &lt;/employeerostering.employeerostering.Employee&gt;
    &lt;employeerostering.employeerostering.Employee&gt;
      &lt;name&gt;Petr&lt;/name&gt;
      &lt;skills&gt;
        &lt;employeerostering.employeerostering.Skill&gt;
          &lt;name&gt;speaking&lt;/name&gt;
        &lt;/employeerostering.employeerostering.Skill&gt;
      &lt;/skills&gt;
    &lt;/employeerostering.employeerostering.Employee&gt;
  &lt;/employeeList&gt;
  &lt;shiftList&gt;
    &lt;employeerostering.employeerostering.Shift&gt;
      &lt;timeslot&gt;
        &lt;startTime&gt;2017-01-01T00:00:00&lt;/startTime&gt;
        &lt;endTime&gt;2017-01-01T01:00:00&lt;/endTime&gt;
      &lt;/timeslot&gt;
      &lt;requiredSkill reference="../../../employeeList/employeerostering.employeerostering.Employee/skills/employeerostering.employeerostering.Skill"/&gt;
    &lt;/employeerostering.employeerostering.Shift&gt;
    &lt;employeerostering.employeerostering.Shift&gt;
      &lt;timeslot reference="../../employeerostering.employeerostering.Shift/timeslot"/&gt;
      &lt;requiredSkill reference="../../../employeeList/employeerostering.employeerostering.Employee[3]/skills/employeerostering.employeerostering.Skill"/&gt;
    &lt;/employeerostering.employeerostering.Shift&gt;
    &lt;employeerostering.employeerostering.Shift&gt;
      &lt;timeslot reference="../../employeerostering.employeerostering.Shift/timeslot"/&gt;
      &lt;requiredSkill reference="../../../employeeList/employeerostering.employeerostering.Employee[2]/skills/employeerostering.employeerostering.Skill"/&gt;
    &lt;/employeerostering.employeerostering.Shift&gt;
  &lt;/shiftList&gt;
  &lt;skillList&gt;
    &lt;employeerostering.employeerostering.Skill reference="../../employeeList/employeerostering.employeerostering.Employee/skills/employeerostering.employeerostering.Skill"/&gt;
    &lt;employeerostering.employeerostering.Skill reference="../../employeeList/employeerostering.employeerostering.Employee[3]/skills/employeerostering.employeerostering.Skill"/&gt;
    &lt;employeerostering.employeerostering.Skill reference="../../employeeList/employeerostering.employeerostering.Employee[2]/skills/employeerostering.employeerostering.Skill"/&gt;
  &lt;/skillList&gt;
  &lt;timeslotList&gt;
    &lt;employeerostering.employeerostering.Timeslot reference="../../shiftList/employeerostering.employeerostering.Shift/timeslot"/&gt;
  &lt;/timeslotList&gt;
  &lt;dayOffRequestList/&gt;
  &lt;shiftAssignmentList&gt;
    &lt;employeerostering.employeerostering.ShiftAssignment&gt;
      &lt;shift reference="../../../shiftList/employeerostering.employeerostering.Shift"/&gt;
    &lt;/employeerostering.employeerostering.ShiftAssignment&gt;
    &lt;employeerostering.employeerostering.ShiftAssignment&gt;
      &lt;shift reference="../../../shiftList/employeerostering.employeerostering.Shift[3]"/&gt;
    &lt;/employeerostering.employeerostering.ShiftAssignment&gt;
    &lt;employeerostering.employeerostering.ShiftAssignment&gt;
      &lt;shift reference="../../../shiftList/employeerostering.employeerostering.Shift[2]"/&gt;
    &lt;/employeerostering.employeerostering.ShiftAssignment&gt;
  &lt;/shiftAssignmentList&gt;
&lt;/employeerostering.employeerostering.EmployeeRoster&gt;</programlisting>
									</listitem>
								</varlistentry>
							</variablelist>
						</listitem>
						<listitem>
							<simpara>
								Request the best solution to the planning problem:
							</simpara>
							<variablelist>
								<varlistentry>
									<term>GET</term>
									<listitem>
										<simpara>
											<literal>http://localhost:8080/kie-server/services/rest/server/containers/employeerostering_1.0.0-SNAPSHOT/solvers/EmployeeRosteringSolver/bestsolution</literal>
										</simpara>
										<formalpara>
											<title>Example response</title>
											<para>
												
<programlisting language="xml" linenumbering="unnumbered">&lt;solver-instance&gt;
  &lt;container-id&gt;employee-rostering&lt;/container-id&gt;
  &lt;solver-id&gt;solver1&lt;/solver-id&gt;
  &lt;solver-config-file&gt;employeerostering/employeerostering/EmployeeRosteringSolverConfig.solver.xml&lt;/solver-config-file&gt;
  &lt;status&gt;NOT_SOLVING&lt;/status&gt;
  &lt;score scoreClass="org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore"&gt;0hard/0soft&lt;/score&gt;
  &lt;best-solution class="employeerostering.employeerostering.EmployeeRoster"&gt;
    &lt;employeeList&gt;
      &lt;employeerostering.employeerostering.Employee&gt;
        &lt;name&gt;John&lt;/name&gt;
        &lt;skills&gt;
          &lt;employeerostering.employeerostering.Skill&gt;
            &lt;name&gt;reading&lt;/name&gt;
          &lt;/employeerostering.employeerostering.Skill&gt;
        &lt;/skills&gt;
      &lt;/employeerostering.employeerostering.Employee&gt;
      &lt;employeerostering.employeerostering.Employee&gt;
        &lt;name&gt;Mary&lt;/name&gt;
        &lt;skills&gt;
          &lt;employeerostering.employeerostering.Skill&gt;
            &lt;name&gt;writing&lt;/name&gt;
          &lt;/employeerostering.employeerostering.Skill&gt;
        &lt;/skills&gt;
      &lt;/employeerostering.employeerostering.Employee&gt;
      &lt;employeerostering.employeerostering.Employee&gt;
        &lt;name&gt;Petr&lt;/name&gt;
        &lt;skills&gt;
          &lt;employeerostering.employeerostering.Skill&gt;
            &lt;name&gt;speaking&lt;/name&gt;
          &lt;/employeerostering.employeerostering.Skill&gt;
        &lt;/skills&gt;
      &lt;/employeerostering.employeerostering.Employee&gt;
    &lt;/employeeList&gt;
    &lt;shiftList&gt;
      &lt;employeerostering.employeerostering.Shift&gt;
        &lt;timeslot&gt;
          &lt;startTime&gt;2017-01-01T00:00:00&lt;/startTime&gt;
          &lt;endTime&gt;2017-01-01T01:00:00&lt;/endTime&gt;
        &lt;/timeslot&gt;
        &lt;requiredSkill reference="../../../employeeList/employeerostering.employeerostering.Employee/skills/employeerostering.employeerostering.Skill"/&gt;
      &lt;/employeerostering.employeerostering.Shift&gt;
      &lt;employeerostering.employeerostering.Shift&gt;
        &lt;timeslot reference="../../employeerostering.employeerostering.Shift/timeslot"/&gt;
        &lt;requiredSkill reference="../../../employeeList/employeerostering.employeerostering.Employee[3]/skills/employeerostering.employeerostering.Skill"/&gt;
      &lt;/employeerostering.employeerostering.Shift&gt;
      &lt;employeerostering.employeerostering.Shift&gt;
        &lt;timeslot reference="../../employeerostering.employeerostering.Shift/timeslot"/&gt;
        &lt;requiredSkill reference="../../../employeeList/employeerostering.employeerostering.Employee[2]/skills/employeerostering.employeerostering.Skill"/&gt;
      &lt;/employeerostering.employeerostering.Shift&gt;
    &lt;/shiftList&gt;
    &lt;skillList&gt;
      &lt;employeerostering.employeerostering.Skill reference="../../employeeList/employeerostering.employeerostering.Employee/skills/employeerostering.employeerostering.Skill"/&gt;
      &lt;employeerostering.employeerostering.Skill reference="../../employeeList/employeerostering.employeerostering.Employee[3]/skills/employeerostering.employeerostering.Skill"/&gt;
      &lt;employeerostering.employeerostering.Skill reference="../../employeeList/employeerostering.employeerostering.Employee[2]/skills/employeerostering.employeerostering.Skill"/&gt;
    &lt;/skillList&gt;
    &lt;timeslotList&gt;
      &lt;employeerostering.employeerostering.Timeslot reference="../../shiftList/employeerostering.employeerostering.Shift/timeslot"/&gt;
    &lt;/timeslotList&gt;
    &lt;dayOffRequestList/&gt;
    &lt;shiftAssignmentList/&gt;
    &lt;score&gt;0hard/0soft&lt;/score&gt;
  &lt;/best-solution&gt;
&lt;/solver-instance&gt;</programlisting>
											</para>
										</formalpara>
									</listitem>
								</varlistentry>
							</variablelist>
						</listitem>
					</orderedlist>
				</section>
			</section>
		</chapter>
		<chapter xml:id="optaplanner-quarkus-con_getting-started-optaplanner">
			<title>Getting Started with OptaPlanner and Quarkus</title>
			<simpara>
				You can use the <literal><link xlink:href="https://code.quarkus.redhat.com">https://code.quarkus.redhat.com</link></literal> website to generate a Red Hat build of OptaPlanner Quarkus Maven project and automatically add and configure the extensions that you want to use in your application. You can then download the Quarkus Maven repository or use the online Maven repository with your project.
			</simpara>
			<section xml:id="con-apache-maven-plug-ins-and-quarkus_getting-started-optaplanner">
				<title>Apache Maven and Red Hat build of Quarkus</title>
				<simpara>
					Apache Maven is a distributed build automation tool used in Java application development to create, manage, and build software projects. Maven uses standard configuration files called Project Object Model (POM) files to define projects and manage the build process. POM files describe the module and component dependencies, build order, and targets for the resulting project packaging and output using an XML file. This ensures that the project is built in a correct and uniform manner.
				</simpara>
				<formalpara>
					<title>Maven repositories</title>
					<para>
						A Maven repository stores Java libraries, plug-ins, and other build artifacts. The default public repository is the Maven 2 Central Repository, but repositories can be private and internal within a company to share common artifacts among development teams. Repositories are also available from third parties.
					</para>
				</formalpara>
				<simpara>
					You can use the online Maven repository with your Quarkus projects or you can download the Red Hat build of Quarkus Maven repository.
				</simpara>
				<formalpara>
					<title>Maven plug-ins</title>
					<para>
						Maven plug-ins are defined parts of a POM file that achieve one or more goals. Quarkus applications use the following Maven plug-ins:
					</para>
				</formalpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Quarkus Maven plug-in (<literal>quarkus-maven-plugin</literal>): Enables Maven to create Quarkus projects, supports the generation of uber-JAR files, and provides a development mode.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Maven Surefire plug-in (<literal>maven-surefire-plugin</literal>): Used during the test phase of the build lifecycle to execute unit tests on your application. The plug-in generates text and XML files that contain the test reports.
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="con-online-maven_getting-started-optaplanner">
					<title>Configuring the Maven <literal>settings.xml</literal> file for the online repository</title>
					<simpara>
						You can use the online Maven repository with your Maven project by configuring your user <literal>settings.xml</literal> file. This is the recommended approach. Maven settings used with a repository manager or repository on a shared server provide better control and manageability of projects.
					</simpara>
					<note>
						<simpara>
							When you configure the repository by modifying the Maven <literal>settings.xml</literal> file, the changes apply to all of your Maven projects.
						</simpara>
					</note>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Open the Maven <literal>~/.m2/settings.xml</literal> file in a text editor or integrated development environment (IDE).
							</simpara>
							<note>
								<simpara>
									If there is not a <literal>settings.xml</literal> file in the <literal>~/.m2/</literal> directory, copy the <literal>settings.xml</literal> file from the <literal>$MAVEN_HOME/.m2/conf/</literal> directory into the <literal>~/.m2/</literal> directory.
								</simpara>
							</note>
						</listitem>
						<listitem>
							<simpara>
								Add the following lines to the <literal>&lt;profiles&gt;</literal> element of the <literal>settings.xml</literal> file:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Configure the Maven repository --&gt;
&lt;profile&gt;
  &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
      &lt;url&gt;https://maven.repository.redhat.com/ga/&lt;/url&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
  &lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
      &lt;url&gt;https://maven.repository.redhat.com/ga/&lt;/url&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/pluginRepository&gt;
  &lt;/pluginRepositories&gt;
&lt;/profile&gt;</programlisting>
						</listitem>
						<listitem>
							<simpara>
								Add the following lines to the <literal>&lt;activeProfiles&gt;</literal> element of the <literal>settings.xml</literal> file and save the file.
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;activeProfile&gt;red-hat-enterprise-maven-repository&lt;/activeProfile&gt;</programlisting>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="con-download-maven_getting-started-optaplanner">
					<title>Downloading and configuring the Quarkus Maven repository</title>
					<simpara>
						If you do not want to use the online Maven repository, you can download and configure the Quarkus Maven repository to create a Quarkus application with Maven. The Quarkus Maven repository contains many of the requirements that Java developers typically use to build their applications. This procedure describes how to edit the <literal>settings.xml</literal> file to configure the Quarkus Maven repository.
					</simpara>
					<note>
						<simpara>
							When you configure the repository by modifying the Maven <literal>settings.xml</literal> file, the changes apply to all of your Maven projects.
						</simpara>
					</note>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Download the Red Hat build of Quarkus Maven repository ZIP file from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;product=redhat.quarkus">Software Downloads</link> page of the Red Hat Customer Portal (login required).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Expand the downloaded archive.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Change directory to the <literal>~/.m2/</literal> directory and open the Maven <literal>settings.xml</literal> file in a text editor or integrated development environment (IDE).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add the following lines to the <literal>&lt;profiles&gt;</literal> element of the <literal>settings.xml</literal> file, where <literal><emphasis>QUARKUS_MAVEN_REPOSITORY</emphasis></literal> is the path of the Quarkus Maven repository that you downloaded. The format of <literal><emphasis>QUARKUS_MAVEN_REPOSITORY</emphasis></literal> must be <literal>file://$PATH</literal>, for example <literal>file:///home/userX/rh-quarkus-2.7.5.GA-maven-repository/maven-repository</literal>.
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Configure the Quarkus Maven repository --&gt;
&lt;profile&gt;
  &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
      &lt;url&gt;<emphasis>QUARKUS_MAVEN_REPOSITORY</emphasis>&lt;/url&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
  &lt;pluginRepositories&gt;
    &lt;pluginRepository&gt;
      &lt;id&gt;red-hat-enterprise-maven-repository&lt;/id&gt;
      &lt;url&gt;<emphasis>QUARKUS_MAVEN_REPOSITORY</emphasis>&lt;/url&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/pluginRepository&gt;
  &lt;/pluginRepositories&gt;
&lt;/profile&gt;</programlisting>
						</listitem>
						<listitem>
							<simpara>
								Add the following lines to the <literal>&lt;activeProfiles&gt;</literal> element of the <literal>settings.xml</literal> file and save the file.
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">&lt;activeProfile&gt;red-hat-enterprise-maven-repository&lt;/activeProfile&gt;</programlisting>
						</listitem>
					</orderedlist>
					<important>
						<simpara>
							If your Maven repository contains outdated artifacts, you might encounter one of the following Maven error messages when you build or deploy your project, where <literal><emphasis>ARTIFACT_NAME</emphasis></literal> is the name of a missing artifact and <literal><emphasis>PROJECT_NAME</emphasis></literal> is the name of the project you are trying to build:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>Missing artifact <emphasis>PROJECT_NAME</emphasis></literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>[ERROR] Failed to execute goal on project <emphasis>ARTIFACT_NAME</emphasis>; Could not resolve dependencies for <emphasis>PROJECT_NAME</emphasis></literal>
								</simpara>
							</listitem>
						</itemizedlist>
						<simpara>
							To resolve the issue, delete the cached version of your local repository located in the <literal>~/.m2/repository</literal> directory to force a download of the latest Maven artifacts.
						</simpara>
					</important>
				</section>
			</section>
			<section xml:id="proc-quarkus-creating-proj_getting-started-optaplanner">
				<title>Creating an OptaPlanner Red Hat build of Quarkus Maven project using the Maven plug-in</title>
				<simpara>
					You can get up and running with a Red Hat build of OptaPlanner and Quarkus application using Apache Maven and the Quarkus Maven plug-in.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							OpenJDK 11 or later is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In a command terminal, enter the following command to verify that Maven is using JDK 11 and that the Maven version is 3.6 or higher:
						</simpara>
						
<screen>mvn --version</screen>
					</listitem>
					<listitem>
						<simpara>
							If the preceding command does not return JDK 11, add the path to JDK 11 to the PATH environment variable and enter the preceding command again.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To generate a Quarkus OptaPlanner quickstart project, enter the following command:
						</simpara>
						
<programlisting language="shell" linenumbering="unnumbered">mvn com.redhat.quarkus.platform:quarkus-maven-plugin:2.7.5.Final-redhat-00011:create \
    -DprojectGroupId=com.example \
    -DprojectArtifactId=optaplanner-quickstart  \
    -Dextensions="resteasy,resteasy-jackson,optaplanner-quarkus,optaplanner-quarkus-jackson" \
    -DplatformGroupId=com.redhat.quarkus.platform
    -DplatformVersion=2.7.5.Final-redhat-00011 \
    -DnoExamples</programlisting>
						<simpara>
							This command create the following elements in the <literal>./optaplanner-quickstart</literal> directory:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									The Maven structure
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Example <literal>Dockerfile</literal> file in <literal>src/main/docker</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The application configuration file
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Properties used in the mvn <literal>io.quarkus:quarkus-maven-plugin:2.7.5.Final-redhat-00011:create</literal> command</title>
									<tgroup cols="2">
										<colspec colname="col_1" colwidth="30*"></colspec>
										<colspec colname="col_2" colwidth="70*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Property</entry>
												<entry align="left" valign="top">Description</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectGroupId</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The group ID of the project.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectArtifactId</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The artifact ID of the project.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>extensions</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													A comma-separated list of Quarkus extensions to use with this project. For a full list of Quarkus extensions, enter <literal>mvn quarkus:list-extensions</literal> on the command line.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>noExamples</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Creates a project with the project structure but without tests or classes.
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<simpara>
									The values of the <literal>projectGroupID</literal> and the <literal>projectArtifactID</literal> properties are used to generate the project version. The default project version is <literal>1.0.0-SNAPSHOT</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							To view your OptaPlanner project, change directory to the OptaPlanner Quickstarts directory:
						</simpara>
						
<screen>cd optaplanner-quickstart</screen>
					</listitem>
					<listitem>
						<simpara>
							Review the <literal>pom.xml</literal> file. The content should be similar to the following example:
						</simpara>
						
<screen>&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;io.quarkus.platform&lt;/groupId&gt;
      &lt;artifactId&gt;quarkus-bom&lt;/artifactId&gt;
      &lt;version&gt;2.7.5.Final-redhat-00011&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
      &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;io.quarkus.platform&lt;/groupId&gt;
      &lt;artifactId&gt;quarkus-optaplanner-bom&lt;/artifactId&gt;
      &lt;version&gt;2.7.5.Final-redhat-00011&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
      &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-resteasy&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-resteasy-jackson&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-quarkus&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-quarkus-jackson&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-junit5&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="code-quarkus-redhat-com-proc_getting-started-optaplanner">
				<title>Creating a Red Hat build of Quarkus Maven project using code.quarkus.redhat.com</title>
				<simpara role="_abstract">
					You can use the <literal>code.quarkus.redhat.com</literal> website to generate a Red Hat build of OptaPlanner Quarkus Maven project and automatically add and configure the extensions that you want to use in your application. In addition, <literal>code.quarkus.redhat.com</literal> automatically manages the configuration parameters required to compile your project into a native executable.
				</simpara>
				<simpara>
					This section walks you through the process of generating an OptaPlanner Maven project and includes the following topics:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Specifying basic details about your application.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Choosing the extensions that you want to include in your project.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Generating a downloadable archive with your project files.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Using the custom commands for compiling and starting your application.
						</simpara>
					</listitem>
				</itemizedlist>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have a web browser.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Open <literal><link xlink:href="https://code.quarkus.redhat.com">https://code.quarkus.redhat.com</link></literal> in your web browser:
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Specify details about your project:
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter a group name for your project. The format of the name follows the Java package naming convention, for example, <literal>com.example</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter a name that you want to use for Maven artifacts generated from your project, for example <literal>code-with-quarkus</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">Build Tool</emphasis> &gt; <emphasis role="strong">Maven</emphasis> to specify that you want to create a Maven project. The build tool that you choose determines the items:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									The directory structure of your generated project
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The format of configuration files used in your generated project
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The custom build script and command for compiling and starting your application that <literal>code.quarkus.redhat.com</literal> displays for you after you generate your project
								</simpara>
								<note>
									<simpara>
										Red Hat provides support for using <literal>code.quarkus.redhat.com</literal> to create OptaPlanner Maven projects only. Generating Gradle projects is not supported by Red Hat.
									</simpara>
								</note>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Enter a version to be used in artifacts generated from your project. The default value of this field is <literal>1.0.0-SNAPSHOT</literal>. Using <link xlink:href="https://semver.org/">semantic versioning</link> is recommended, but you can use a different type of versioning if you prefer.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the package name of artifacts that the build tool generates when you package your project.
						</simpara>
						<simpara>
							According to the Java package naming conventions the package name should match the group name that you use for your project, but you can specify a different name.
						</simpara>
						<note>
							<simpara>
								The <literal>code.quarkus.redhat.com</literal> website automatically uses the latest release of OptaPlanner. You can manually change the BOM version in the <literal>pom.xml</literal> file after you generate your project.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Select the following extensions to include as dependencies:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									RESTEasy JAX-RS (quarkus-resteasy)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									RESTEasy Jackson (quarkus-resteasy-jackson)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									OptaPlanner AI constraint solver(optaplanner-quarkus)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									OptaPlanner Jackson (optaplanner-quarkus-jackson)
								</simpara>
								<simpara>
									Red Hat provides different levels of support for individual extensions on the list, which are indicated by labels next to the name of each extension:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<emphasis>SUPPORTED</emphasis> extensions are fully supported by Red Hat for use in enterprise applications in production environments.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis>TECH-PREVIEW</emphasis> extensions are subject to limited support by Red Hat in production environments under the <link xlink:href="https://access.redhat.com/support/offerings/techpreview">Technology Preview Features Support Scope</link>.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis>DEV-SUPPORT</emphasis> extensions are not supported by Red Hat for use in production environments, but the core functionalities that they provide are supported by Red Hat developers for use in developing new applications.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis>DEPRECATED</emphasis> extension are planned to be replaced with a newer technology or implementation that provides the same functionality.
										</simpara>
										<simpara>
											Unlabeled extensions are not supported by Red Hat for use in production environments.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis>Generate your application</emphasis> to confirm your choices and display the overlay screen with the download link for the archive that contains your generated project. The overlay screen also shows the custom command that you can use to compile and start your application.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Select <emphasis role="strong">Download the ZIP</emphasis> to save the archive with the generated project files to your system.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Extract the contents of the archive.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Navigate to the directory that contains your extracted project files:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">cd &lt;directory_name&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Compile and start your application in development mode:
						</simpara>
						
<programlisting language="bash" linenumbering="unnumbered">./mvnw compile quarkus:dev</programlisting>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="proc-quarkus-creating-proj-cli_getting-started-optaplanner">
				<title>Creating a Red Hat build of Quarkus Maven project using the Quarkus CLI</title>
				<simpara>
					You can use the Quarkus command line interface (CLI) to create a Quarkus OptaPlanner project.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have installed the Quarkus CLI. For information, see <link xlink:href="https://quarkus.io/guides/cli-tooling">Building Quarkus Apps with Quarkus Command Line Interface</link>.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create a Quarkus application:
						</simpara>
						
<screen>quarkus create app -P io.quarkus:quarkus-bom:2.7.5.Final-redhat-00011</screen>
					</listitem>
					<listitem>
						<simpara>
							To view the available extensions, enter the following command:
						</simpara>
						
<screen>quarkus ext -i</screen>
						<simpara>
							This command returns the following extensions:
						</simpara>
						
<screen>optaplanner-quarkus
optaplanner-quarkus-benchmark
optaplanner-quarkus-jackson
optaplanner-quarkus-jsonb</screen>
					</listitem>
					<listitem>
						<simpara>
							Enter the following command to add extensions to the project’s <literal>pom.xml</literal> file:
						</simpara>
						
<screen>quarkus ext add resteasy-jackson
quarkus ext add optaplanner-quarkus
quarkus ext add optaplanner-quarkus-jackson</screen>
					</listitem>
					<listitem>
						<simpara>
							Open the <literal>pom.xml</literal> file in a text editor. The contents of the file should look similar to the following example:
						</simpara>
						
<screen>&lt;?xml version="1.0"?&gt;
&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.acme&lt;/groupId&gt;
  &lt;artifactId&gt;code-with-quarkus-optaplanner&lt;/artifactId&gt;
  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
  &lt;properties&gt;
	&lt;compiler-plugin.version&gt;3.8.1&lt;/compiler-plugin.version&gt;
	&lt;maven.compiler.parameters&gt;true&lt;/maven.compiler.parameters&gt;
	&lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;
	&lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;
	&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
	&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
	&lt;quarkus.platform.artifact-id&gt;quarkus-bom&lt;/quarkus.platform.artifact-id&gt;
	&lt;quarkus.platform.group-id&gt;io.quarkus&lt;/quarkus.platform.group-id&gt;
	&lt;quarkus.platform.version&gt;2.7.5.Final-redhat-00011&lt;/quarkus.platform.version&gt;
	&lt;surefire-plugin.version&gt;3.0.0-M5&lt;/surefire-plugin.version&gt;
  &lt;/properties&gt;
  &lt;dependencyManagement&gt;
	&lt;dependencies&gt;
  	&lt;dependency&gt;
    	&lt;groupId&gt;${quarkus.platform.group-id}&lt;/groupId&gt;
    	&lt;artifactId&gt;${quarkus.platform.artifact-id}&lt;/artifactId&gt;
    	&lt;version&gt;${quarkus.platform.version}&lt;/version&gt;
    	&lt;type&gt;pom&lt;/type&gt;
    	&lt;scope&gt;import&lt;/scope&gt;
  	&lt;/dependency&gt;
  	&lt;dependency&gt;
    	&lt;groupId&gt;io.quarkus.platform&lt;/groupId&gt;
    	&lt;artifactId&gt;optaplanner-quarkus&lt;/artifactId&gt;
    	&lt;version&gt;2.2.2.Final&lt;/version&gt;
    	&lt;type&gt;pom&lt;/type&gt;
    	&lt;scope&gt;import&lt;/scope&gt;
  	&lt;/dependency&gt;
	&lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  &lt;dependencies&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;io.quarkus&lt;/groupId&gt;
  	&lt;artifactId&gt;quarkus-arc&lt;/artifactId&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;io.quarkus&lt;/groupId&gt;
  	&lt;artifactId&gt;quarkus-resteasy&lt;/artifactId&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
  	&lt;artifactId&gt;optaplanner-quarkus&lt;/artifactId&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
  	&lt;artifactId&gt;optaplanner-quarkus-jackson&lt;/artifactId&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;io.quarkus&lt;/groupId&gt;
  	&lt;artifactId&gt;quarkus-resteasy-jackson&lt;/artifactId&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;io.quarkus&lt;/groupId&gt;
  	&lt;artifactId&gt;quarkus-junit5&lt;/artifactId&gt;
  	&lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
  	&lt;groupId&gt;io.rest-assured&lt;/groupId&gt;
  	&lt;artifactId&gt;rest-assured&lt;/artifactId&gt;
  	&lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
	&lt;plugins&gt;
  	&lt;plugin&gt;
    	&lt;groupId&gt;${quarkus.platform.group-id}&lt;/groupId&gt;
    	&lt;artifactId&gt;quarkus-maven-plugin&lt;/artifactId&gt;
    	&lt;version&gt;${quarkus.platform.version}&lt;/version&gt;
    	&lt;extensions&gt;true&lt;/extensions&gt;
    	&lt;executions&gt;
      	&lt;execution&gt;
        	&lt;goals&gt;
          	&lt;goal&gt;build&lt;/goal&gt;
          	&lt;goal&gt;generate-code&lt;/goal&gt;
          	&lt;goal&gt;generate-code-tests&lt;/goal&gt;
        	&lt;/goals&gt;
      	&lt;/execution&gt;
    	&lt;/executions&gt;
  	&lt;/plugin&gt;
  	&lt;plugin&gt;
    	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
    	&lt;version&gt;${compiler-plugin.version}&lt;/version&gt;
    	&lt;configuration&gt;
      	&lt;parameters&gt;${maven.compiler.parameters}&lt;/parameters&gt;
    	&lt;/configuration&gt;
  	&lt;/plugin&gt;
  	&lt;plugin&gt;
    	&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
    	&lt;version&gt;${surefire-plugin.version}&lt;/version&gt;
    	&lt;configuration&gt;
      	&lt;systemPropertyVariables&gt;
        	&lt;java.util.logging.manager&gt;org.jboss.logmanager.LogManager&lt;/java.util.logging.manager&gt;
        	&lt;maven.home&gt;${maven.home}&lt;/maven.home&gt;
      	&lt;/systemPropertyVariables&gt;
    	&lt;/configuration&gt;
  	&lt;/plugin&gt;
	&lt;/plugins&gt;
  &lt;/build&gt;
  &lt;profiles&gt;
	&lt;profile&gt;
  	&lt;id&gt;native&lt;/id&gt;
  	&lt;activation&gt;
    	&lt;property&gt;
      	&lt;name&gt;native&lt;/name&gt;
    	&lt;/property&gt;
  	&lt;/activation&gt;
  	&lt;build&gt;
    	&lt;plugins&gt;
      	&lt;plugin&gt;
        	&lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
        	&lt;version&gt;${surefire-plugin.version}&lt;/version&gt;
        	&lt;executions&gt;
          	&lt;execution&gt;
            	&lt;goals&gt;
              	&lt;goal&gt;integration-test&lt;/goal&gt;
              	&lt;goal&gt;verify&lt;/goal&gt;
            	&lt;/goals&gt;
            	&lt;configuration&gt;
              	&lt;systemPropertyVariables&gt;
                	&lt;native.image.path&gt;${project.build.directory}/${project.build.finalName}-runner&lt;/native.image.path&gt;
                	&lt;java.util.logging.manager&gt;org.jboss.logmanager.LogManager&lt;/java.util.logging.manager&gt;
                	&lt;maven.home&gt;${maven.home}&lt;/maven.home&gt;
              	&lt;/systemPropertyVariables&gt;
            	&lt;/configuration&gt;
          	&lt;/execution&gt;
        	&lt;/executions&gt;
      	&lt;/plugin&gt;
    	&lt;/plugins&gt;
  	&lt;/build&gt;
  	&lt;properties&gt;
    	&lt;quarkus.package.type&gt;native&lt;/quarkus.package.type&gt;
  	&lt;/properties&gt;
	&lt;/profile&gt;
  &lt;/profiles&gt;
&lt;/project&gt;</screen>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
	</part>
	<part xml:id="assembly-planner-configuration">
		<title>The Red Hat build of OptaPlanner solver</title>
		<partintro>
			<simpara>
				Solving a planning problem with OptaPlanner consists of the following steps:
			</simpara>
			<orderedlist numeration="arabic">
				<listitem>
					<simpara>
						<emphasis role="strong">Model your planning problem</emphasis> as a class annotated with the <literal>@PlanningSolution</literal> annotation (for example, the <literal>NQueens</literal> class).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Configure a Solver</emphasis> (for example a First Fit and Tabu Search solver for any <literal>NQueens</literal> instance).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Load a problem data set</emphasis> from your data layer (for example a Four Queens instance). That is the planning problem.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<emphasis role="strong">Solve it</emphasis> with <literal>Solver.solve(problem)</literal>, which returns the best solution found.
					</simpara>
				</listitem>
			</orderedlist>
			<informalfigure>
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="images/_images/optimizer/inputOutputOverview.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>inputOutputOverview</phrase>
				</textobject>
			</mediaobject>
			</informalfigure>
		</partintro>
		<chapter xml:id="configuring-planner-proc_developing-solvers">
			<title>Configuring the Red Hat build of OptaPlanner solver</title>
			<simpara>
				You can use the following methods to configure your OptaPlanner solver:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Use an XML file.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Use the <literal>SolverConfig</literal> API.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Add class annotations and JavaBean property annotations on the domain model.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Control the method that OptaPlanner uses to access your domain.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Define custom properties.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="xml-configuration-proc_developing-solvers">
				<title>Using an XML file to configure the OptaPlanner solver</title>
				<simpara>
					You can use an XML file to configure the solver. In a typical project that follows the Maven directory structure, after you build a <literal>Solver</literal> instance with the <literal>SolverFactory</literal>, the <literal>solverConfig</literal> XML file is located in the <literal>$PROJECT_DIR/src/main/resources/org/optaplanner/examples/&lt;PROJECT&gt;/solver</literal> directory, where <literal>&lt;PROJECT&gt;</literal> is the name of your OptaPlanner project. Alternatively, you can create a <literal>SolverFactory</literal> from a file with <literal>SolverFactory.createFromXmlFile()</literal>. However, for portability reasons, a classpath resource is recommended.
				</simpara>
				<simpara>
					Both a <literal>Solver</literal> and a <literal>SolverFactory</literal> have a generic type called <literal>Solution_</literal>, which is the class representing a planning problem and solution.
				</simpara>
				<simpara>
					OptaPlanner makes it relatively easy to switch optimization algorithms by changing the configuration.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Build a <literal>Solver</literal> instance with the <literal>SolverFactory</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Configure the solver configuration XML file:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Define the model.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Define the score function.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Optional: Configure the optimization algorithm.
								</simpara>
								<simpara>
									The following example is a solver XML file for the NQueens problem:
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd"&gt;
  &lt;!-- Define the model --&gt;
  &lt;solutionClass&gt;org.optaplanner.examples.nqueens.domain.NQueens&lt;/solutionClass&gt;
  &lt;entityClass&gt;org.optaplanner.examples.nqueens.domain.Queen&lt;/entityClass&gt;

  &lt;!-- Define the score function --&gt;
  &lt;scoreDirectorFactory&gt;
    &lt;scoreDrl&gt;org/optaplanner/examples/nqueens/solver/nQueensConstraints.drl&lt;/scoreDrl&gt;
  &lt;/scoreDirectorFactory&gt;

  &lt;!-- Configure the optimization algorithms (optional) --&gt;
  &lt;termination&gt;
    ...
  &lt;/termination&gt;
  &lt;constructionHeuristic&gt;
    ...
  &lt;/constructionHeuristic&gt;
  &lt;localSearch&gt;
    ...
  &lt;/localSearch&gt;
&lt;/solver&gt;</programlisting>
								<note>
									<simpara>
										On some environments, for example OSGi and JBoss modules, classpath resources such as the solver config, score DRLs, and domain classe) in your JAR files might not be available to the default <literal>ClassLoader</literal> of the <literal>optaplanner-core</literal> JAR file. In those cases, provide the <literal>ClassLoader</literal> of your classes as a parameter:
									</simpara>
									
<programlisting language="java" linenumbering="unnumbered">       SolverFactory&lt;NQueens&gt; solverFactory = SolverFactory.createFromXmlResource(
               ".../nqueensSolverConfig.xml", getClass().getClassLoader());</programlisting>
								</note>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Configure the <literal>SolverFactory</literal> with a solver configuration XML file, provided as a classpath resource as defined by <literal>ClassLoader.getResource()</literal>:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">       SolverFasctory&lt;NQueens&gt; solverFactory = SolverFactory.createFromXmlResource(
               "org/optaplanner/examples/nqueens/solver/nqueensSolverConfig.xml");
       Solver&lt;NQueens&gt; solver = solverFactory.buildSolver();</programlisting>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="using-java-api-proc_developing-solvers">
				<title>Using the Java API to configure the OptaPlanner solver</title>
				<simpara>
					You can configure a solver by using the <literal>SolverConfig</literal> API. This is especially useful to change values dynamically at runtime. The following example changes the running time based on system properties before building the <literal>Solver</literal> in the NQueens project:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">        SolverConfig solverConfig = SolverConfig.createFromXmlResource(
                "org/optaplanner/examples/nqueens/solver/nqueensSolverConfig.xml");
        solverConfig.withTerminationConfig(new TerminationConfig()
                        .withMinutesSpentLimit(userInput));

        SolverFactory&lt;NQueens&gt; solverFactory = SolverFactory.create(solverConfig);
        Solver&lt;NQueens&gt; solver = solverFactory.buildSolver();</programlisting>
				<simpara>
					Every element in the solver configuration XML file is available as a <literal>Config</literal> class or a property on a <literal>Config</literal> class in the package namespace <literal>org.optaplanner.core.config</literal>. These <literal>Config</literal> classes are the Java representation of the XML format. They build the runtime components of the package namespace <literal>org.optaplanner.core.impl</literal> and assemble them into an efficient <literal>Solver</literal>.
				</simpara>
				<note>
					<simpara>
						To configure a <literal>SolverFactory</literal> dynamically for each user request, build a template <literal>SolverConfig</literal> during initialization and copy it with the copy constructor for each user request. The following example shows how to do this with the NQueens problem:
					</simpara>
					
<programlisting language="java" linenumbering="unnumbered">    private SolverConfig template;

    public void init() {
        template = SolverConfig.createFromXmlResource(
                "org/optaplanner/examples/nqueens/solver/nqueensSolverConfig.xml");
        template.setTerminationConfig(new TerminationConfig());
    }

    // Called concurrently from different threads
    public void userRequest(..., long userInput) {
        SolverConfig solverConfig = new SolverConfig(template); // Copy it
        solverConfig.getTerminationConfig().setMinutesSpentLimit(userInput);
        SolverFactory&lt;NQueens&gt; solverFactory = SolverFactory.create(solverConfig);
        Solver&lt;NQueens&gt; solver = solverFactory.buildSolver();
        ...
    }</programlisting>
				</note>
			</section>
			<section xml:id="planner-annotations-con_developing-solvers">
				<title>OptaPlanner annotation</title>
				<simpara>
					You must specify which classes in your domain model are planning entities, which properties are planning variables, and so on. Use one of the following methods to add annotations to your OptaPlanner project:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Add class annotations and JavaBean property annotations on the domain model. The property annotations must be on the getter method, not on the setter method. Annotated getter methods do not need to be public. This is the recommended method.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add class annotations and field annotations on the domain model. Annotated fields do not need to be public.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section xml:id="specifying-domain-access-proc_developing-solvers">
				<title>Specifying OptaPlanner domain access</title>
				<simpara>
					By default, OptaPlanner accesses your domain using reflection. Reflection is reliable but slow compared to direct access. Alternatively, you can configure OptaPlanner to access your domain using Gizmo, which will generate bytecode that directly accesses the fields and methods of your domain without reflection. However, this method has the following restrictions:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							The planning annotations can only be on public fields and public getters.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>io.quarkus.gizmo:gizmo</literal> must be on the classpath.
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						These restrictions do not apply when you use OptaPlanner with Quarkus because Gizmo is the default domain access type.
					</simpara>
				</note>
				<formalpara>
					<title>Procedure</title>
					<para>
						To use Gizmo outside of Quarkus, set the <literal>domainAccessType</literal> in the solver configuration:
					</para>
				</formalpara>
				
<programlisting language="xml" linenumbering="unnumbered">  &lt;solver&gt;
    &lt;domainAccessType&gt;GIZMO&lt;/domainAccessType&gt;
  &lt;/solver&gt;</programlisting>
			</section>
			<section xml:id="configuring-custom-properties-proc_developing-solvers">
				<title>Configuring custom properties</title>
				<simpara>
					In your OptaPlanner projects, you can add custom properties to solver configuration elements that instantiate classes and have documents that explicitly mention custom properties.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have a solver.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Add a custom property.
						</simpara>
						<simpara>
							For example, if your <literal>EasyScoreCalculator</literal> has heavy calculations which are cached and you want to increase the cache size in one benchmark add the <literal>myCacheSize</literal> property:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">  &lt;scoreDirectorFactory&gt;
    &lt;easyScoreCalculatorClass&gt;...MyEasyScoreCalculator&lt;/easyScoreCalculatorClass&gt;
    &lt;easyScoreCalculatorCustomProperties&gt;
      &lt;property name="myCacheSize" value="1000"/&gt;&lt;!-- Override value --&gt;
    &lt;/easyScoreCalculatorCustomProperties&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Add a public setter for each custom property, which is called when a <literal>Solver</literal> is built.
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">public class MyEasyScoreCalculator extends EasyScoreCalculator&lt;MySolution, SimpleScore&gt; {

        private int myCacheSize = 500; // Default value

        @SuppressWarnings("unused")
        public void setMyCacheSize(int myCacheSize) {
            this.myCacheSize = myCacheSize;
        }

    ...
}</programlisting>
						<simpara>
							Most value types are supported, including <literal>boolean</literal>, <literal>int</literal>, <literal>double</literal>, <literal>BigDecimal</literal>, <literal>String</literal> and <literal>enums</literal>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="solver-con_developing-solvers">
			<title>The OptaPlanner Solver</title>
			<simpara>
				A solver finds the best and optimal solution to your planning problem. A solver can only solve one planning problem instance at a time. Solvers are built with the <literal>SolverFactory</literal> method:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">public interface Solver&lt;Solution_&gt; {

    Solution_ solve(Solution_ problem);

    ...
}</programlisting>
			<simpara>
				A solver should only be accessed from a single thread, except for the methods that are specifically documented in <literal>javadoc</literal> as being thread-safe. The <literal>solve()</literal> method hogs the current thread. Hogging the thread can cause HTTP timeouts for REST services and it requires extra code to solve multiple data sets in parallel. To avoid such issues, use a <literal>SolverManager</literal> instead.
			</simpara>
			<section xml:id="solving-a-problem-proc_developing-solvers">
				<title>Solving a problem</title>
				<simpara>
					Use the solver to solve a planning problem.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							A <literal>Solver</literal> built from a solver configuration
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							An <literal>@PlanningSolution</literal> annotation that represents the planning problem instance
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Procedure</title>
					<para>
						Provide the planning problem as an argument to the <literal>solve()</literal> method. The solver will return the best solution found.
					</para>
				</formalpara>
				<simpara>
					The following example solves the NQueens problem:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">    NQueens problem = ...;
    NQueens bestSolution = solver.solve(problem);</programlisting>
				<simpara>
					In this example, the <literal>solve()</literal> method will return an <literal>NQueens</literal> instance with every <literal>Queen</literal> assigned to a <literal>Row</literal>.
				</simpara>
				<note>
					<simpara>
						The solution instance given to the <literal>solve(Solution)</literal> method can be partially or fully initialized, which is often the case in repeated planning.
					</simpara>
				</note>
				<figure>
					<title>Best Solution for the Four Queens Puzzle in 8ms (Also an Optimal Solution)</title>
					<mediaobject>
						<imageobject>
							<imagedata align="left" fileref="images/_images/optimizer/solvedNQueens04.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>solvedNQueens04</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<simpara>
					The <literal>solve(Solution)</literal> method can take a long time depending on the problem size and the solver configuration. The <literal>Solver</literal> intelligently works through the search space of possible solutions and remembers the best solution it encounters during solving. Depending on a number of factors, including problem size, how much time the <literal>Solver</literal> has, the solver configuration, and so forth, the <literal>best</literal> solution might or might not be an <literal>optimal</literal> solution.
				</simpara>
				<note>
					<simpara>
						The solution instance given to the method <literal>solve(Solution)</literal> is changed by the <literal>Solver</literal>, but do not mistake it for the best solution.
					</simpara>
					<simpara>
						The solution instance returned by the methods <literal>solve(Solution)</literal> or <literal>getBestSolution()</literal> is most likely a planning clone of the instance given to the method <literal>solve(Solution)</literal>, which implies it is a different instance.
					</simpara>
				</note>
			</section>
			<section xml:id="solver-environment-con_developing-solvers">
				<title>Solver environment mode</title>
				<simpara>
					The solver environment mode enables you to detect common bugs in your implementation. It does not affect the logging level.
				</simpara>
				<simpara>
					A solver has a single random instance. Some solver configurations use the random instance a lot more than others. For example, the Simulated Annealing algorithm depends highly on random numbers, while <literal>Tabu Search</literal> only depends on it to resolve score ties. The environment mode influences the seed of that random instance.
				</simpara>
				<simpara>
					You can set the environment mode in the solver configuration XML file. The following example sets the <literal>FAST_ASSERT</literal> mode:
				</simpara>
				
<programlisting language="xml" linenumbering="unnumbered">&lt;solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd"&gt;
  &lt;environmentMode&gt;FAST_ASSERT&lt;/environmentMode&gt;
  ...
&lt;/solver&gt;</programlisting>
				<itemizedlist>
					<title>The following list describes the environment modes that you can use in the solver configuration file:</title>
					<listitem>
						<simpara>
							<literal>FULL_ASSERT</literal> mode turns on all assertions, for example the assertion that the incremental score calculation is uncorrupted for each move, to fail-fast on a bug in a Move implementation, a constraint, the engine itself, and so on. This mode is reproducible. It is also intrusive because it calls the method <literal>calculateScore()</literal> more frequently than a non-assert mode. The <literal>FULL_ASSERT</literal> mode is very slow because it does not rely on incremental score calculation.
						</simpara>
					</listitem>
				</itemizedlist>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>NON_INTRUSIVE_FULL_ASSERT</literal> mode turns on several assertions to fail-fast on a bug in a Move implementation, a constraint, the engine itself, and so on. This mode is reproducible. It is non-intrusive because it does not call the method <literal>calculateScore()</literal> more frequently than a non assert mode. The <literal>NON_INTRUSIVE_FULL_ASSERT</literal> mode is very slow because it does not rely on incremental score calculation.
						</simpara>
					</listitem>
				</itemizedlist>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>FAST_ASSERT</literal> mode turns on most assertions, such as the assertions that an undoMove’s score is the same as before the Move, to fail-fast on a bug in a Move implementation, a constraint, the engine itself, and so on. This mode is reproducible. It is also intrusive because it calls the method <literal>calculateScore()</literal> more frequently than a non-assert mode. The <literal>FAST_ASSERT</literal> mode is slow. Write a test case that does a short run of your planning problem with the <literal>FAST_ASSERT</literal> mode on.
						</simpara>
					</listitem>
				</itemizedlist>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>REPRODUCIBLE</literal> mode is the default mode because it is recommended during development. In this mode, two runs in the same OptaPlanner version execute the same code in the same order. Those two runs have the same result at every step, except if the following note applies. This enables you to reproduce bugs consistently. It also enables you to benchmark certain refactorings, such as a score constraint performance optimization, fairly across runs.
						</simpara>
						<note>
							<simpara>
								Despite using <literal>REPRODCIBLE</literal> mode, your application might still not be fully reproducible for the following reasons:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Use of <literal>HashSet</literal> or another <literal>Collection</literal> which has an inconsistent order between JVM runs for collections of planning entities or planning values but not normal problem facts, especially in the solution implementation. Replace it with <literal>LinkedHashSet</literal>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Combining a time gradient dependent algorithm, most notably the Simulated Annealing algorithm, together with time spent termination. A sufficiently large difference in allocated CPU time will influence the time gradient values. Replace the Simulated Annealing algorithms with the Late Acceptance algorithm, or replace time spent termination with step count termination.
									</simpara>
								</listitem>
							</itemizedlist>
						</note>
					</listitem>
					<listitem>
						<simpara>
							<literal>REPRODUCIBLE</literal> mode can be slightly slower than <literal>NON_REPRODUCIBLE</literal> mode. If your production environment can benefit from reproducibility, use this mode in production. In practice, <literal>REPRODUCIBLE</literal> mode uses the default fixed random seed if no seed is specified and it also disables certain concurrency optimizations such as work stealing.
						</simpara>
					</listitem>
				</itemizedlist>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>NON_REPRODUCIBLE</literal> mode can be slightly faster than <literal>REPRODUCIBLE</literal> mode. Avoid using it during development because it makes debugging and bug fixing difficult. If reproducibility isn’t important in your production environment, use <literal>NON_REPRODUCIBLE</literal> mode in production. In practice, this mode uses no fixed random seed if no seed is specified.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section xml:id="logging-level-proc_developing-solvers">
				<title>Changing the OptaPlanner solver logging level</title>
				<simpara>
					You can change the logging level in an OptaPlanner solver to review solver activity. The following list describes the different logging levels:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis role="strong">error</emphasis>: Logs errors, except those that are thrown to the calling code as a <literal>RuntimeException</literal>.
						</simpara>
						<simpara>
							If an error occurs, OptaPlanner normally fails fast. It throws a subclass of <literal>RuntimeException</literal> with a detailed message to the calling code. To avoid duplicate log messages, it does not log it as an error. Unless the calling code explicitly catches and eliminates that <literal>RuntimeException</literal>, a <literal>Thread’s default `ExceptionHandler</literal> will log it as an error anyway. Meanwhile, the code is disrupted from doing further harm or obfuscating the error.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">warn</emphasis>: Logs suspicious circumstances
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">info</emphasis>: Logs every phase and the solver itself
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">debug</emphasis>: Logs every step of every phase
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis role="strong">trace</emphasis>: Logs every move of every step of every phase
						</simpara>
					</listitem>
				</itemizedlist>
				<note>
					<simpara>
						Specifying <literal>trace</literal> logging will slow down performance considerably. However, <literal>trace</literal> logging is invaluable during development to discover a bottleneck.
					</simpara>
					<simpara>
						Even <literal>debug</literal> logging can slow down performance considerably for fast stepping algorithms such as Late Acceptance and Simulated Annealing, but not for slow stepping algorithms such as Tabu Search.
					</simpara>
					<simpara>
						Both trace` and <literal>debug</literal> logging cause congestion in multithreaded solving with most appenders.
					</simpara>
					<simpara>
						In Eclipse, <literal>debug</literal> logging to the console tends to cause congestion with score calculation speeds above 10000 per second. Neither IntelliJ or the Maven command line suffer from this problem.
					</simpara>
				</note>
				<formalpara>
					<title>Procedure</title>
					<para>
						Set the logging level to <literal>debug</literal> logging to see when the phases end and how fast steps are taken.
					</para>
				</formalpara>
				<simpara>
					The following example shows output from debug logging:
				</simpara>
				
<screen>INFO  Solving started: time spent (3), best score (-4init/0), random (JDK with seed 0).
DEBUG     CH step (0), time spent (5), score (-3init/0), selected move count (1), picked move (Queen-2 {null -&gt; Row-0}).
DEBUG     CH step (1), time spent (7), score (-2init/0), selected move count (3), picked move (Queen-1 {null -&gt; Row-2}).
DEBUG     CH step (2), time spent (10), score (-1init/0), selected move count (4), picked move (Queen-3 {null -&gt; Row-3}).
DEBUG     CH step (3), time spent (12), score (-1), selected move count (4), picked move (Queen-0 {null -&gt; Row-1}).
INFO  Construction Heuristic phase (0) ended: time spent (12), best score (-1), score calculation speed (9000/sec), step total (4).
DEBUG     LS step (0), time spent (19), score (-1),     best score (-1), accepted/selected move count (12/12), picked move (Queen-1 {Row-2 -&gt; Row-3}).
DEBUG     LS step (1), time spent (24), score (0), new best score (0), accepted/selected move count (9/12), picked move (Queen-3 {Row-3 -&gt; Row-2}).
INFO  Local Search phase (1) ended: time spent (24), best score (0), score calculation speed (4000/sec), step total (2).
INFO  Solving ended: time spent (24), best score (0), score calculation speed (7000/sec), phase total (2), environment mode (REPRODUCIBLE).</screen>
				<simpara>
					All time spent values are in milliseconds.
				</simpara>
				<simpara>
					Everything is logged to <link xlink:href="http://www.slf4j.org/">SLF4J</link>, which is a simple logging facade that delegates every log message to Logback, Apache Commons Logging, Log4j, or java.util.logging. Add a dependency to the logging adaptor for your logging framework of choice.
				</simpara>
			</section>
			<section xml:id="logback-proc_developing-solvers">
				<title>Using Logback to log OptaPlanner solver activity</title>
				<simpara>
					Logback is the recommended logging frameworkd to use with OptaPlanner. Use Logback to log OptaPlanner solver activity.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have an OptaPlanner project.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Add the following Maven dependency to your OptaPlanner project’s <literal>pom.xml</literal> file:
						</simpara>
						<note>
							<simpara>
								You do not need to add an extra bridge dependency.
							</simpara>
						</note>
						
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
      &lt;version&gt;1.x&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Configure the logging level on the <literal>org.optaplanner</literal> package in your <literal>logback.xml</literal> file as shown in the following example where <literal>&lt;LEVEL&gt;</literal> is a logging level listed in <xref linkend="logback-proc_developing-solvers" />.
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;configuration&gt;

  &lt;logger name="org.optaplanner" level="&lt;LEVEL&gt;"/&gt;

  ...

&lt;/configuration&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Optional: If you have a multitenant application where multiple <literal>Solver</literal> instances might be running at the same time, separate the logging of each instance into separate files:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Surround the <literal>solve()</literal> call with <link xlink:href="http://logback.qos.ch/manual/mdc.html">Mapped Diagnostic Context</link> (MDC):
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">        MDC.put("tenant.name",tenantName);
        MySolution bestSolution = solver.solve(problem);
        MDC.remove("tenant.name");</programlisting>
							</listitem>
							<listitem>
								<simpara>
									Configure your logger to use different files for each <literal>${tenant.name}</literal>. For example, use a <literal>SiftingAppender</literal> in the <literal>logback.xml</literal> file:
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">  &lt;appender name="fileAppender" class="ch.qos.logback.classic.sift.SiftingAppender"&gt;
    &lt;discriminator&gt;
      &lt;key&gt;tenant.name&lt;/key&gt;
      &lt;defaultValue&gt;unknown&lt;/defaultValue&gt;
    &lt;/discriminator&gt;
    &lt;sift&gt;
      &lt;appender name="fileAppender.${tenant.name}" class="...FileAppender"&gt;
        &lt;file&gt;local/log/optaplanner-${tenant.name}.log&lt;/file&gt;
        ...
      &lt;/appender&gt;
    &lt;/sift&gt;
  &lt;/appender&gt;</programlisting>
								<note>
									<simpara>
										When running multiple solvers or one multithreaded solve, most appenders, including the console, cause congestion with <literal>debug</literal> and <literal>trace</literal> logging. Switch to an async appender to avoid this problem or turn off <literal>debug</literal> logging.
									</simpara>
								</note>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							If OptaPlanner doesn’t recognize the new level, temporarily add the system property <literal>-Dlogback.<emphasis>LEVEL</emphasis>=true</literal> to troubleshoot.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="Log4J-proc_developing-solvers">
				<title>Using Log4J to log OptaPlanner solver activity</title>
				<simpara>
					If you are already using Log4J and you do not want to switch to its faster successor, Logback, you can configure your OptaPlanner project for Log4J.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have an OptaPlanner project
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You are using the Log4J logging framework
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Add the bridge dependency to the project <literal>pom.xml</literal> file:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
      &lt;version&gt;1.x&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Configure the logging level on the package <literal>org.optaplanner</literal> in your <literal>log4j.xml</literal> file as shown in the following example, where <literal>&lt;LEVEL&gt;</literal> is a logging level listed in <xref linkend="logback-proc_developing-solvers" />.
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/"&gt;

  &lt;category name="org.optaplanner"&gt;
    &lt;priority value="&lt;LEVEL&gt;" /&gt;
  &lt;/category&gt;

  ...

&lt;/log4j:configuration&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Optional: If you have a multitenant application where multiple <literal>Solver</literal> instances might be running at the same time, separate the logging of each instance into separate files:
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Surround the <literal>solve()</literal> call with <link xlink:href="http://logback.qos.ch/manual/mdc.html">Mapped Diagnostic Context</link> (MDC):
								</simpara>
								
<programlisting language="java" linenumbering="unnumbered">        MDC.put("tenant.name",tenantName);
        MySolution bestSolution = solver.solve(problem);
        MDC.remove("tenant.name");</programlisting>
							</listitem>
							<listitem>
								<simpara>
									Configure your logger to use different files for each <literal>${tenant.name}</literal>. For example, use a <literal>SiftingAppender</literal> in the <literal>logback.xml</literal> file:
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">  &lt;appender name="fileAppender" class="ch.qos.logback.classic.sift.SiftingAppender"&gt;
    &lt;discriminator&gt;
      &lt;key&gt;tenant.name&lt;/key&gt;
      &lt;defaultValue&gt;unknown&lt;/defaultValue&gt;
    &lt;/discriminator&gt;
    &lt;sift&gt;
      &lt;appender name="fileAppender.${tenant.name}" class="...FileAppender"&gt;
        &lt;file&gt;local/log/optaplanner-${tenant.name}.log&lt;/file&gt;
        ...
      &lt;/appender&gt;
    &lt;/sift&gt;
  &lt;/appender&gt;</programlisting>
								<note>
									<simpara>
										When running multiple solvers or one multithreaded solve, most appenders, including the console, cause congestion with <literal>debug</literal> and <literal>trace</literal> logging. Switch to an async appender to avoid this problem or turn off <literal>debug</literal> logging.
									</simpara>
								</note>
							</listitem>
						</orderedlist>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="monitoring-the-solver-proc_developing-solvers">
				<title>Monitoring the solver</title>
				<simpara>
					OptaPlanner exposes metrics through <link xlink:href="https://micrometer.io/">Micrometer</link>, a metrics instrumentation library for Java applications. You can use Micrometer with popular monitoring systems to monitor the OptaPlanner solver.
				</simpara>
				<section remap="_configuring_a_quarkus_optaplanner_application_for_micrometer" xml:id="configuring_a_quarkus_optaplanner_application_for_micrometer">
					<title>Configuring a Quarkus OptaPlanner application for Micrometer</title>
					<simpara>
						To configure your OptaPlanner Quarkus application to use Micrometer and a specified monitoring system, add the Micrometer dependency to the <literal>pom.xml</literal> file.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have a Quarkus OptaPlanner application.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Add the following dependency to your application’s <literal>pom.xml</literal> file where <literal>&lt;MONITORING_SYSTEM&gt;</literal> is a monitoring system supported by Micrometer and Quarkus:
							</simpara>
							<note>
								<simpara>
									Prometheus is currently the only monitoring system supported by Quarkus.
								</simpara>
							</note>
							
<screen>&lt;dependency&gt;
 &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
 &lt;artifactId&gt;quarkus-micrometer-registry-&lt;MONITORING_SYSTEM&gt;&lt;/artifactId&gt;
&lt;/dependency&gt;</screen>
						</listitem>
						<listitem>
							<simpara>
								To run the application in development mode, enter the following command:
							</simpara>
							
<screen>mvn compile quarkus:dev</screen>
						</listitem>
						<listitem>
							<simpara>
								To view metrics for your application, enter the following URL in a browser:
							</simpara>
							
<screen>http://localhost:8080/q/metrics</screen>
						</listitem>
					</orderedlist>
				</section>
				<section remap="_configuring_a_spring_boot_optaplanner_application_for_micrometer" xml:id="configuring_a_spring_boot_optaplanner_application_for_micrometer">
					<title>Configuring a Spring Boot OptaPlanner application for Micrometer</title>
					<simpara>
						To configure your Spring Boot OptaPlanner application to use Micrometer and a specified monitoring system, add the Micrometer dependency to the <literal>pom.xml</literal> file.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have a Spring Boot OptaPlanner application.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Add the following dependency to your application’s <literal>pom.xml</literal> file where <literal>&lt;MONITORING_SYSTEM&gt;</literal> is a monitoring system supported by Micrometer and Spring Boot:
							</simpara>
							
<screen>&lt;dependency&gt;
 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
 &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
 &lt;groupId&gt;io.micrometer&lt;/groupId&gt;
 &lt;artifactId&gt;micrometer-registry-&lt;MONITORING_SYSTEM&gt;&lt;/artifactId&gt;
&lt;/dependency&gt;</screen>
						</listitem>
						<listitem>
							<simpara>
								Add configuration information to the application’s <literal>application.properties</literal> file. For information, see the <link xlink:href="https://micrometer.io">Micrometer</link> web site.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To run the application, enter the following command:
							</simpara>
							
<screen>mvn spring-boot:run</screen>
						</listitem>
						<listitem>
							<simpara>
								To view metrics for your application, enter the following URL in a browser:
							</simpara>
							<simpara>
								<link xlink:href="http://localhost:8080/actuator/metrics">http://localhost:8080/actuator/metrics</link>
							</simpara>
							<note>
								<simpara>
									Use the following URL as the Prometheus scraper path: <literal><link xlink:href="http://localhost:8080/actuator/prometheus">http://localhost:8080/actuator/prometheus</link></literal>
								</simpara>
							</note>
						</listitem>
					</orderedlist>
				</section>
				<section remap="_configuring_a_plain_java_optaplanner_application_for_micrometer" xml:id="configuring_a_plain_java_optaplanner_application_for_micrometer">
					<title>Configuring a plain Java OptaPlanner application for Micrometer</title>
					<simpara>
						To configuring a plain Java OptaPlanner application to use Micrometer, you must add Micrometer dependencies and configuration information for your chosen monitoring system to your project’s <literal>POM.XML</literal> file.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have a plain Java OptaPlanner application.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Add the following dependencies to your application’s <literal>pom.xml</literal> file where <literal>&lt;MONITORING_SYSTEM&gt;</literal> is a monitoring system that is configured with Micrometer and <literal>&lt;VERSION&gt;</literal> is the version of Micrometer that you are using:
							</simpara>
							
<screen>&lt;dependency&gt;
 &lt;groupId&gt;io.micrometer&lt;/groupId&gt;
 &lt;artifactId&gt;micrometer-registry-&lt;MONITORING_SYSTEM&gt;&lt;/artifactId&gt;
 &lt;version&gt;&lt;VERSION&gt;&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
 &lt;groupId&gt;io.micrometer&lt;/groupId&gt;
 &lt;artifactId&gt;micrometer-core&lt;/artifactId&gt;
 &lt;version&gt;`&lt;VERSION&gt;`&lt;/version&gt;
&lt;/dependency&gt;</screen>
						</listitem>
						<listitem>
							<simpara>
								Add Micrometer configuration information for your monitoring system to the beginning of your project’s <literal>pom.xml</literal> file. For information, see the <link xlink:href="https://micrometer.io">Micrometer</link> web site.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add the following line below the configuration information, where <literal>&lt;MONITORING_SYSTEM&gt;</literal> is the monitoring system that you added:
							</simpara>
							
<programlisting language="java" linenumbering="numbered">Metrics.addRegistry(&lt;MONITORING_SYSTEM&gt;);</programlisting>
							<simpara>
								The following example shows how to add the Prometheus monitoring system:
							</simpara>
							
<programlisting language="java" linenumbering="numbered">PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
try {
    HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
    server.createContext("/prometheus", httpExchange -&gt; {
        String response = prometheusRegistry.scrape();
        httpExchange.sendResponseHeaders(200, response.getBytes().length);
        try (OutputStream os = httpExchange.getResponseBody()) {
            os.write(response.getBytes());
        }
    });
    new Thread(server::start).start();
} catch (IOException e) {
    throw new RuntimeException(e);
}
Metrics.addRegistry(prometheusRegistry);</programlisting>
						</listitem>
						<listitem>
							<simpara>
								Open your monitoring system to view the metrics for your OptaPlanner project. The following metrics are exposed:
							</simpara>
							<note>
								<simpara>
									The names and format of the metrics vary depending on the registry.
								</simpara>
							</note>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>optaplanner.solver.errors.total</literal>: the total number of errors that occurred while solving since the start of the measuring.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>optaplanner.solver.solve-length.active-count</literal>: the number of solvers currently solving.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>optaplanner.solver.solve-length.seconds-max</literal>: run time of the longest-running currently active solver.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>optaplanner.solver.solve-length.seconds-duration-sum</literal>: the sum of each active solver’s solve duration. For example, if there are two active solvers, one running for three minutes and the other for one minute, the total solve time is four minutes.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</orderedlist>
				</section>
				<section remap="_additional_metrics" xml:id="additional_metrics">
					<title>Additional Metrics</title>
					<simpara>
						For more detailed monitoring, you can configure OptaPlanner to monitor additional metrics at a performance cost. The following example uses the <literal>BEST_SCORE</literal> and <literal>SCORE_CALCULATION_COUNT</literal> metric:
					</simpara>
					
<programlisting language="xml" linenumbering="unnumbered">&lt;solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd"&gt;
  &lt;monitoring&gt;
    &lt;metric&gt;BEST_SCORE&lt;/metric&gt;
    &lt;metric&gt;SCORE_CALCULATION_COUNT&lt;/metric&gt;
    ...
  &lt;/monitoring&gt;
  ...
&lt;/solver&gt;</programlisting>
					<simpara>
						You can enable the following metrics in this configuration:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								<literal>SOLVE_DURATION</literal> (default, Micrometer meter ID: "optaplanner.solver.solve.duration"): Measures the duration of solving for the longest active solver, the number of active solvers, and the cumulative duration of all active solvers.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>ERROR_COUNT</literal> (default, Micrometer meter id: "optaplanner.solver.errors"): Measures the number of errors that occur while solving.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>SCORE_CALCULATION_COUNT</literal> (default, Micrometer meter id: "optaplanner.solver.score.calculation.count"): Measures the number of score calculations OptaPlanner performed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>BEST_SCORE</literal> (Micrometer meter id: "optaplanner.solver.best.score.*"): Measures the score of the best solution OptaPlanner has found so far. There are separate meters for each level of the score. For instance, for a <literal>HardSoftScore</literal>, there are <literal>optaplanner.solver.best.score.hard.score</literal> and <literal>optaplanner.solver.best.score.soft.score</literal> meters.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>STEP_SCORE</literal> (Micrometer meter id: "optaplanner.solver.step.score.*"): Measures the score of each step OptaPlanner takes. There are separate meters for each level of the score. For instance, for a <literal>HardSoftScore</literal>, there are <literal>optaplanner.solver.step.score.hard.score</literal> and <literal>optaplanner.solver.step.score.soft.score</literal> meters.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>BEST_SOLUTION_MUTATION</literal> (Micrometer meter id: "optaplanner.solver.best.solution.mutation"): Measures the number of changed planning variables between consecutive best solutions.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>MOVE_COUNT_PER_STEP</literal> (Micrometer meter id: "optaplanner.solver.step.move.count"): Measures the number of moves evaluated in a step.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>MEMORY_USE</literal> (Micrometer meter id: "jvm.memory.used"): Measures the amount of memory used across the JVM. This does not measure the amount of memory used by a solver; two solvers on the same JVM will report the same value for this metric.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>CONSTRAINT_MATCH_TOTAL_BEST_SCORE</literal> (Micrometer meter id: "optaplanner.solver.constraint.match.best.score.*"): Measures the score impact of each constraint on the best solution OptaPlanner has found so far. There are separate meters for each level of the score, with tags for each constraint. For instance, for a <literal>HardSoftScore</literal> for a constraint "Minimize Cost" in package "com.example", there are <literal>optaplanner.solver.constraint.match.best.score.hard.score</literal> and <literal>optaplanner.solver.constraint.match.best.score.soft.score</literal> meters with tags "constraint.package=com.example" and "constraint.name=Minimize Cost".
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>CONSTRAINT_MATCH_TOTAL_STEP_SCORE</literal> (Micrometer meter id: "optaplanner.solver.constraint.match.step.score.*"): Measures the score impact of each constraint on the current step. There are separate meters for each level of the score, with tags for each constraint. For instance, for a <literal>HardSoftScore</literal> for a constraint "Minimize Cost" in package "com.example", there are <literal>optaplanner.solver.constraint.match.step.score.hard.score</literal> and <literal>optaplanner.solver.constraint.match.step.score.soft.score</literal> meters with tags "constraint.package=com.example" and "constraint.name=Minimize Cost".
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>PICKED_MOVE_TYPE_BEST_SCORE_DIFF</literal> (Micrometer meter id: "optaplanner.solver.move.type.best.score.diff.*"): Measures how much a particular move type improves the best solution. There are separate meters for each level of the score, with a tag for the move type. For instance, for a <literal>HardSoftScore</literal> and a <literal>ChangeMove</literal> for the computer of a process, there are <literal>optaplanner.solver.move.type.best.score.diff.hard.score</literal> and <literal>optaplanner.solver.move.type.best.score.diff.soft.score</literal> meters with the tag <literal>move.type=ChangeMove(Process.computer)</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<literal>PICKED_MOVE_TYPE_STEP_SCORE_DIFF</literal> (Micrometer meter id: "optaplanner.solver.move.type.step.score.diff.*"): Measures how much a particular move type improves the best solution. There are separate meters for each level of the score, with a tag for the move type. For instance, for a <literal>HardSoftScore</literal> and a <literal>ChangeMove</literal> for the computer of a process, there are <literal>optaplanner.solver.move.type.step.score.diff.hard.score</literal> and <literal>optaplanner.solver.move.type.step.score.diff.soft.score</literal> meters with the tag <literal>move.type=ChangeMove(Process.computer)</literal>.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
			</section>
			<section xml:id="cofiguring-random-number-proc_developing-solvers">
				<title>Configuring the random number generator</title>
				<simpara>
					Many heuristics and metaheuristics depend on a pseudorandom number generator for move selection, to resolve score ties, probability based move acceptance, and so on. During solving, the same random instance is reused to improve reproducibility, performance, and uniform distribution of random values.
				</simpara>
				<simpara>
					A random seed is a number used to initialize a pseudorandom number generator.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Optional: To change the random seed of a random instance, specify a <literal>randomSeed</literal>:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd"&gt;
  &lt;randomSeed&gt;0&lt;/randomSeed&gt;
  ...
&lt;/solver&gt;</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Optional: To change the pseudorandom number generator implementation, specify a value for the <literal>randomType</literal> property listed in the solver configuration file below, where <literal>&lt;RANDOM_NUMBER_GENERATOR&gt;</literal> is a pseudorandom number generator:
						</simpara>
						
<programlisting language="xml" linenumbering="unnumbered">&lt;solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd"&gt;
  &lt;randomType&gt;&lt;RANDOM_NUMBER_GENERATOR&gt;&lt;/randomType&gt;
  ...
&lt;/solver&gt;</programlisting>
						<simpara>
							The following pseudorandom number generators are supported:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>JDK</literal> (default): Standard random number generator implementation (<literal>java.util.Random</literal>)
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>MERSENNE_TWISTER</literal>: Random number generator implementation by <link xlink:href="http://commons.apache.org/proper/commons-math/userguide/random.html">Commons Math</link>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>WELL512A</literal>, <literal>WELL1024A</literal>, <literal>WELL19937A</literal>, <literal>WELL19937C</literal>, <literal>WELL44497A</literal> and <literal>WELL44497B</literal>: Random number generator implementation by <link xlink:href="http://commons.apache.org/proper/commons-math/userguide/random.html">Commons Math</link>
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<simpara>
					For most use cases, the value of the <literal>randomType</literal> property has no significant impact on the average quality of the best solution on multiple data sets.
				</simpara>
			</section>
		</chapter>
		<chapter xml:id="sovlermanager-con_developing-solvers">
			<title>The OptaPlanner SolverManager</title>
			<simpara>
				A <literal>SolverManager</literal> is a facade for one or more <literal>Solver</literal> instances to simplify solving planning problems in REST and other enterprise services.
			</simpara>
			<simpara>
				Unlike the <literal>Solver.solve(…​)</literal> method, a <literal>SolverManager</literal> has the following characteristics:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						<literal>SolverManager.solve(…​)</literal> returns immediately: it schedules a problem for asynchronous solving without blocking the calling thread. This avoids timeout issues of HTTP and other technologies.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						<literal>SolverManager.solve(…​)</literal> solves multiple planning problems of the same domain, in parallel.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Internally, a <literal>SolverManager</literal> manages a thread pool of solver threads, which call <literal>Solver.solve(…​)</literal>, and a thread pool of consumer threads, which handle best solution changed events.
			</simpara>
			<simpara>
				In Quarkus and Spring Boot, the <literal>SolverManager</literal> instance is automatically injected in your code. If you are using a platform other than Quarkus or Spring Boot, build a <literal>SolverManager</literal> instance with the <literal>create(…​)</literal> method:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">SolverConfig solverConfig = SolverConfig.createFromXmlResource(".../cloudBalancingSolverConfig.xml");
SolverManager&lt;CloudBalance, UUID&gt; solverManager = SolverManager.create(solverConfig, new SolverManagerConfig());</programlisting>
			<simpara>
				Each problem submitted to the <literal>SolverManager.solve(…​)</literal> methods must have a unique problem ID. Later calls to <literal>getSolverStatus(problemId)</literal> or <literal>terminateEarly(problemId)</literal> use that problem ID to distinguish between planning problems. The problem ID must be an immutable class, such as <literal>Long</literal>, <literal>String</literal>, or <literal>java.util.UUID</literal>.
			</simpara>
			<simpara>
				The <literal>SolverManagerConfig</literal> class has a <literal>parallelSolverCount</literal> property that controls how many solvers are run in parallel. For example, if the <literal>parallelSolverCount</literal> property` is set to <literal>4</literal> and you submit five problems, four problems start solving immediately and the fifth problem starts when one of the first problems ends. If those problems solve for five minutes each, the fifth problem takes 10 minutes to finish. By default, <literal>parallelSolverCount</literal> is set to <literal>AUTO</literal>, which resolves to half the CPU cores, regardless of the <literal>moveThreadCount</literal> of the solvers.
			</simpara>
			<simpara>
				To retrieve the best solution, after solving terminates normally use <literal>SolverJob.getFinalBestSolution()</literal>:
			</simpara>
			
<programlisting language="java" linenumbering="unnumbered">CloudBalance problem1 = ...;
UUID problemId = UUID.randomUUID();
// Returns immediately
SolverJob&lt;CloudBalance, UUID&gt; solverJob = solverManager.solve(problemId, problem1);
...
CloudBalance solution1;
try {
    // Returns only after solving terminates
    solution1 = solverJob.getFinalBestSolution();
} catch (InterruptedException | ExecutionException e) {
    throw ...;
}</programlisting>
			<simpara>
				However, there are better approaches, both for solving batch problems before a user needs the solution as well as for live solving while a user is actively waiting for the solution.
			</simpara>
			<simpara>
				The current <literal>SolverManager</literal> implementation runs on a single computer node, but future work aims to distribute solver loads across a cloud.
			</simpara>
			<section xml:id="batch-solving-con_developing-solvers">
				<title>Batch solving problems</title>
				<simpara>
					Batch solving is solving multiple data sets in parallel. Batch solving is particularly useful overnight:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							There are typically few or no problem changes in the middle of the night. Some organizations enforce a deadline, for example, <emphasis>submit all day off requests before midnight</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The solvers can run for much longer, often hours, because nobody is waiting for the results and CPU resources are often cheaper.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Solutions are available when employees arrive at work the next working day.
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Procedure</title>
					<para>
						To batch solve problems in parallel, limited by <literal>parallelSolverCount</literal>, call <literal>solve(…​)</literal> for each data set created the following class:
					</para>
				</formalpara>
				<simpara>
					+
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">public class TimeTableService {

    private SolverManager&lt;TimeTable, Long&gt; solverManager;

    // Returns immediately, call it for every data set
    public void solveBatch(Long timeTableId) {
        solverManager.solve(timeTableId,
                // Called once, when solving starts
                this::findById,
                // Called once, when solving ends
                this::save);
    }

    public TimeTable findById(Long timeTableId) {...}

    public void save(TimeTable timeTable) {...}

}</programlisting>
			</section>
			<section xml:id="show-progress-proc_developing-solvers">
				<title>Solve and listen to show progress</title>
				<simpara>
					When a solver is running while a user is waiting for a solution, the user might need to wait for several minutes or hours before receiving a result. To assure the user that everything is going well, show progress by displaying the best solution and best score attained so far.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							To handle intermediate best solutions, use <literal>solveAndListen(…​)</literal>:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">public class TimeTableService {

    private SolverManager&lt;TimeTable, Long&gt; solverManager;

    // Returns immediately
    public void solveLive(Long timeTableId) {
        solverManager.solveAndListen(timeTableId,
                // Called once, when solving starts
                this::findById,
                // Called multiple times, for every best solution change
                this::save);
    }

    public TimeTable findById(Long timeTableId) {...}

    public void save(TimeTable timeTable) {...}

    public void stopSolving(Long timeTableId) {
        solverManager.terminateEarly(timeTableId);
    }

}</programlisting>
						<simpara>
							This implementation is using the database to communicate with the UI, which polls the database. More advanced implementations push the best solutions directly to the UI or a messaging queue.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							When the user is satisfied with the intermediate best solution and does not want to wait any longer for a better one, call <literal>SolverManager.terminateEarly(problemId)</literal>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
	</part>
	<part xml:id="assembly-optaplanner-quickstarts_developing-solvers">
		<title>Red Hat build of OptaPlanner quick start guides</title>
		<partintro>
			<simpara>
				Red Hat build of OptaPlanner provides the following quick start guides to demonstrate how OptaPlanner can integrate with different techologies:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Red Hat build of OptaPlanner on Red Hat build of Quarkus: a school timetable quick start guide
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat build of OptaPlanner on Red Hat build of Quarkus: a vaccination appointment scheduler quick start guide
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat build of OptaPlanner on Spring Boot: a school timetable quick start guide
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Red Hat build of OptaPlanner with Java solvers: a cloud balancing quick start guide
					</simpara>
				</listitem>
			</itemizedlist>
		</partintro>
		<chapter xml:id="assembly-optaplanner-school-timetable-quarkus_optaplanner-quickstarts">
			<title>Red Hat build of OptaPlanner on Red Hat build of Quarkus: a school timetable quick start guide</title>
			<simpara>
				This guide walks you through the process of creating a Red Hat build of Quarkus application with Red Hat build of OptaPlanner’s constraint solving artificial intelligence (AI). You will build a REST application that optimizes a school timetable for students and teachers
			</simpara>
			<informalfigure>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/_images/optimizer/timeTableAppScreenshot.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>timeTableAppScreenshot</phrase>
				</textobject>
			</mediaobject>
			</informalfigure>
			<simpara>
				Your service will assign <literal>Lesson</literal> instances to <literal>Timeslot</literal> and <literal>Room</literal> instances automatically by using AI to adhere to the following hard and soft <emphasis>scheduling constraints</emphasis>:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						A room can have at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher can teach at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A student can attend at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher prefers to teach in a single room.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher prefers to teach sequential lessons and dislikes gaps between lessons.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Mathematically speaking, school timetabling is an <emphasis>NP-hard</emphasis> problem. That means it is difficult to scale. Simply iterating through all possible combinations with brute force would take millions of years for a non-trivial data set, even on a supercomputer. Fortunately, AI constraint solvers such as Red Hat build of OptaPlanner have advanced algorithms that deliver a near-optimal solution in a reasonable amount of time. What is considered to be a reasonable amount of time is subjective and depends on the goals of your problem.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						OpenJDK 11 or later is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						An IDE, such as IntelliJ IDEA, VSCode, Eclipse, or NetBeans is available.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="proc-quarkus-creating-proj_optaplanner-quarkus">
				<title>Creating an OptaPlanner Red Hat build of Quarkus Maven project using the Maven plug-in</title>
				<simpara>
					You can get up and running with a Red Hat build of OptaPlanner and Quarkus application using Apache Maven and the Quarkus Maven plug-in.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							OpenJDK 11 or later is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							In a command terminal, enter the following command to verify that Maven is using JDK 11 and that the Maven version is 3.6 or higher:
						</simpara>
						
<screen>mvn --version</screen>
					</listitem>
					<listitem>
						<simpara>
							If the preceding command does not return JDK 11, add the path to JDK 11 to the PATH environment variable and enter the preceding command again.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To generate a Quarkus OptaPlanner quickstart project, enter the following command:
						</simpara>
						
<programlisting language="shell" linenumbering="unnumbered">mvn com.redhat.quarkus.platform:quarkus-maven-plugin:2.7.5.Final-redhat-00011:create \
    -DprojectGroupId=com.example \
    -DprojectArtifactId=optaplanner-quickstart  \
    -Dextensions="resteasy,resteasy-jackson,optaplanner-quarkus,optaplanner-quarkus-jackson" \
    -DplatformGroupId=com.redhat.quarkus.platform
    -DplatformVersion=2.7.5.Final-redhat-00011 \
    -DnoExamples</programlisting>
						<simpara>
							This command create the following elements in the <literal>./optaplanner-quickstart</literal> directory:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									The Maven structure
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Example <literal>Dockerfile</literal> file in <literal>src/main/docker</literal>
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									The application configuration file
								</simpara>
								<table colsep="1" frame="all" rowsep="1">
									<title>Properties used in the mvn <literal>io.quarkus:quarkus-maven-plugin:2.7.5.Final-redhat-00011:create</literal> command</title>
									<tgroup cols="2">
										<colspec colname="col_1" colwidth="30*"></colspec>
										<colspec colname="col_2" colwidth="70*"></colspec>
										<thead>
											<row>
												<entry align="left" valign="top">Property</entry>
												<entry align="left" valign="top">Description</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectGroupId</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The group ID of the project.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>projectArtifactId</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													The artifact ID of the project.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>extensions</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													A comma-separated list of Quarkus extensions to use with this project. For a full list of Quarkus extensions, enter <literal>mvn quarkus:list-extensions</literal> on the command line.
												</simpara>
												</entry>
											</row>
											<row>
												<entry align="left" valign="top">
												<simpara>
													<literal>noExamples</literal>
												</simpara>
												</entry>
												<entry align="left" valign="top">
												<simpara>
													Creates a project with the project structure but without tests or classes.
												</simpara>
												</entry>
											</row>
										</tbody>
									</tgroup>
								</table>
								<simpara>
									The values of the <literal>projectGroupID</literal> and the <literal>projectArtifactID</literal> properties are used to generate the project version. The default project version is <literal>1.0.0-SNAPSHOT</literal>.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							To view your OptaPlanner project, change directory to the OptaPlanner Quickstarts directory:
						</simpara>
						
<screen>cd optaplanner-quickstart</screen>
					</listitem>
					<listitem>
						<simpara>
							Review the <literal>pom.xml</literal> file. The content should be similar to the following example:
						</simpara>
						
<screen>&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;io.quarkus.platform&lt;/groupId&gt;
      &lt;artifactId&gt;quarkus-bom&lt;/artifactId&gt;
      &lt;version&gt;2.7.5.Final-redhat-00011&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
      &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;io.quarkus.platform&lt;/groupId&gt;
      &lt;artifactId&gt;quarkus-optaplanner-bom&lt;/artifactId&gt;
      &lt;version&gt;2.7.5.Final-redhat-00011&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
      &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-resteasy&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-resteasy-jackson&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-quarkus&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-quarkus-jackson&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-junit5&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="business-optimizr-domain-objects-proc_optaplanner-quarkus">
				<title>Model the domain objects</title>
				<simpara>
					The goal of the Red Hat build of OptaPlanner timetable project is to assign each lesson to a time slot and a room. To do this, add three classes, <literal>Timeslot</literal>, <literal>Lesson</literal>, and <literal>Room</literal>, as shown in the following diagram:
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/optimizer/timeTableClassDiagramPure.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>timeTableClassDiagramPure</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<formalpara>
					<title>Timeslot</title>
					<para>
						The <literal>Timeslot</literal> class represents a time interval when lessons are taught, for example, <literal>Monday 10:30 - 11:30</literal> or <literal>Tuesday 13:30 - 14:30</literal>. In this example, all time slots have the same duration and there are no time slots during lunch or other breaks.
					</para>
				</formalpara>
				<simpara>
					A time slot has no date because a high school schedule just repeats every week. There is no need for <link xlink:href="https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning">continuous planning</link>. A timeslot is called a <emphasis>problem fact</emphasis> because no <literal>Timeslot</literal> instances change during solving. Such classes do not require any OptaPlanner-specific annotations.
				</simpara>
				<formalpara>
					<title>Room</title>
					<para>
						The <literal>Room</literal> class represents a location where lessons are taught, for example, <literal>Room A</literal> or <literal>Room B</literal>. In this example, all rooms are without capacity limits and they can accommodate all lessons.
					</para>
				</formalpara>
				<simpara>
					<literal>Room</literal> instances do not change during solving so <literal>Room</literal> is also a <emphasis>problem fact</emphasis>.
				</simpara>
				<formalpara>
					<title>Lesson</title>
					<para>
						During a lesson, represented by the <literal>Lesson</literal> class, a teacher teaches a subject to a group of students, for example, <literal>Math by A.Turing for 9th grade</literal> or <literal>Chemistry by M.Curie for 10th grade</literal>. If a subject is taught multiple times each week by the same teacher to the same student group, there are multiple <literal>Lesson</literal> instances that are only distinguishable by <literal>id</literal>. For example, the 9th grade has six math lessons a week.
					</para>
				</formalpara>
				<simpara>
					During solving, OptaPlanner changes the <literal>timeslot</literal> and <literal>room</literal> fields of the <literal>Lesson</literal> class to assign each lesson to a time slot and a room. Because OptaPlanner changes these fields, <literal>Lesson</literal> is a <emphasis>planning entity</emphasis>:
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/optimizer/timeTableClassDiagramAnnotated.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>timeTableClassDiagramAnnotated</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Most of the fields in the previous diagram contain input data, except for the orange fields. A lesson’s <literal>timeslot</literal> and <literal>room</literal> fields are unassigned (<literal>null</literal>) in the input data and assigned (not <literal>null</literal>) in the output data. OptaPlanner changes these fields during solving. Such fields are called planning variables. In order for OptaPlanner to recognize them, both the <literal>timeslot</literal> and <literal>room</literal> fields require an <literal>@PlanningVariable</literal> annotation. Their containing class, <literal>Lesson</literal>, requires an <literal>@PlanningEntity</literal> annotation.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Timeslot.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import java.time.DayOfWeek;
import java.time.LocalTime;

public class Timeslot {

    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;

    private Timeslot() {
    }

    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {
        this.dayOfWeek = dayOfWeek;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    @Override
    public String toString() {
        return dayOfWeek + " " + startTime.toString();
    }

    // ********************************
    // Getters and setters
    // ********************************

    public DayOfWeek getDayOfWeek() {
        return dayOfWeek;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }

}</programlisting>
						<simpara>
							Notice the <literal>toString()</literal> method keeps the output short so it is easier to read OptaPlanner’s <literal>DEBUG</literal> or <literal>TRACE</literal> log, as shown later.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Room.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

public class Room {

    private String name;

    private Room() {
    }

    public Room(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return name;
    }

    // ********************************
    // Getters and setters
    // ********************************

    public String getName() {
        return name;
    }

}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Lesson.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import org.optaplanner.core.api.domain.entity.PlanningEntity;
import org.optaplanner.core.api.domain.variable.PlanningVariable;

@PlanningEntity
public class Lesson {

    private Long id;

    private String subject;
    private String teacher;
    private String studentGroup;

    @PlanningVariable(valueRangeProviderRefs = "timeslotRange")
    private Timeslot timeslot;

    @PlanningVariable(valueRangeProviderRefs = "roomRange")
    private Room room;

    private Lesson() {
    }

    public Lesson(Long id, String subject, String teacher, String studentGroup) {
        this.id = id;
        this.subject = subject;
        this.teacher = teacher;
        this.studentGroup = studentGroup;
    }

    @Override
    public String toString() {
        return subject + "(" + id + ")";
    }

    // ********************************
    // Getters and setters
    // ********************************

    public Long getId() {
        return id;
    }

    public String getSubject() {
        return subject;
    }

    public String getTeacher() {
        return teacher;
    }

    public String getStudentGroup() {
        return studentGroup;
    }

    public Timeslot getTimeslot() {
        return timeslot;
    }

    public void setTimeslot(Timeslot timeslot) {
        this.timeslot = timeslot;
    }

    public Room getRoom() {
        return room;
    }

    public void setRoom(Room room) {
        this.room = room;
    }

}</programlisting>
						<simpara>
							The <literal>Lesson</literal> class has an <literal>@PlanningEntity</literal> annotation, so OptaPlanner knows that this class changes during solving because it contains one or more planning variables.
						</simpara>
						<simpara>
							The <literal>timeslot</literal> field has an <literal>@PlanningVariable</literal> annotation, so OptaPlanner knows that it can change its value. In order to find potential <literal>Timeslot</literal> instances to assign to this field, OptaPlanner uses the <literal>valueRangeProviderRefs</literal> property to connect to a value range provider that provides a <literal>List&lt;Timeslot&gt;</literal> to pick from. See <xref linkend="business-optimizr-gather-objects-proc_optaplanner-quarkus" /> for information about value range providers.
						</simpara>
						<simpara>
							The <literal>room</literal> field also has an <literal>@PlanningVariable</literal> annotation for the same reasons.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="business-optimizr-define-contraints-proc_optaplanner-quarkus">
				<title>Define the constraints and calculate the score</title>
				<simpara>
					When solving a problem, a <emphasis>score</emphasis> represents the quality of a specific solution. The higher the score the better. Red Hat build of OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time. It might be the <emphasis>optimal</emphasis> solution.
				</simpara>
				<simpara>
					Because the timetable example use case has hard and soft constraints, use the <literal>HardSoftScore</literal> class to represent the score:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Hard constraints must not be broken. For example: <emphasis>A room can have at most one lesson at the same time.</emphasis>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Soft constraints should not be broken. For example: <emphasis>A teacher prefers to teach in a single room.</emphasis>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Hard constraints are weighted against other hard constraints. Soft constraints are weighted against other soft constraints. Hard constraints always outweigh soft constraints, regardless of their respective weights.
				</simpara>
				<simpara>
					To calculate the score, you could implement an <literal>EasyScoreCalculator</literal> class:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">public class TimeTableEasyScoreCalculator implements EasyScoreCalculator&lt;TimeTable&gt; {

    @Override
    public HardSoftScore calculateScore(TimeTable timeTable) {
        List&lt;Lesson&gt; lessonList = timeTable.getLessonList();
        int hardScore = 0;
        for (Lesson a : lessonList) {
            for (Lesson b : lessonList) {
                if (a.getTimeslot() != null &amp;&amp; a.getTimeslot().equals(b.getTimeslot())
                        &amp;&amp; a.getId() &lt; b.getId()) {
                    // A room can accommodate at most one lesson at the same time.
                    if (a.getRoom() != null &amp;&amp; a.getRoom().equals(b.getRoom())) {
                        hardScore--;
                    }
                    // A teacher can teach at most one lesson at the same time.
                    if (a.getTeacher().equals(b.getTeacher())) {
                        hardScore--;
                    }
                    // A student can attend at most one lesson at the same time.
                    if (a.getStudentGroup().equals(b.getStudentGroup())) {
                        hardScore--;
                    }
                }
            }
        }
        int softScore = 0;
        // Soft constraints are only implemented in the "complete" implementation
        return HardSoftScore.of(hardScore, softScore);
    }

}</programlisting>
				<simpara>
					Unfortunately, this solution does not scale well because it is non-incremental: every time a lesson is assigned to a different time slot or room, all lessons are re-evaluated to calculate the new score.
				</simpara>
				<simpara>
					A better solution is to create a <literal>src/main/java/com/example/solver/TimeTableConstraintProvider.java</literal> class to perform incremental score calculation. This class uses OptaPlanner’s ConstraintStream API which is inspired by Java 8 Streams and SQL. The <literal>ConstraintProvider</literal> scales an order of magnitude better than the <literal>EasyScoreCalculator</literal>: <emphasis>O</emphasis>(n) instead of <emphasis>O</emphasis>(n²).
				</simpara>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the following <literal>src/main/java/com/example/solver/TimeTableConstraintProvider.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package com.example.solver;

import com.example.domain.Lesson;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.stream.Constraint;
import org.optaplanner.core.api.score.stream.ConstraintFactory;
import org.optaplanner.core.api.score.stream.ConstraintProvider;
import org.optaplanner.core.api.score.stream.Joiners;

public class TimeTableConstraintProvider implements ConstraintProvider {

    @Override
    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {
        return new Constraint[] {
                // Hard constraints
                roomConflict(constraintFactory),
                teacherConflict(constraintFactory),
                studentGroupConflict(constraintFactory),
                // Soft constraints are only implemented in the "complete" implementation
        };
    }

    private Constraint roomConflict(ConstraintFactory constraintFactory) {
        // A room can accommodate at most one lesson at the same time.

        // Select a lesson ...
        return constraintFactory.from(Lesson.class)
                // ... and pair it with another lesson ...
                .join(Lesson.class,
                        // ... in the same timeslot ...
                        Joiners.equal(Lesson::getTimeslot),
                        // ... in the same room ...
                        Joiners.equal(Lesson::getRoom),
                        // ... and the pair is unique (different id, no reverse pairs)
                        Joiners.lessThan(Lesson::getId))
                // then penalize each pair with a hard weight.
                .penalize("Room conflict", HardSoftScore.ONE_HARD);
    }

    private Constraint teacherConflict(ConstraintFactory constraintFactory) {
        // A teacher can teach at most one lesson at the same time.
        return constraintFactory.from(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getTeacher),
                        Joiners.lessThan(Lesson::getId))
                .penalize("Teacher conflict", HardSoftScore.ONE_HARD);
    }

    private Constraint studentGroupConflict(ConstraintFactory constraintFactory) {
        // A student can attend at most one lesson at the same time.
        return constraintFactory.from(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getStudentGroup),
                        Joiners.lessThan(Lesson::getId))
                .penalize("Student group conflict", HardSoftScore.ONE_HARD);
    }

}</programlisting>
			</section>
			<section xml:id="business-optimizr-gather-objects-proc_optaplanner-quarkus">
				<title>Gather the domain objects in a planning solution</title>
				<simpara>
					A <literal>TimeTable</literal> instance wraps all <literal>Timeslot</literal>, <literal>Room</literal>, and <literal>Lesson</literal> instances of a single dataset. Furthermore, because it contains all lessons, each with a specific planning variable state, it is a <emphasis>planning solution</emphasis> and it has a score:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							If lessons are still unassigned, then it is an <emphasis>uninitialized</emphasis> solution, for example, a solution with the score <literal>-4init/0hard/0soft</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If it breaks hard constraints, then it is an <emphasis>infeasible</emphasis> solution, for example, a solution with the score <literal>-2hard/-3soft</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If it adheres to all hard constraints, then it is a <emphasis>feasible</emphasis> solution, for example, a solution with the score <literal>0hard/-7soft</literal>.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The <literal>TimeTable</literal> class has an <literal>@PlanningSolution</literal> annotation, so Red Hat build of OptaPlanner knows that this class contains all of the input and output data.
				</simpara>
				<simpara>
					Specifically, this class is the input of the problem:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <literal>timeslotList</literal> field with all time slots
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of problem facts, because they do not change during solving.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							A <literal>roomList</literal> field with all rooms
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of problem facts, because they do not change during solving.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							A <literal>lessonList</literal> field with all lessons
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of planning entities because they change during solving.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Of each <literal>Lesson</literal>:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											The values of the <literal>timeslot</literal> and <literal>room</literal> fields are typically still <literal>null</literal>, so unassigned. They are planning variables.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											The other fields, such as <literal>subject</literal>, <literal>teacher</literal> and <literal>studentGroup</literal>, are filled in. These fields are problem properties.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					However, this class is also the output of the solution:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <literal>lessonList</literal> field for which each <literal>Lesson</literal> instance has non-null <literal>timeslot</literal> and <literal>room</literal> fields after solving
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A <literal>score</literal> field that represents the quality of the output solution, for example, <literal>0hard/-5soft</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the <literal>src/main/java/com/example/domain/TimeTable.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import java.util.List;

import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.PlanningSolution;
import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;

@PlanningSolution
public class TimeTable {

    @ValueRangeProvider(id = "timeslotRange")
    @ProblemFactCollectionProperty
    private List&lt;Timeslot&gt; timeslotList;

    @ValueRangeProvider(id = "roomRange")
    @ProblemFactCollectionProperty
    private List&lt;Room&gt; roomList;

    @PlanningEntityCollectionProperty
    private List&lt;Lesson&gt; lessonList;

    @PlanningScore
    private HardSoftScore score;

    private TimeTable() {
    }

    public TimeTable(List&lt;Timeslot&gt; timeslotList, List&lt;Room&gt; roomList,
            List&lt;Lesson&gt; lessonList) {
        this.timeslotList = timeslotList;
        this.roomList = roomList;
        this.lessonList = lessonList;
    }

    // ********************************
    // Getters and setters
    // ********************************

    public List&lt;Timeslot&gt; getTimeslotList() {
        return timeslotList;
    }

    public List&lt;Room&gt; getRoomList() {
        return roomList;
    }

    public List&lt;Lesson&gt; getLessonList() {
        return lessonList;
    }

    public HardSoftScore getScore() {
        return score;
    }

}</programlisting>
				<formalpara>
					<title>The value range providers</title>
					<para>
						The <literal>timeslotList</literal> field is a value range provider. It holds the <literal>Timeslot</literal> instances which OptaPlanner can pick from to assign to the <literal>timeslot</literal> field of <literal>Lesson</literal> instances. The <literal>timeslotList</literal> field has an <literal>@ValueRangeProvider</literal> annotation to connect those two, by matching the <literal>id</literal> with the <literal>valueRangeProviderRefs</literal> of the <literal>@PlanningVariable</literal> in the <literal>Lesson</literal>.
					</para>
				</formalpara>
				<simpara>
					Following the same logic, the <literal>roomList</literal> field also has an <literal>@ValueRangeProvider</literal> annotation.
				</simpara>
				<formalpara>
					<title>The problem fact and planning entity properties</title>
					<para>
						Furthermore, OptaPlanner needs to know which <literal>Lesson</literal> instances it can change as well as how to retrieve the <literal>Timeslot</literal> and <literal>Room</literal> instances used for score calculation by your <literal>TimeTableConstraintProvider</literal>.
					</para>
				</formalpara>
				<simpara>
					The <literal>timeslotList</literal> and <literal>roomList</literal> fields have an <literal>@ProblemFactCollectionProperty</literal> annotation, so your <literal>TimeTableConstraintProvider</literal> can select from those instances.
				</simpara>
				<simpara>
					The <literal>lessonList</literal> has an <literal>@PlanningEntityCollectionProperty</literal> annotation, so OptaPlanner can change them during solving and your <literal>TimeTableConstraintProvider</literal> can select from those too.
				</simpara>
			</section>
			<section xml:id="solver-service-proc_optaplanner-quarkus">
				<title>Create the solver service</title>
				<simpara>
					Solving planning problems on REST threads causes HTTP timeout issues. Therefore, the Quarkus extension injects a SolverManager, which runs solvers in a separate thread pool and can solve multiple data sets in parallel.
				</simpara>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the <literal>src/main/java/org/acme/optaplanner/rest/TimeTableResource.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package org.acme.optaplanner.rest;

import java.util.UUID;
import java.util.concurrent.ExecutionException;
import javax.inject.Inject;
import javax.ws.rs.POST;
import javax.ws.rs.Path;

import org.acme.optaplanner.domain.TimeTable;
import org.optaplanner.core.api.solver.SolverJob;
import org.optaplanner.core.api.solver.SolverManager;

@Path("/timeTable")
public class TimeTableResource {

    @Inject
    SolverManager&lt;TimeTable, UUID&gt; solverManager;

    @POST
    @Path("/solve")
    public TimeTable solve(TimeTable problem) {
        UUID problemId = UUID.randomUUID();
        // Submit the problem to start solving
        SolverJob&lt;TimeTable, UUID&gt; solverJob = solverManager.solve(problemId, problem);
        TimeTable solution;
        try {
            // Wait until the solving ends
            solution = solverJob.getFinalBestSolution();
        } catch (InterruptedException | ExecutionException e) {
            throw new IllegalStateException("Solving failed.", e);
        }
        return solution;
    }

}</programlisting>
				<simpara>
					This initial implementation waits for the solver to finish, which can still cause an HTTP timeout. The complete implementation avoids HTTP timeouts much more elegantly.
				</simpara>
			</section>
			<section xml:id="business-optimizr-set-solver-time-proc_optaplanner-quarkus">
				<title>Set the solver termination time</title>
				<simpara>
					If your planning application does not have a termination setting or a termination event, it theoretically runs forever and in reality eventually causes an HTTP timeout error. To prevent this from occurring, use the <literal>optaplanner.solver.termination.spent-limit</literal> parameter to specify the length of time after which the application terminates. In most applications, set the time to at least five minutes (<literal>5m</literal>). However, in the Timetable example, limit the solving time to five seconds, which is short enough to avoid the HTTP timeout.
				</simpara>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the <literal>src/main/resources/application.properties</literal> file with the following content:
					</para>
				</formalpara>
				
<programlisting language="properties" linenumbering="unnumbered">quarkus.optaplanner.solver.termination.spent-limit=5s</programlisting>
			</section>
			<section xml:id="proc-quarkus-compiling-project_optaplanner-quarkus">
				<title>Running the school timetable application</title>
				<simpara>
					After you have created the school timetable project, run it in development mode. In development mode, you can update the application sources and configurations while your application is running. Your changes will appear in the running application.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created the school timetable project.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							To compile the application in development mode, enter the following command from the project directory:
						</simpara>
						
<screen>./mvnw compile quarkus:dev</screen>
					</listitem>
					<listitem>
						<simpara>
							Test the REST service. You can use any REST client. The following example uses the Linux command <literal>curl</literal> to send a POST request:
						</simpara>
						
<screen>$ curl -i -X POST http://localhost:8080/timeTable/solve -H "Content-Type:application/json" -d '{"timeslotList":[{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"}],"roomList":[{"name":"Room A"},{"name":"Room B"}],"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade"},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade"},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade"},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade"}]}'</screen>
						<simpara>
							After the time period specified in <literal>termination spent time</literal> defined in your <literal>application.properties</literal> file, the service returns output similar to the following example:
						</simpara>
						
<screen>HTTP/1.1 200
Content-Type: application/json
...

{"timeslotList":...,"roomList":...,"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room A"}},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room A"}},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room B"}},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room B"}}],"score":"0hard/0soft"}</screen>
						<simpara>
							Notice that your application assigned all four lessons to one of the two time slots and one of the two rooms. Also notice that it conforms to all hard constraints. For example, M. Curie’s two lessons are in different time slots.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To review what OptaPlanner did during the solving time, review the info log on the server side. The following is sample info log output:
						</simpara>
						
<screen>... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).
... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).
... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).</screen>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_testing_the_application" xml:id="testing_the_application">
				<title>Testing the application</title>
				<simpara>
					A good application includes test coverage. Test the constraints and the solver in your timetable project.
				</simpara>
				<section xml:id="business-optimizer-test-constraints-proc_optaplanner-quarkus">
					<title>Test the school timetable constraints</title>
					<simpara>
						To test each constraint of the timetable project in isolation, use a <literal>ConstraintVerifier</literal> in unit tests. This tests each constraint’s corner cases in isolation from the other tests, which lowers maintenance when adding a new constraint with proper test coverage.
					</simpara>
					<simpara>
						This test verifies that the constraint <literal>TimeTableConstraintProvider::roomConflict</literal>, when given three lessons in the same room and two of the lessons have the same timeslot, penalizes with a match weight of 1. So if the constraint weight is <literal>10hard</literal> it reduces the score by <literal>-10hard</literal>.
					</simpara>
					<formalpara>
						<title>Procedure</title>
						<para>
							Create the <literal>src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java</literal> class:
						</para>
					</formalpara>
					
<programlisting language="java" linenumbering="unnumbered">package org.acme.optaplanner.solver;

import java.time.DayOfWeek;
import java.time.LocalTime;

import javax.inject.Inject;

import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.domain.Timeslot;
import org.junit.jupiter.api.Test;
import org.optaplanner.test.api.score.stream.ConstraintVerifier;

@QuarkusTest
class TimeTableConstraintProviderTest {

    private static final Room ROOM = new Room("Room1");
    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);
    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);

    @Inject
    ConstraintVerifier&lt;TimeTableConstraintProvider, TimeTable&gt; constraintVerifier;

    @Test
    void roomConflict() {
        Lesson firstLesson = new Lesson(1, "Subject1", "Teacher1", "Group1");
        Lesson conflictingLesson = new Lesson(2, "Subject2", "Teacher2", "Group2");
        Lesson nonConflictingLesson = new Lesson(3, "Subject3", "Teacher3", "Group3");

        firstLesson.setRoom(ROOM);
        firstLesson.setTimeslot(TIMESLOT1);

        conflictingLesson.setRoom(ROOM);
        conflictingLesson.setTimeslot(TIMESLOT1);

        nonConflictingLesson.setRoom(ROOM);
        nonConflictingLesson.setTimeslot(TIMESLOT2);

        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)
                .given(firstLesson, conflictingLesson, nonConflictingLesson)
                .penalizesBy(1);
    }

}</programlisting>
					<simpara>
						Notice how <literal>ConstraintVerifier</literal> ignores the constraint weight during testing even if those constraint weights are hardcoded in the <literal>ConstraintProvider</literal>. This is because constraint weights change regularly before going into production. This way, constraint weight tweaking does not break the unit tests.
					</simpara>
				</section>
				<section xml:id="business-optimizer-test-solver-proc_optaplanner-quarkus">
					<title>Test the school timetable solver</title>
					<simpara>
						This example tests the Red Hat build of OptaPlanner school timetable project on Red Hat build of Quarkus. It uses a JUnit test to generate a test data set and send it to the <literal>TimeTableController</literal> to solve.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Create the <literal>src/test/java/com/example/rest/TimeTableResourceTest.java</literal> class with the following content:
							</simpara>
							
<programlisting language="java" linenumbering="unnumbered">package com.exmaple.optaplanner.rest;

import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import io.quarkus.test.junit.QuarkusTest;
import com.exmaple.optaplanner.domain.Room;
import com.exmaple.optaplanner.domain.Timeslot;
import com.exmaple.optaplanner.domain.Lesson;
import com.exmaple.optaplanner.domain.TimeTable;
import com.exmaple.optaplanner.rest.TimeTableResource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@QuarkusTest
public class TimeTableResourceTest {

    @Inject
    TimeTableResource timeTableResource;

    @Test
    @Timeout(600_000)
    public void solve() {
        TimeTable problem = generateProblem();
        TimeTable solution = timeTableResource.solve(problem);
        assertFalse(solution.getLessonList().isEmpty());
        for (Lesson lesson : solution.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(solution.getScore().isFeasible());
    }

    private TimeTable generateProblem() {
        List&lt;Timeslot&gt; timeslotList = new ArrayList&lt;&gt;();
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));

        List&lt;Room&gt; roomList = new ArrayList&lt;&gt;();
        roomList.add(new Room("Room A"));
        roomList.add(new Room("Room B"));
        roomList.add(new Room("Room C"));

        List&lt;Lesson&gt; lessonList = new ArrayList&lt;&gt;();
        lessonList.add(new Lesson(101L, "Math", "B. May", "9th grade"));
        lessonList.add(new Lesson(102L, "Physics", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(103L, "Geography", "M. Polo", "9th grade"));
        lessonList.add(new Lesson(104L, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(105L, "Spanish", "P. Cruz", "9th grade"));

        lessonList.add(new Lesson(201L, "Math", "B. May", "10th grade"));
        lessonList.add(new Lesson(202L, "Chemistry", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(203L, "History", "I. Jones", "10th grade"));
        lessonList.add(new Lesson(204L, "English", "P. Cruz", "10th grade"));
        lessonList.add(new Lesson(205L, "French", "M. Curie", "10th grade"));
        return new TimeTable(timeslotList, roomList, lessonList);
    }

}</programlisting>
							<simpara>
								This test verifies that after solving, all lessons are assigned to a time slot and a room. It also verifies that it found a feasible solution (no hard constraints broken).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add test properties to the <literal>src/main/resources/application.properties</literal> file:
							</simpara>
							
<screen># The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.
# It's recommended to run for at least 5 minutes ("5m") otherwise.
quarkus.optaplanner.solver.termination.spent-limit=5s

# Effectively disable this termination in favor of the best-score-limit
%test.quarkus.optaplanner.solver.termination.spent-limit=1h
%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft</screen>
						</listitem>
					</orderedlist>
					<simpara>
						Normally, the solver finds a feasible solution in less than 200 milliseconds. Notice how the <literal>application.properties</literal> file overwrites the solver termination during tests to terminate as soon as a feasible solution <literal>(0hard/*soft)</literal> is found. This avoids hard coding a solver time, because the unit test might run on arbitrary hardware. This approach ensures that the test runs long enough to find a feasible solution, even on slow systems. But it does not run a millisecond longer than it strictly must, even on fast systems.
					</simpara>
				</section>
			</section>
			<section xml:id="business-optimizer-logging-quarkus-proc_optaplanner-quarkus">
				<title>Logging</title>
				<simpara>
					After you complete the Red Hat build of OptaPlanner school timetable project, you can use logging information to help you fine-tune the constraints in the <literal>ConstraintProvider</literal>. Review the score calculation speed in the <literal>info</literal> log file to assess the impact of changes to your constraints. Run the application in debug mode to show every step that your application takes or use trace logging to log every step and every move.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Run the school timetable application for a fixed amount of time, for example, five minutes.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Review the score calculation speed in the <literal>log</literal> file as shown in the following example:
						</simpara>
						
<screen>... Solving ended: ..., score calculation speed (29455/sec), ...</screen>
					</listitem>
					<listitem>
						<simpara>
							Change a constraint, run the planning application again for the same amount of time, and review the score calculation speed recorded in the <literal>log</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Run the application in debug mode to log every step that the application makes:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									To run debug mode from the command line, use the <literal>-D</literal> system property.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To permanently enable debug mode, add the following line to the <literal>application.properties</literal> file:
								</simpara>
								
<programlisting language="properties" linenumbering="unnumbered">quarkus.log.category."org.optaplanner".level=debug</programlisting>
								<simpara>
									The following example shows output in the <literal>log</literal> file in debug mode:
								</simpara>
								
<screen>... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -&gt; Room A}, Math(101) {null -&gt; MONDAY 08:30}]).
...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -&gt; Room A}, Physics(102) {null -&gt; MONDAY 09:30}]).
...</screen>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Use <literal>trace</literal> logging to show every step and every move for each step.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="planner-quarkus-database-proc_optaplanner-quarkus">
				<title>Integrating a database with your Quarkus OptaPlanner school timetable application</title>
				<simpara>
					After you create your Quarkus OptaPlanner school timetable application, you can integrate it with a database and create a web-based user interface to display the timetable.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have a Quarkus OptaPlanner school timetable application.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Use Hibernate and Panache to store <literal>Timeslot</literal>, <literal>Room</literal>, and <literal>Lesson</literal> instances in a database. See <link xlink:href="https://quarkus.io/guides/hibernate-orm-panache">Simplified Hibernate ORM with Panache</link> for more information.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expose the instances through REST. For information, see <link xlink:href="https://quarkus.io/guides/rest-json">Writing JSON REST Services</link>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Update the <literal>TimeTableResource</literal> class to read and write a <literal>TimeTable</literal> instance in a single transaction:
						</simpara>
						
<screen>package org.acme.optaplanner.rest;

import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;

import io.quarkus.panache.common.Sort;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.domain.Timeslot;
import org.optaplanner.core.api.score.ScoreManager;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.solver.SolverManager;
import org.optaplanner.core.api.solver.SolverStatus;

@Path("/timeTable")
public class TimeTableResource {

    public static final Long SINGLETON_TIME_TABLE_ID = 1L;

    @Inject
    SolverManager&lt;TimeTable, Long&gt; solverManager;
    @Inject
    ScoreManager&lt;TimeTable, HardSoftScore&gt; scoreManager;

    // To try, open http://localhost:8080/timeTable
    @GET
    public TimeTable getTimeTable() {
        // Get the solver status before loading the solution
        // to avoid the race condition that the solver terminates between them
        SolverStatus solverStatus = getSolverStatus();
        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);
        scoreManager.updateScore(solution); // Sets the score
        solution.setSolverStatus(solverStatus);
        return solution;
    }

    @POST
    @Path("/solve")
    public void solve() {
        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,
                this::findById,
                this::save);
    }

    public SolverStatus getSolverStatus() {
        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);
    }

    @POST
    @Path("/stopSolving")
    public void stopSolving() {
        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);
    }

    @Transactional
    protected TimeTable findById(Long id) {
        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {
            throw new IllegalStateException("There is no timeTable with id (" + id + ").");
        }
        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance
        // that is contained by the timeTable's timeslotList/roomList.
        return new TimeTable(
                Timeslot.listAll(Sort.by("dayOfWeek").and("startTime").and("endTime").and("id")),
                Room.listAll(Sort.by("name").and("id")),
                Lesson.listAll(Sort.by("subject").and("teacher").and("studentGroup").and("id")));
    }

    @Transactional
    protected void save(TimeTable timeTable) {
        for (Lesson lesson : timeTable.getLessonList()) {
            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager
            Lesson attachedLesson = Lesson.findById(lesson.getId());
            attachedLesson.setTimeslot(lesson.getTimeslot());
            attachedLesson.setRoom(lesson.getRoom());
        }
    }

}</screen>
						<simpara>
							This example includes a <literal>TimeTable</literal> instance. However, you can enable multi-tenancy and handle <literal>TimeTable</literal> instances for multiple schools in parallel.
						</simpara>
						<simpara>
							The <literal>getTimeTable()</literal> method returns the latest timetable from the database. It uses the <literal>ScoreManager</literal> method, which is automatically injected, to calculate the score of that timetable and make it available to the UI.
						</simpara>
						<simpara>
							The <literal>solve()</literal> method starts a job to solve the current timetable and stores the time slot and room assignments in the database. It uses the <literal>SolverManager.solveAndListen()</literal> method to listen to intermediate best solutions and update the database accordingly. The UI uses this to show progress while the backend is still solving.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Update the <literal>TimeTableResourceTest</literal> class to reflect that the <literal>solve()</literal> method returns immediately and to poll for the latest solution until the solver finishes solving:
						</simpara>
						
<screen>package org.acme.optaplanner.rest;

import javax.inject.Inject;

import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.TimeTable;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.optaplanner.core.api.solver.SolverStatus;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@QuarkusTest
public class TimeTableResourceTest {

    @Inject
    TimeTableResource timeTableResource;

    @Test
    @Timeout(600_000)
    public void solveDemoDataUntilFeasible() throws InterruptedException {
        timeTableResource.solve();
        TimeTable timeTable = timeTableResource.getTimeTable();
        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {
            // Quick polling (not a Test Thread Sleep anti-pattern)
            // Test is still fast on fast machines and doesn't randomly fail on slow machines.
            Thread.sleep(20L);
            timeTable = timeTableResource.getTimeTable();
        }
        assertFalse(timeTable.getLessonList().isEmpty());
        for (Lesson lesson : timeTable.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(timeTable.getScore().isFeasible());
    }

}</screen>
					</listitem>
					<listitem>
						<simpara>
							Build a web UI on top of these REST methods to provide a visual representation of the timetable.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Review the <link xlink:href="https://github.com/quarkusio/quarkus-quickstarts/tree/main/optaplanner-quickstart">quickstart source code</link>.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="micrometer-and-quarkus-proc_optaplanner-quarkus">
				<title>Using Micrometer and Prometheus to monitor your school timetable OptaPlanner Quarkus application</title>
				<simpara>
					OptaPlanner exposes metrics through <link xlink:href="https://micrometer.io/">Micrometer</link>, a metrics instrumentation library for Java applications. You can use Micrometer with Prometheus to monitor the OptaPlanner solver in the school timetable application.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created the Quarkus OptaPlanner school timetable application.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Prometheus is installed. For information about installing Prometheus, see the <link xlink:href="https://prometheus.io/">Prometheus</link> website.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Add the Micrometer Prometheus dependency to the school timetable <literal>pom.xml</literal> file:
						</simpara>
						
<screen>&lt;dependency&gt;
 &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
 &lt;artifactId&gt;quarkus-micrometer-registry-prometheus&lt;/artifactId&gt;
&lt;/dependency&gt;</screen>
					</listitem>
					<listitem>
						<simpara>
							Start the school timetable application:
						</simpara>
						
<screen>mvn compile quarkus:dev</screen>
					</listitem>
					<listitem>
						<simpara>
							Open <literal><link xlink:href="http://localhost:8080/q/metric">http://localhost:8080/q/metric</link></literal> in a web browser.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="assembly-optaplanner-vaccination_optaplanner-quickstarts">
			<title>Red Hat build of OptaPlanner on Red Hat build of Quarkus: a vaccination appointment scheduler quick start guide</title>
			<simpara role="_abstract">
				You can use the OptaPlanner vaccination appointment scheduler quick start to develop a vaccination schedule that is both efficient and fair. The vaccination appointment scheduler uses artificial intelligence (AI) to prioritize people and allocate time slots based on multiple constraints and priorities.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						OpenJDK 11 or later is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						An IDE, such as IntelliJ IDEA, VSCode, Eclipse, or NetBeans is available.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have created a Quakus OptaPlanner project as described in <xref linkend="optaplanner-quarkus-con_getting-started-optaplanner" />.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="vaccination-scheduler-con_optaplanner-quickstarts">
				<title>How the OptaPlanner vaccination appointment scheduler works</title>
				<simpara>
					There are two main approaches to scheduling appointments. The system can either let a person choose an appointment slot (user-selects) or the system assigns a slot and tells the person when and where to attend (system-automatically-assigns). The OptaPlanner vaccination appointment scheduler uses the system-automatically-assigns approach. With the OptaPlanner vaccination appointment scheduler, you can create an application where people provide their information to the system and the system assigns an appointment.
				</simpara>
				<simpara>
					Characteristics of this approach:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Appointment slots are allocated based on priority.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The system allocates the best appointment time and location based on preconfigured planning constraints.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							The system is not overwhelmed by a large number of users competing for a limited number of appointments.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					This approach solves the problem of vaccinating as many people as possible by using planning constraints to create a score for each person. The person’s score determines when they get an appointment. The higher the person’s score, the better chance they have of receiving an earlier appointment.
				</simpara>
				<section xml:id="vaccination-contraints-con_optaplanner-quickstarts">
					<title>OptaPlanner vaccination appointment scheduler constraints</title>
					<simpara>
						OptaPlanner vaccination appointment scheduler constraints are either hard, medium, or soft:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Hard constraints cannot be broken. If any hard constraint is broken, the plan is unfeasible and cannot be executed:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Capacity: Do not over-book vaccine capacity at any time at any location.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Vaccine max age: If a vaccine has a maximum age, do not administer it to people who at the time of the first dose vaccination are older than the vaccine maximum age. Ensure people are given a vaccine type appropriate for their age. For example, do not assign a 75 year old person an appointment for a vaccine that has a maximum age restriction of 65 years.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Required vaccine type: Use the required vaccine type. For example, the second dose of a vaccine must be the same vaccine type as the first dose.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Ready date: Administer the vaccine on or after the specified date. For example, if a person receives a second dose, do not administer it before the recommended earliest possible vaccination date for the specific vaccine type, for example 26 days after the first dose.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Due date: Administer the vaccine on or before the specified date. For example, if a person receives a second dose, administer it before the recommended vaccination final due date for the specific vaccine, for example three months after the first dose.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Restrict maximum travel distance: Assign each person to one of a group of vaccination centers nearest to them. This is typically one of three centers. This restriction is calculated by travel time, not distance, so a person that lives in an urban area usually has a lower maximum distance to travel than a person living in a rural area.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Medium constraints decide who does not get an appointment when there is not enough capacity to assign appointments to everyone. This is called overconstrained planning:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Schedule second dose vaccinations: Do not leave any second dose vaccination appointments unassigned unless the ideal date falls outside of the planning window.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Schedule people based on their priority rating: Each person has a priority rating. This is typically their age but it can be much higher if they are, for example, a health care worker. Leave only people with the lowest priority ratings unassigned. They will be considered in the next run. This constraint is softer than the previous constraint because the second dose is always prioritized over priority rating.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Soft constraints should not be broken:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Preferred vaccination center: If a person has a preferred vaccination center, give them an appointment at that center.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Distance: Minimize the distance that a person must travel to their assigned vaccination center.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Ideal date: Administer the vaccine on or as close to the specified date as possible. For example, if a person receives a second dose, administer it on the ideal date for the specific vaccine, for example 28 days after the first dose. This constraint is softer than the distance constraint to avoid sending people halfway across the country just to be one day closer to their ideal date.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Priority rating: Schedule people with a higher priority rating earlier in the planning window. This constraint is softer than the distance constraint to avoid sending people halfway across the country. This constraint is also softer than the ideal date constraint because the second dose is prioritized over priority rating.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
					<simpara>
						Hard constraints are weighted against other hard constraints. Soft constraints are weighted against other soft constraints. However, hard constraints always take precedence over medium and soft constraints. If a hard constraint is broken, then the plan is not feasible. But if no hard constraints are broken then soft and medium constraints are considered in order to determine priority. Because there are often more people than available appointment slots, you must prioritize. Second dose appointments are always assigned first to avoid creating a backlog that would overwhelm your system later. After that, people are assigned based on their priority rating. Everyone starts with a priority rating that is their age. Doing this prioritizes older people over younger people. After that, people that are in specific priority groups receive, for example, a few hundred extra points. This varies based on the priority of their group. For example, nurses might receive an extra 1000 points. This way, older nurses are prioritized over younger nurses and young nurses are prioritized over people who are not nurses. The following table illustrates this concept:
					</simpara>
					<table colsep="1" frame="all" rowsep="1">
						<title>Priority rating table</title>
						<tgroup cols="3">
							<colspec colname="col_1" colwidth="29*"></colspec>
							<colspec colname="col_2" colwidth="29*"></colspec>
							<colspec colname="col_3" colwidth="43*"></colspec>
							<thead>
								<row>
									<entry align="left" valign="top">Age</entry>
									<entry align="left" valign="top">Job</entry>
									<entry align="left" valign="top">Priority rating</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="left" valign="top">
									<simpara>
										60
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										nurse
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										1060
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										33
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										nurse
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										1033
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										71
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										retired
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										71
									</simpara>
									</entry>
								</row>
								<row>
									<entry align="left" valign="top">
									<simpara>
										52
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										office worker
									</simpara>
									</entry>
									<entry align="left" valign="top">
									<simpara>
										52
									</simpara>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</section>
				<section xml:id="optaplanner-solver-con_optaplanner-quickstarts">
					<title>The OptaPlanner solver</title>
					<simpara>
						At the core of OptaPlanner is the solver, the engine that takes the problem data set and overlays the planning constraints and configurations. The problem data set includes all of the information about the people, the vaccines, and the vaccination centers. The solver works through the various combinations of data and eventually determines an optimized appointment schedule with people assigned to vaccination appointments at a specific center. The following illustration shows a schedule that the solver created:
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/optimizer/vaccinationSchedulingValueProposal.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>vaccinationSchedulingValueProposal</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
				</section>
				<section xml:id="continuous-planning-con_optaplanner-quickstarts">
					<title>Continuous planning</title>
					<simpara>
						Continuous planning is the technique of managing one or more upcoming planning periods at the same time and repeating that process monthly, weekly, daily, hourly, or even more frequently. The planning window advances incrementally by a specified interval. The following illustration shows a two week planning window that is updated daily:
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/optimizer/vaccinationSchedulingContinuousPlanning.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>vaccinationSchedulingContinuousPlanning</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<simpara>
						The two week planning window is divided in half. The first week is in the published state and the second week is in the draft state. People are assigned to appointments in both the published and draft parts of the planning window. However, only people in the published part of the planning window are notified of their appointments. The other appointments can still change easily in the next run. Doing this gives OptaPlanner the flexibility to change the appointments in the draft part when you run the solver again, if necessary. For example, if a person who needs a second dose has a ready date of Monday and an ideal date of Wednesday, OptaPlanner does not have to give them an appointment for Monday if you can prove OptaPlanner can demonstrate that it can give them a draft appointment later in the week.
					</simpara>
					<simpara>
						You can determine the size of the planning window but just be aware of the size of the problem space. The problem space is all of the various elements that go into creating the schedule. The more days you plan ahead, the larger the problem space.
					</simpara>
				</section>
				<section xml:id="pinned-planning-entities-con_optaplanner-quickstarts">
					<title>Pinned planning entities</title>
					<simpara>
						If you are continuously planning on a daily basis, there will be appointments within the two week period that are already allocated to people. To ensure that appointments are not double-booked, OptaPlanner marks existing appointments as allocated by pinning them. Pinning is used to anchor one or more specific assignments and force OptaPlanner to schedule around those fixed assignments. A pinned planning entity, such as an appointment, does not change during solving.
					</simpara>
					<simpara>
						Whether an entity is pinned or not is determined by the appointment state. An appointment can have five states : <literal>Open</literal>, <literal>Invited</literal>, <literal>Accepted</literal>, <literal>Rejected</literal>, or <literal>Rescheduled</literal>.
					</simpara>
					<note>
						<simpara>
							You do not actually see these states directly in the quick start demo code because the OptaPlanner engine is only interested in whether the appointment is pinned or not.
						</simpara>
					</note>
					<simpara>
						You need to be able to plan around appointments that have already been scheduled. An appointment with the <literal>Invited</literal> or <literal>Accepted</literal> state is pinned. Appointments with the <literal>Open</literal>, <literal>Reschedule</literal>, and <literal>Rejected</literal> state are not pinned and are available for scheduling.
					</simpara>
					<simpara>
						In this example, when the solver runs it searches across the entire two week planning window in both the published and draft ranges. The solver considers any unpinned entities, appointments with the <literal>Open</literal>, <literal>Reschedule</literal>, or <literal>Rejected</literal> states, in addition to the unscheduled input data, to find the optimal solution. If the solver is run daily, you will see a new day added to the schedule before you run the solver.
					</simpara>
					<simpara>
						Notice that the appointments on the new day have been assigned and Amy and Edna who were previously scheduled in the draft part of the planning window are now scheduled in the published part of the window. This was possible because Gus and Hugo requested a reschedule. This will not cause any confusion because Amy and Edna were never notified about their draft dates. Now, because they have appointments in the published section of the planning window, they will be notified and asked to accept or reject their appointments, and their appointments are now pinned.
					</simpara>
				</section>
			</section>
			<section xml:id="vaccination-scheduler-download-proc_optaplanner-quickstarts">
				<title>Downloading and running the OptaPlanner vaccination appointment scheduler</title>
				<simpara>
					Download the OptaPlanner vaccination appointment scheduler quick start archive, start it in Quarkus development mode, and view the application in a browser. Quarkus development mode enables you to make changes and update your application while it is running.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Product: Decision Manager
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Version: 7.13
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Download <emphasis role="strong">Red Hat Decision Manager 7.13.0 Kogito and OptaPlanner 8 Decision Services Quickstarts</emphasis> (<literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal>).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Extract the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Navigate to the <literal>optaplanner-quickstarts-8.11.1.Final-redhat-00006</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Navigate to the <literal>optaplanner-quickstarts-8.11.1.Final-redhat-00006/use-cases/vaccination-scheduling</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the following command to start the OptaPlanner vaccination appointment scheduler in development mode:
						</simpara>
						
<programlisting language="shell" linenumbering="unnumbered">$ mvn quarkus:dev</programlisting>
					</listitem>
					<listitem>
						<simpara>
							To view the OptaPlanner vaccination appointment scheduler, enter the following URL in a web browser.
						</simpara>
						
<screen>http://localhost:8080/</screen>
					</listitem>
					<listitem>
						<simpara>
							To run the OptaPlanner vaccination appointment scheduler, click <emphasis role="strong">Solve</emphasis>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Make changes to the source code then press the F5 key to refresh your browser. Notice that the changes that you made are now available.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="vaccination-scheduler-package-proc_optaplanner-quickstarts">
				<title>Package and run the OptaPlanner vaccination appointment scheduler</title>
				<simpara>
					When you have completed development work on the OptaPlanner vaccination appointment scheduler in <literal>quarkus:dev</literal> mode, run the application as a conventional jar file.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have downloaded the OptaPlanner vaccination appointment scheduler quick start. For more information, see <xref linkend="vaccination-scheduler-download-proc_optaplanner-quickstarts" />.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Navigate to the <literal>/use-cases/vaccination-scheduling</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To compile the OptaPlanner vaccination appointment scheduler, enter the following command:
						</simpara>
						
<programlisting language="shell" linenumbering="unnumbered">$ mvn package</programlisting>
					</listitem>
					<listitem>
						<simpara>
							To run the compiled OptaPlanner vaccination appointment scheduler, enter the following command:
						</simpara>
						
<programlisting language="shell" linenumbering="unnumbered">$ java -jar ./target/*-runner.jar</programlisting>
						<note>
							<simpara>
								To run the application on port 8081, add <literal>-Dquarkus.http.port=8081</literal> to the preceding command.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							To start the OptaPlanner vaccination appointment scheduler, enter the following URL in a web browser.
						</simpara>
						
<screen>http://localhost:8080/</screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="vaccination-native-proc_optaplanner-quickstarts">
				<title>Run the OptaPlanner vaccination appointment scheduler as a native executable</title>
				<simpara>
					To take advantage of the small memory footprint and access speeds that Quarkus offers, compile the OptaPlanner vaccination appointment scheduler in Quarkus native mode.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Install GraalVM and the <literal>native-image</literal> tool. For information, see <link xlink:href="https://quarkus.io/guides/building-native-image#configuring-graalvm">Configuring GraalVMl</link> on the Quarkus website.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Navigate to the <literal>/use-cases/vaccination-scheduling</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To compile the OptaPlanner vaccination appointment scheduler natively, enter the following command:
						</simpara>
						
<programlisting language="shell" linenumbering="unnumbered">$ mvn package -Dnative -DskipTests</programlisting>
					</listitem>
					<listitem>
						<simpara>
							To run the native executable, enter the following command:
						</simpara>
						
<programlisting language="shell" linenumbering="unnumbered">$ ./target/*-runner</programlisting>
					</listitem>
					<listitem>
						<simpara>
							To start the OptaPlanner vaccination appointment scheduler, enter the following URL in a web browser.
						</simpara>
						
<screen>http://localhost:8080/</screen>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_additional_resources" role="_additional-resources" xml:id="additional_resources">
				<title>Additional resources</title>
				<itemizedlist>
					<listitem>
						<simpara>
							<link xlink:href="https://www.youtube.com/watch?v=LTkoaBk-P6U">Vaccination appointment scheduling video</link>
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
		</chapter>
		<chapter xml:id="assembly-business-optimizer-springboot_optaplanner-quickstarts">
			<title>Red Hat build of OptaPlanner on Spring Boot: a school timetable quick start guide</title>
			<simpara>
				This guide walks you through the process of creating a Spring Boot application with OptaPlanner’s constraint solving artificial intelligence (AI). You will build a REST application that optimizes a school timetable for students and teachers.
			</simpara>
			<informalfigure>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/_images/optimizer/timeTableAppScreenshot.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>timeTableAppScreenshot</phrase>
				</textobject>
			</mediaobject>
			</informalfigure>
			<simpara>
				Your service will assign <literal>Lesson</literal> instances to <literal>Timeslot</literal> and <literal>Room</literal> instances automatically by using AI to adhere to the following hard and soft <emphasis>scheduling constraints</emphasis>:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						A room can have at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher can teach at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A student can attend at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher prefers to teach in a single room.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher prefers to teach sequential lessons and dislikes gaps between lessons.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Mathematically speaking, school timetabling is an <emphasis>NP-hard</emphasis> problem. That means it is difficult to scale. Simply iterating through all possible combinations with brute force would take millions of years for a non-trivial data set, even on a supercomputer. Fortunately, AI constraint solvers such as OptaPlanner have advanced algorithms that deliver a near-optimal solution in a reasonable amount of time. What is considered to be a reasonable amount of time is subjective and depends on the goals of your problem.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						OpenJDK 11 or later is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						An IDE, such as IntelliJ IDEA, VSCode, Eclipse, or NetBeans is available.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="spring-boot-ref-download-proc_business-optimizer-spring-boot">
				<title>Downloading and building the Spring Boot school timetable quick start</title>
				<simpara>
					If you want to see a completed example of the school timetable project for Red Hat build of OptaPlanner with Spring Boot product, download the starter application from the Red Hat Customer Portal.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Product: Decision Manager
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Version: 7.13
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Download <emphasis role="strong">Red Hat Decision Manager 7.13.0 Kogito and OptaPlanner 8 Decision Services Quickstarts</emphasis> (<literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal>).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Extract the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Download the <emphasis role="strong">Red Hat Decision Manager 7.13.0 Kogito and OptaPlanner 8 Decision Services Maven Repositroy</emphasis> (<literal>rhdm-7.13.0-kogito-maven-repository.zip</literal>).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Extract the <literal>rhdm-7.13.0-kogito-maven-repository.zip</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Copy the contents of the <literal>rhdm-7.13.0-kogito-maven-repository/maven-repository</literal> subdirectory into the <literal>~/.m2/repository</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Navigate to the <literal>optaplanner-quickstarts-8.11.1.Final-redhat-00006/technology/java-spring-boot</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the following command to build the Spring Boot school timetabling project:
						</simpara>
						
<screen>mvn clean install -DskipTests</screen>
					</listitem>
					<listitem>
						<simpara>
							To build the Spring Boot school timetabling project, enter the following command:
						</simpara>
						
<screen>mvn spring-boot:run -DskipTests</screen>
					</listitem>
					<listitem>
						<simpara>
							To view the project, enter the following URL in a web browser:
						</simpara>
						
<screen>http://localhost:8080/</screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="business-optimizr-domain-objects-proc_business-optimizer-spring-boot">
				<title>Model the domain objects</title>
				<simpara>
					The goal of the Red Hat build of OptaPlanner timetable project is to assign each lesson to a time slot and a room. To do this, add three classes, <literal>Timeslot</literal>, <literal>Lesson</literal>, and <literal>Room</literal>, as shown in the following diagram:
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/optimizer/timeTableClassDiagramPure.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>timeTableClassDiagramPure</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<formalpara>
					<title>Timeslot</title>
					<para>
						The <literal>Timeslot</literal> class represents a time interval when lessons are taught, for example, <literal>Monday 10:30 - 11:30</literal> or <literal>Tuesday 13:30 - 14:30</literal>. In this example, all time slots have the same duration and there are no time slots during lunch or other breaks.
					</para>
				</formalpara>
				<simpara>
					A time slot has no date because a high school schedule just repeats every week. There is no need for <link xlink:href="https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning">continuous planning</link>. A timeslot is called a <emphasis>problem fact</emphasis> because no <literal>Timeslot</literal> instances change during solving. Such classes do not require any OptaPlanner-specific annotations.
				</simpara>
				<formalpara>
					<title>Room</title>
					<para>
						The <literal>Room</literal> class represents a location where lessons are taught, for example, <literal>Room A</literal> or <literal>Room B</literal>. In this example, all rooms are without capacity limits and they can accommodate all lessons.
					</para>
				</formalpara>
				<simpara>
					<literal>Room</literal> instances do not change during solving so <literal>Room</literal> is also a <emphasis>problem fact</emphasis>.
				</simpara>
				<formalpara>
					<title>Lesson</title>
					<para>
						During a lesson, represented by the <literal>Lesson</literal> class, a teacher teaches a subject to a group of students, for example, <literal>Math by A.Turing for 9th grade</literal> or <literal>Chemistry by M.Curie for 10th grade</literal>. If a subject is taught multiple times each week by the same teacher to the same student group, there are multiple <literal>Lesson</literal> instances that are only distinguishable by <literal>id</literal>. For example, the 9th grade has six math lessons a week.
					</para>
				</formalpara>
				<simpara>
					During solving, OptaPlanner changes the <literal>timeslot</literal> and <literal>room</literal> fields of the <literal>Lesson</literal> class to assign each lesson to a time slot and a room. Because OptaPlanner changes these fields, <literal>Lesson</literal> is a <emphasis>planning entity</emphasis>:
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/optimizer/timeTableClassDiagramAnnotated.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>timeTableClassDiagramAnnotated</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Most of the fields in the previous diagram contain input data, except for the orange fields. A lesson’s <literal>timeslot</literal> and <literal>room</literal> fields are unassigned (<literal>null</literal>) in the input data and assigned (not <literal>null</literal>) in the output data. OptaPlanner changes these fields during solving. Such fields are called planning variables. In order for OptaPlanner to recognize them, both the <literal>timeslot</literal> and <literal>room</literal> fields require an <literal>@PlanningVariable</literal> annotation. Their containing class, <literal>Lesson</literal>, requires an <literal>@PlanningEntity</literal> annotation.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Timeslot.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import java.time.DayOfWeek;
import java.time.LocalTime;

public class Timeslot {

    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;

    private Timeslot() {
    }

    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {
        this.dayOfWeek = dayOfWeek;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    @Override
    public String toString() {
        return dayOfWeek + " " + startTime.toString();
    }

    // ********************************
    // Getters and setters
    // ********************************

    public DayOfWeek getDayOfWeek() {
        return dayOfWeek;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }

}</programlisting>
						<simpara>
							Notice the <literal>toString()</literal> method keeps the output short so it is easier to read OptaPlanner’s <literal>DEBUG</literal> or <literal>TRACE</literal> log, as shown later.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Room.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

public class Room {

    private String name;

    private Room() {
    }

    public Room(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return name;
    }

    // ********************************
    // Getters and setters
    // ********************************

    public String getName() {
        return name;
    }

}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Lesson.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import org.optaplanner.core.api.domain.entity.PlanningEntity;
import org.optaplanner.core.api.domain.variable.PlanningVariable;

@PlanningEntity
public class Lesson {

    private Long id;

    private String subject;
    private String teacher;
    private String studentGroup;

    @PlanningVariable(valueRangeProviderRefs = "timeslotRange")
    private Timeslot timeslot;

    @PlanningVariable(valueRangeProviderRefs = "roomRange")
    private Room room;

    private Lesson() {
    }

    public Lesson(Long id, String subject, String teacher, String studentGroup) {
        this.id = id;
        this.subject = subject;
        this.teacher = teacher;
        this.studentGroup = studentGroup;
    }

    @Override
    public String toString() {
        return subject + "(" + id + ")";
    }

    // ********************************
    // Getters and setters
    // ********************************

    public Long getId() {
        return id;
    }

    public String getSubject() {
        return subject;
    }

    public String getTeacher() {
        return teacher;
    }

    public String getStudentGroup() {
        return studentGroup;
    }

    public Timeslot getTimeslot() {
        return timeslot;
    }

    public void setTimeslot(Timeslot timeslot) {
        this.timeslot = timeslot;
    }

    public Room getRoom() {
        return room;
    }

    public void setRoom(Room room) {
        this.room = room;
    }

}</programlisting>
						<simpara>
							The <literal>Lesson</literal> class has an <literal>@PlanningEntity</literal> annotation, so OptaPlanner knows that this class changes during solving because it contains one or more planning variables.
						</simpara>
						<simpara>
							The <literal>timeslot</literal> field has an <literal>@PlanningVariable</literal> annotation, so OptaPlanner knows that it can change its value. In order to find potential <literal>Timeslot</literal> instances to assign to this field, OptaPlanner uses the <literal>valueRangeProviderRefs</literal> property to connect to a value range provider that provides a <literal>List&lt;Timeslot&gt;</literal> to pick from. See <xref linkend="business-optimizr-gather-objects-proc_business-optimizer-spring-boot" /> for information about value range providers.
						</simpara>
						<simpara>
							The <literal>room</literal> field also has an <literal>@PlanningVariable</literal> annotation for the same reasons.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="business-optimizr-define-contraints-proc_business-optimizer-spring-boot">
				<title>Define the constraints and calculate the score</title>
				<simpara>
					When solving a problem, a <emphasis>score</emphasis> represents the quality of a specific solution. The higher the score the better. Red Hat build of OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time. It might be the <emphasis>optimal</emphasis> solution.
				</simpara>
				<simpara>
					Because the timetable example use case has hard and soft constraints, use the <literal>HardSoftScore</literal> class to represent the score:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Hard constraints must not be broken. For example: <emphasis>A room can have at most one lesson at the same time.</emphasis>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Soft constraints should not be broken. For example: <emphasis>A teacher prefers to teach in a single room.</emphasis>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Hard constraints are weighted against other hard constraints. Soft constraints are weighted against other soft constraints. Hard constraints always outweigh soft constraints, regardless of their respective weights.
				</simpara>
				<simpara>
					To calculate the score, you could implement an <literal>EasyScoreCalculator</literal> class:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">public class TimeTableEasyScoreCalculator implements EasyScoreCalculator&lt;TimeTable&gt; {

    @Override
    public HardSoftScore calculateScore(TimeTable timeTable) {
        List&lt;Lesson&gt; lessonList = timeTable.getLessonList();
        int hardScore = 0;
        for (Lesson a : lessonList) {
            for (Lesson b : lessonList) {
                if (a.getTimeslot() != null &amp;&amp; a.getTimeslot().equals(b.getTimeslot())
                        &amp;&amp; a.getId() &lt; b.getId()) {
                    // A room can accommodate at most one lesson at the same time.
                    if (a.getRoom() != null &amp;&amp; a.getRoom().equals(b.getRoom())) {
                        hardScore--;
                    }
                    // A teacher can teach at most one lesson at the same time.
                    if (a.getTeacher().equals(b.getTeacher())) {
                        hardScore--;
                    }
                    // A student can attend at most one lesson at the same time.
                    if (a.getStudentGroup().equals(b.getStudentGroup())) {
                        hardScore--;
                    }
                }
            }
        }
        int softScore = 0;
        // Soft constraints are only implemented in the "complete" implementation
        return HardSoftScore.of(hardScore, softScore);
    }

}</programlisting>
				<simpara>
					Unfortunately, this solution does not scale well because it is non-incremental: every time a lesson is assigned to a different time slot or room, all lessons are re-evaluated to calculate the new score.
				</simpara>
				<simpara>
					A better solution is to create a <literal>src/main/java/com/example/solver/TimeTableConstraintProvider.java</literal> class to perform incremental score calculation. This class uses OptaPlanner’s ConstraintStream API which is inspired by Java 8 Streams and SQL. The <literal>ConstraintProvider</literal> scales an order of magnitude better than the <literal>EasyScoreCalculator</literal>: <emphasis>O</emphasis>(n) instead of <emphasis>O</emphasis>(n²).
				</simpara>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the following <literal>src/main/java/com/example/solver/TimeTableConstraintProvider.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package com.example.solver;

import com.example.domain.Lesson;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.stream.Constraint;
import org.optaplanner.core.api.score.stream.ConstraintFactory;
import org.optaplanner.core.api.score.stream.ConstraintProvider;
import org.optaplanner.core.api.score.stream.Joiners;

public class TimeTableConstraintProvider implements ConstraintProvider {

    @Override
    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {
        return new Constraint[] {
                // Hard constraints
                roomConflict(constraintFactory),
                teacherConflict(constraintFactory),
                studentGroupConflict(constraintFactory),
                // Soft constraints are only implemented in the "complete" implementation
        };
    }

    private Constraint roomConflict(ConstraintFactory constraintFactory) {
        // A room can accommodate at most one lesson at the same time.

        // Select a lesson ...
        return constraintFactory.from(Lesson.class)
                // ... and pair it with another lesson ...
                .join(Lesson.class,
                        // ... in the same timeslot ...
                        Joiners.equal(Lesson::getTimeslot),
                        // ... in the same room ...
                        Joiners.equal(Lesson::getRoom),
                        // ... and the pair is unique (different id, no reverse pairs)
                        Joiners.lessThan(Lesson::getId))
                // then penalize each pair with a hard weight.
                .penalize("Room conflict", HardSoftScore.ONE_HARD);
    }

    private Constraint teacherConflict(ConstraintFactory constraintFactory) {
        // A teacher can teach at most one lesson at the same time.
        return constraintFactory.from(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getTeacher),
                        Joiners.lessThan(Lesson::getId))
                .penalize("Teacher conflict", HardSoftScore.ONE_HARD);
    }

    private Constraint studentGroupConflict(ConstraintFactory constraintFactory) {
        // A student can attend at most one lesson at the same time.
        return constraintFactory.from(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getStudentGroup),
                        Joiners.lessThan(Lesson::getId))
                .penalize("Student group conflict", HardSoftScore.ONE_HARD);
    }

}</programlisting>
			</section>
			<section xml:id="business-optimizr-gather-objects-proc_business-optimizer-spring-boot">
				<title>Gather the domain objects in a planning solution</title>
				<simpara>
					A <literal>TimeTable</literal> instance wraps all <literal>Timeslot</literal>, <literal>Room</literal>, and <literal>Lesson</literal> instances of a single dataset. Furthermore, because it contains all lessons, each with a specific planning variable state, it is a <emphasis>planning solution</emphasis> and it has a score:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							If lessons are still unassigned, then it is an <emphasis>uninitialized</emphasis> solution, for example, a solution with the score <literal>-4init/0hard/0soft</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If it breaks hard constraints, then it is an <emphasis>infeasible</emphasis> solution, for example, a solution with the score <literal>-2hard/-3soft</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If it adheres to all hard constraints, then it is a <emphasis>feasible</emphasis> solution, for example, a solution with the score <literal>0hard/-7soft</literal>.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The <literal>TimeTable</literal> class has an <literal>@PlanningSolution</literal> annotation, so Red Hat build of OptaPlanner knows that this class contains all of the input and output data.
				</simpara>
				<simpara>
					Specifically, this class is the input of the problem:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <literal>timeslotList</literal> field with all time slots
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of problem facts, because they do not change during solving.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							A <literal>roomList</literal> field with all rooms
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of problem facts, because they do not change during solving.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							A <literal>lessonList</literal> field with all lessons
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of planning entities because they change during solving.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Of each <literal>Lesson</literal>:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											The values of the <literal>timeslot</literal> and <literal>room</literal> fields are typically still <literal>null</literal>, so unassigned. They are planning variables.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											The other fields, such as <literal>subject</literal>, <literal>teacher</literal> and <literal>studentGroup</literal>, are filled in. These fields are problem properties.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					However, this class is also the output of the solution:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <literal>lessonList</literal> field for which each <literal>Lesson</literal> instance has non-null <literal>timeslot</literal> and <literal>room</literal> fields after solving
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A <literal>score</literal> field that represents the quality of the output solution, for example, <literal>0hard/-5soft</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the <literal>src/main/java/com/example/domain/TimeTable.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import java.util.List;

import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.PlanningSolution;
import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;

@PlanningSolution
public class TimeTable {

    @ValueRangeProvider(id = "timeslotRange")
    @ProblemFactCollectionProperty
    private List&lt;Timeslot&gt; timeslotList;

    @ValueRangeProvider(id = "roomRange")
    @ProblemFactCollectionProperty
    private List&lt;Room&gt; roomList;

    @PlanningEntityCollectionProperty
    private List&lt;Lesson&gt; lessonList;

    @PlanningScore
    private HardSoftScore score;

    private TimeTable() {
    }

    public TimeTable(List&lt;Timeslot&gt; timeslotList, List&lt;Room&gt; roomList,
            List&lt;Lesson&gt; lessonList) {
        this.timeslotList = timeslotList;
        this.roomList = roomList;
        this.lessonList = lessonList;
    }

    // ********************************
    // Getters and setters
    // ********************************

    public List&lt;Timeslot&gt; getTimeslotList() {
        return timeslotList;
    }

    public List&lt;Room&gt; getRoomList() {
        return roomList;
    }

    public List&lt;Lesson&gt; getLessonList() {
        return lessonList;
    }

    public HardSoftScore getScore() {
        return score;
    }

}</programlisting>
				<formalpara>
					<title>The value range providers</title>
					<para>
						The <literal>timeslotList</literal> field is a value range provider. It holds the <literal>Timeslot</literal> instances which OptaPlanner can pick from to assign to the <literal>timeslot</literal> field of <literal>Lesson</literal> instances. The <literal>timeslotList</literal> field has an <literal>@ValueRangeProvider</literal> annotation to connect those two, by matching the <literal>id</literal> with the <literal>valueRangeProviderRefs</literal> of the <literal>@PlanningVariable</literal> in the <literal>Lesson</literal>.
					</para>
				</formalpara>
				<simpara>
					Following the same logic, the <literal>roomList</literal> field also has an <literal>@ValueRangeProvider</literal> annotation.
				</simpara>
				<formalpara>
					<title>The problem fact and planning entity properties</title>
					<para>
						Furthermore, OptaPlanner needs to know which <literal>Lesson</literal> instances it can change as well as how to retrieve the <literal>Timeslot</literal> and <literal>Room</literal> instances used for score calculation by your <literal>TimeTableConstraintProvider</literal>.
					</para>
				</formalpara>
				<simpara>
					The <literal>timeslotList</literal> and <literal>roomList</literal> fields have an <literal>@ProblemFactCollectionProperty</literal> annotation, so your <literal>TimeTableConstraintProvider</literal> can select from those instances.
				</simpara>
				<simpara>
					The <literal>lessonList</literal> has an <literal>@PlanningEntityCollectionProperty</literal> annotation, so OptaPlanner can change them during solving and your <literal>TimeTableConstraintProvider</literal> can select from those too.
				</simpara>
			</section>
			<section xml:id="business-optimizr-create-timetable-service-proc_business-optimizer-spring-boot">
				<title>Create the Timetable service</title>
				<simpara>
					Now you are ready to put everything together and create a REST service. But solving planning problems on REST threads causes HTTP timeout issues. Therefore, the Spring Boot starter injects a <literal>SolverManager</literal>, which runs solvers in a separate thread pool and can solve multiple datasets in parallel.
				</simpara>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the <literal>src/main/java/com/example/solver/TimeTableController.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package com.example.solver;

import java.util.UUID;
import java.util.concurrent.ExecutionException;

import com.example.domain.TimeTable;
import org.optaplanner.core.api.solver.SolverJob;
import org.optaplanner.core.api.solver.SolverManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/timeTable")
public class TimeTableController {

    @Autowired
    private SolverManager&lt;TimeTable, UUID&gt; solverManager;

    @PostMapping("/solve")
    public TimeTable solve(@RequestBody TimeTable problem) {
        UUID problemId = UUID.randomUUID();
        // Submit the problem to start solving
        SolverJob&lt;TimeTable, UUID&gt; solverJob = solverManager.solve(problemId, problem);
        TimeTable solution;
        try {
            // Wait until the solving ends
            solution = solverJob.getFinalBestSolution();
        } catch (InterruptedException | ExecutionException e) {
            throw new IllegalStateException("Solving failed.", e);
        }
        return solution;
    }

}</programlisting>
				<simpara>
					In this example, the initial implementation waits for the solver to finish, which can still cause an HTTP timeout. The <emphasis>complete</emphasis> implementation avoids HTTP timeouts much more elegantly.
				</simpara>
			</section>
			<section xml:id="business-optimizr-set-solver-time-proc_business-optimizer-spring-boot">
				<title>Set the solver termination time</title>
				<simpara>
					If your planning application does not have a termination setting or a termination event, it theoretically runs forever and in reality eventually causes an HTTP timeout error. To prevent this from occurring, use the <literal>optaplanner.solver.termination.spent-limit</literal> parameter to specify the length of time after which the application terminates. In most applications, set the time to at least five minutes (<literal>5m</literal>). However, in the Timetable example, limit the solving time to five seconds, which is short enough to avoid the HTTP timeout.
				</simpara>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the <literal>src/main/resources/application.properties</literal> file with the following content:
					</para>
				</formalpara>
				
<programlisting language="properties" linenumbering="unnumbered">quarkus.optaplanner.solver.termination.spent-limit=5s</programlisting>
			</section>
			<section xml:id="business-optimizer-make-executable-proc_business-optimizer-spring-boot">
				<title>Make the application executable</title>
				<simpara>
					After you complete the Red Hat build of OptaPlanner Spring Boot timetable project, package everything into a single executable JAR file driven by a standard Java <literal>main()</literal> method.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have a completed OptaPlanner Spring Boot timetable project.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the <literal>TimeTableSpringBootApp.java</literal> class with the following content:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TimeTableSpringBootApp {

    public static void main(String[] args) {
        SpringApplication.run(TimeTableSpringBootApp.class, args);
    }

}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Replace the <literal>src/main/java/com/example/DemoApplication.java</literal> class created by Spring Initializr with the <literal>TimeTableSpringBootApp.java</literal> class.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Run the <literal>TimeTableSpringBootApp.java</literal> class as the main class of a regular Java application.
						</simpara>
					</listitem>
				</orderedlist>
				<section xml:id="business-optimizer-try-application-proc_business-optimizer-spring-boot">
					<title>Try the timetable application</title>
					<simpara>
						After you start the Red Hat build of OptaPlanner Spring Boot timetable application, you can test the REST service with any REST client that you want. This example uses the Linux <literal>curl</literal> command to send a POST request.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								The OptaPlanner Spring Boot timetable application is running.
							</simpara>
						</listitem>
					</itemizedlist>
					<formalpara>
						<title>Procedure</title>
						<para>
							Enter the following command:
						</para>
					</formalpara>
					
<screen>$ curl -i -X POST http://localhost:8080/timeTable/solve -H "Content-Type:application/json" -d '{"timeslotList":[{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"}],"roomList":[{"name":"Room A"},{"name":"Room B"}],"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade"},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade"},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade"},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade"}]}'</screen>
					<simpara>
						After about five seconds, the termination spent time defined in <literal>application.properties</literal>, the service returns an output similar to the following example:
					</simpara>
					
<screen>HTTP/1.1 200
Content-Type: application/json
...

{"timeslotList":...,"roomList":...,"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room A"}},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room A"}},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room B"}},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room B"}}],"score":"0hard/0soft"}</screen>
					<simpara>
						Notice that the application assigned all four lessons to one of the two time slots and one of the two rooms. Also notice that it conforms to all hard constraints. For example, M. Curie’s two lessons are in different time slots.
					</simpara>
					<simpara>
						On the server side, the <literal>info</literal> log shows what OptaPlanner did in those five seconds:
					</simpara>
					
<screen>... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).
... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).
... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).</screen>
				</section>
				<section xml:id="business-optimizer-test-application-proc_business-optimizer-spring-boot">
					<title>Test the application</title>
					<simpara>
						A good application includes test coverage. This example tests the Timetable Red Hat build of OptaPlanner Spring Boot application. It uses a JUnit test to generate a test dataset and send it to the <literal>TimeTableController</literal> to solve.
					</simpara>
					<formalpara>
						<title>Procedure</title>
						<para>
							Create the <literal>src/test/java/com/example/solver/TimeTableControllerTest.java</literal> class with the following content:
						</para>
					</formalpara>
					
<programlisting language="java" linenumbering="unnumbered">package com.example.solver;

import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import com.example.domain.Lesson;
import com.example.domain.Room;
import com.example.domain.TimeTable;
import com.example.domain.Timeslot;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest(properties = {
        "optaplanner.solver.termination.spent-limit=1h", // Effectively disable this termination in favor of the best-score-limit
        "optaplanner.solver.termination.best-score-limit=0hard/*soft"})
public class TimeTableControllerTest {

    @Autowired
    private TimeTableController timeTableController;

    @Test
    @Timeout(600_000)
    public void solve() {
        TimeTable problem = generateProblem();
        TimeTable solution = timeTableController.solve(problem);
        assertFalse(solution.getLessonList().isEmpty());
        for (Lesson lesson : solution.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(solution.getScore().isFeasible());
    }

    private TimeTable generateProblem() {
        List&lt;Timeslot&gt; timeslotList = new ArrayList&lt;&gt;();
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));

        List&lt;Room&gt; roomList = new ArrayList&lt;&gt;();
        roomList.add(new Room("Room A"));
        roomList.add(new Room("Room B"));
        roomList.add(new Room("Room C"));

        List&lt;Lesson&gt; lessonList = new ArrayList&lt;&gt;();
        lessonList.add(new Lesson(101L, "Math", "B. May", "9th grade"));
        lessonList.add(new Lesson(102L, "Physics", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(103L, "Geography", "M. Polo", "9th grade"));
        lessonList.add(new Lesson(104L, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(105L, "Spanish", "P. Cruz", "9th grade"));

        lessonList.add(new Lesson(201L, "Math", "B. May", "10th grade"));
        lessonList.add(new Lesson(202L, "Chemistry", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(203L, "History", "I. Jones", "10th grade"));
        lessonList.add(new Lesson(204L, "English", "P. Cruz", "10th grade"));
        lessonList.add(new Lesson(205L, "French", "M. Curie", "10th grade"));
        return new TimeTable(timeslotList, roomList, lessonList);
    }

}</programlisting>
					<simpara>
						This test verifies that after solving, all lessons are assigned to a time slot and a room. It also verifies that it found a feasible solution (no hard constraints broken).
					</simpara>
					<simpara>
						Normally, the solver finds a feasible solution in less than 200 milliseconds. Notice how the <literal>@SpringBootTest</literal> annotation’s <literal>properties</literal> overwrites the solver termination to terminate as soon as a feasible solution (<literal>0hard/*soft</literal>) is found. This avoids hard coding a solver time, because the unit test might run on arbitrary hardware. This approach ensures that the test runs long enough to find a feasible solution, even on slow systems. However, it does not run a millisecond longer than it strictly must, even on fast systems.
					</simpara>
				</section>
				<section xml:id="business-optimizer-logging-proc_business-optimizer-spring-boot">
					<title>Logging</title>
					<simpara>
						After you complete the Red Hat build of OptaPlanner Spring Boot timetable application, you can use logging information to help you fine-tune the constraints in the <literal>ConstraintProvider</literal>. Review the score calculation speed in the <literal>info</literal> log file to assess the impact of changes to your constraints. Run the application in debug mode to show every step that your application takes or use trace logging to log every step and every move.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Run the timetable application for a fixed amount of time, for example, five minutes.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Review the score calculation speed in the <literal>log</literal> file as shown in the following example:
							</simpara>
							
<screen>... Solving ended: ..., score calculation speed (29455/sec), ...</screen>
						</listitem>
						<listitem>
							<simpara>
								Change a constraint, run the planning application again for the same amount of time, and review the score calculation speed recorded in the <literal>log</literal> file.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Run the application in debug mode to log every step:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										To run debug mode from the command line, use the <literal>-D</literal> system property.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To change logging in the <literal>application.properties</literal> file, add the following line to that file:
									</simpara>
									
<programlisting language="properties" linenumbering="unnumbered">logging.level.org.optaplanner=debug</programlisting>
									<simpara>
										The following example shows output in the <literal>log</literal> file in debug mode:
									</simpara>
									
<screen>... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -&gt; Room A}, Math(101) {null -&gt; MONDAY 08:30}]).
...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -&gt; Room A}, Physics(102) {null -&gt; MONDAY 09:30}]).
...</screen>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Use <literal>trace</literal> logging to show every step and every move for each step.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
			</section>
			<section xml:id="business-optimizer-database-UI-integration-proc_business-optimizer-spring-boot">
				<title>Add Database and UI integration</title>
				<simpara>
					After you create the Red Hat build of OptaPlanner application example with Spring Boot, add database and UI integration.
				</simpara>
				<itemizedlist>
					<title>Prerequisite</title>
					<listitem>
						<simpara>
							You have created the OptaPlanner Spring Boot timetable example.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create Java Persistence API (JPA) repositories for <literal>Timeslot</literal>, <literal>Room</literal>, and <literal>Lesson</literal>. For information about creating JPA repositories, see <link xlink:href="https://spring.io/guides/gs/accessing-data-jpa/"><emphasis>Accessing Data with JPA</emphasis></link> on the Spring website.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Expose the JPA repositories through REST. For information about exposing the repositories, see <link xlink:href="https://spring.io/guides/gs/accessing-data-rest/"><emphasis>Accessing JPA Data with REST</emphasis></link> on the Spring website.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Build a <literal>TimeTableRepository</literal> facade to read and write a <literal>TimeTable</literal> in a single transaction.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Adjust the <literal>TimeTableController</literal> as shown in the following example:
						</simpara>
						<informalexample>
<programlisting language="java" linenumbering="unnumbered">package com.example.solver;

import com.example.domain.TimeTable;
import com.example.persistence.TimeTableRepository;
import org.optaplanner.core.api.score.ScoreManager;
import org.optaplanner.core.api.solver.SolverManager;
import org.optaplanner.core.api.solver.SolverStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/timeTable")
public class TimeTableController {

    @Autowired
    private TimeTableRepository timeTableRepository;
    @Autowired
    private SolverManager&lt;TimeTable, Long&gt; solverManager;
    @Autowired
    private ScoreManager&lt;TimeTable&gt; scoreManager;

    // To try, GET http://localhost:8080/timeTable
    @GetMapping()
    public TimeTable getTimeTable() {
        // Get the solver status before loading the solution
        // to avoid the race condition that the solver terminates between them
        SolverStatus solverStatus = getSolverStatus();
        TimeTable solution = timeTableRepository.findById(TimeTableRepository.SINGLETON_TIME_TABLE_ID);
        scoreManager.updateScore(solution); // Sets the score
        solution.setSolverStatus(solverStatus);
        return solution;
    }

    @PostMapping("/solve")
    public void solve() {
        solverManager.solveAndListen(TimeTableRepository.SINGLETON_TIME_TABLE_ID,
                timeTableRepository::findById,
                timeTableRepository::save);
    }

    public SolverStatus getSolverStatus() {
        return solverManager.getSolverStatus(TimeTableRepository.SINGLETON_TIME_TABLE_ID);
    }

    @PostMapping("/stopSolving")
    public void stopSolving() {
        solverManager.terminateEarly(TimeTableRepository.SINGLETON_TIME_TABLE_ID);
    }

}</programlisting>
						</informalexample>
						<simpara>
							For simplicity, this code handles only one <literal>TimeTable</literal> instance, but it is straightforward to enable multi-tenancy and handle multiple <literal>TimeTable</literal> instances of different high schools in parallel.
						</simpara>
						<simpara>
							The <literal>getTimeTable()</literal> method returns the latest timetable from the database. It uses the <literal>ScoreManager</literal> (which is automatically injected) to calculate the score of that timetable so the UI can show the score.
						</simpara>
						<simpara>
							The <literal>solve()</literal> method starts a job to solve the current timetable and store the time slot and room assignments in the database. It uses the <literal>SolverManager.solveAndListen()</literal> method to listen to intermediate best solutions and update the database accordingly. This enables the UI to show progress while the backend is still solving.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Now that the <literal>solve()</literal> method returns immediately, adjust the <literal>TimeTableControllerTest</literal> as shown in the following example:
						</simpara>
						<informalexample>
<programlisting language="java" linenumbering="unnumbered">package com.example.solver;

import com.example.domain.Lesson;
import com.example.domain.TimeTable;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.optaplanner.core.api.solver.SolverStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest(properties = {
        "optaplanner.solver.termination.spent-limit=1h", // Effectively disable this termination in favor of the best-score-limit
        "optaplanner.solver.termination.best-score-limit=0hard/*soft"})
public class TimeTableControllerTest {

    @Autowired
    private TimeTableController timeTableController;

    @Test
    @Timeout(600_000)
    public void solveDemoDataUntilFeasible() throws InterruptedException {
        timeTableController.solve();
        TimeTable timeTable = timeTableController.getTimeTable();
        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {
            // Quick polling (not a Test Thread Sleep anti-pattern)
            // Test is still fast on fast systems and doesn't randomly fail on slow systems.
            Thread.sleep(20L);
            timeTable = timeTableController.getTimeTable();
        }
        assertFalse(timeTable.getLessonList().isEmpty());
        for (Lesson lesson : timeTable.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(timeTable.getScore().isFeasible());
    }

}</programlisting>
						</informalexample>
					</listitem>
					<listitem>
						<simpara>
							Poll for the latest solution until the solver finishes solving.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To visualize the timetable, build an attractive web UI on top of these REST methods.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_using_micrometer_and_prometheus_to_monitor_your_school_timetable_optaplanner_spring_boot_application" xml:id="using_micrometer_and_prometheus_to_monitor_your_school_timetable_optaplanner_spring_boot_application">
				<title>Using Micrometer and Prometheus to monitor your school timetable OptaPlanner Spring Boot application</title>
				<simpara>
					OptaPlanner exposes metrics through <link xlink:href="https://micrometer.io/">Micrometer</link>, a metrics instrumentation library for Java applications. You can use Micrometer with Prometheus to monitor the OptaPlanner solver in the school timetable application.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created the Spring Boot OptaPlanner school timetable application.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Prometheus is installed. For information about installing Prometheus, see the <link xlink:href="https://prometheus.io/">Prometheus</link> website.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Navigate to the <literal>technology/java-spring-boot</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add the Micrometer Prometheus dependencies to the school timetable <literal>pom.xml</literal> file:
						</simpara>
						
<screen>&lt;dependency&gt;
 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
 &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
 &lt;groupId&gt;io.micrometer&lt;/groupId&gt;
 &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;
&lt;/dependency&gt;</screen>
					</listitem>
					<listitem>
						<simpara>
							Add the following property to the application.properties file:
						</simpara>
						
<screen>management.endpoints.web.exposure.include=metrics,prometheus</screen>
					</listitem>
					<listitem>
						<simpara>
							Start the school timetable application:
						</simpara>
						
<screen>mvn spring-boot:run</screen>
					</listitem>
					<listitem>
						<simpara>
							Open <literal><link xlink:href="http://localhost:8080/actuator/prometheus">http://localhost:8080/actuator/prometheus</link></literal> in a web browser.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="assembly-planner-java">
			<title>Red Hat build of OptaPlanner and Java: a school timetable quickstart guide</title>
			<simpara>
				This guide walks you through the process of creating a simple Java application with OptaPlanner’s constraint solving artificial intelligence (AI). You will build a command-line application that optimizes a school timetable for students and teachers:
			</simpara>
			
<screen>...
INFO  Solving ended: time spent (5000), best score (0hard/9soft), ...
INFO
INFO  |            | Room A     | Room B     | Room C     |
INFO  |------------|------------|------------|------------|
INFO  | MON 08:30  | English    | Math       |            |
INFO  |            | I. Jones   | A. Turing  |            |
INFO  |            | 9th grade  | 10th grade |            |
INFO  |------------|------------|------------|------------|
INFO  | MON 09:30  | History    | Physics    |            |
INFO  |            | I. Jones   | M. Curie   |            |
INFO  |            | 9th grade  | 10th grade |            |
INFO  |------------|------------|------------|------------|
INFO  | MON 10:30  | History    | Physics    |            |
INFO  |            | I. Jones   | M. Curie   |            |
INFO  |            | 10th grade | 9th grade  |            |
INFO  |------------|------------|------------|------------|
...
INFO  |------------|------------|------------|------------|</screen>
			<simpara>
				Your application will assign <literal>Lesson</literal> instances to <literal>Timeslot</literal> and <literal>Room</literal> instances automatically by using AI to adhere to hard and soft scheduling <emphasis>constraints</emphasis>, for example:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						A room can have at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher can teach at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A student can attend at most one lesson at the same time.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher prefers to teach all lessons in the same room.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A teacher prefers to teach sequential lessons and dislikes gaps between lessons.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						A student dislikes sequential lessons on the same subject.
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				Mathematically speaking, school timetabling is an <emphasis>NP-hard</emphasis> problem. This means it is difficult to scale. Simply brute force iterating through all possible combinations takes millions of years for a non-trivial data set, even on a supercomputer. Fortunately, AI constraint solvers such as OptaPlanner have advanced algorithms that deliver a near-optimal solution in a reasonable amount of time.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						OpenJDK (JDK) 11 is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						An IDE, such as <link xlink:href="https://www.jetbrains.com/idea">IntelliJ IDEA</link>, VSCode or Eclipse
					</simpara>
				</listitem>
			</itemizedlist>
			<section remap="_create_the_maven_or_gradle_build_file_and_add_dependencies" xml:id="create_the_maven_or_gradle_build_file_and_add_dependencies">
				<title>Create the Maven or Gradle build file and add dependencies</title>
				<simpara>
					You can use Maven or Gradle for the OptaPlanner school timetable application. After you create the build files, add the following dependencies:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>optaplanner-core</literal> (compile scope) to solve the school timetable problem
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>optaplanner-test</literal> (test scope) to JUnit test the school timetabling constraints
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							An implementation such as <literal>logback-classic</literal> (runtime scope) to view the steps that OptaPlanner takes
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the Maven or Gradle build file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Add <literal>optaplanner-core</literal>, <literal>optaplanner-test</literal>, and <literal>logback-classic</literal> dependencies to your build file:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									For Maven, add the following dependencies to the <literal>pom.xml</literal> file:
								</simpara>
								
<screen>  &lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-core&lt;/artifactId&gt;
  &lt;/dependency&gt;

  &lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;

  &lt;dependency&gt;
    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
    &lt;version&gt;1.2.3&lt;/version&gt;
  &lt;/dependency&gt;</screen>
								<simpara>
									The following example shows the complete <literal>pom.xml</literal> file.
								</simpara>
								
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.acme&lt;/groupId&gt;
  &lt;artifactId&gt;optaplanner-hello-world-school-timetabling-quickstart&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

  &lt;properties&gt;
    &lt;maven.compiler.release&gt;11&lt;/maven.compiler.release&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;

    &lt;version.org.optaplanner&gt;8.11.1.Final-redhat-00006&lt;/version.org.optaplanner&gt;
    &lt;version.org.logback&gt;1.2.3&lt;/version.org.logback&gt;

    &lt;version.compiler.plugin&gt;3.8.1&lt;/version.compiler.plugin&gt;
    &lt;version.surefire.plugin&gt;3.0.0-M5&lt;/version.surefire.plugin&gt;
    &lt;version.exec.plugin&gt;3.0.0&lt;/version.exec.plugin&gt;
  &lt;/properties&gt;

  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
        &lt;artifactId&gt;optaplanner-bom&lt;/artifactId&gt;
        &lt;version&gt;${version.org.optaplanner}&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
        &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
        &lt;version&gt;${version.org.logback}&lt;/version&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
      &lt;artifactId&gt;optaplanner-core&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
      &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Testing --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
      &lt;artifactId&gt;optaplanner-test&lt;/artifactId&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;${version.compiler.plugin}&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;${version.surefire.plugin}&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${version.exec.plugin}&lt;/version&gt;
        &lt;configuration&gt;
          &lt;mainClass&gt;org.acme.schooltimetabling.TimeTableApp&lt;/mainClass&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;jboss-public-repository-group&lt;/id&gt;
      &lt;url&gt;https://repository.jboss.org/nexus/content/groups/public/&lt;/url&gt;
      &lt;releases&gt;
        &lt;!-- Get releases only from Maven Central which is faster. --&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
&lt;/project&gt;</programlisting>
							</listitem>
							<listitem>
								<simpara>
									For Gradle, add the following dependencies to the <literal>gradle.build</literal> file:
								</simpara>
								
<screen>dependencies {
    implementation "org.optaplanner:optaplanner-core:${optaplannerVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"

    testImplementation "org.optaplanner:optaplanner-test:${optaplannerVersion}"
}</screen>
								<simpara>
									The following example shows the completed <literal>gradle.build</literal> file.
								</simpara>
								
<programlisting language="groovy" linenumbering="unnumbered">plugins {
    id "java"
    id "application"
}

def optaplannerVersion = "{project-version}"
def logbackVersion = "1.2.3"

group = "org.acme"
version = "0.1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.optaplanner:optaplanner-core:${optaplannerVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"

    testImplementation "org.optaplanner:optaplanner-test:${optaplannerVersion}"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs &lt;&lt; "-parameters"
}

compileTestJava {
    options.encoding = "UTF-8"
}

application {
    mainClass = "org.acme.schooltimetabling.TimeTableApp"
}

test {
    // Log the test execution results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}</programlisting>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="business-optimizr-domain-objects-proc_optaplanner-java">
				<title>Model the domain objects</title>
				<simpara>
					The goal of the Red Hat build of OptaPlanner timetable project is to assign each lesson to a time slot and a room. To do this, add three classes, <literal>Timeslot</literal>, <literal>Lesson</literal>, and <literal>Room</literal>, as shown in the following diagram:
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/optimizer/timeTableClassDiagramPure.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>timeTableClassDiagramPure</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<formalpara>
					<title>Timeslot</title>
					<para>
						The <literal>Timeslot</literal> class represents a time interval when lessons are taught, for example, <literal>Monday 10:30 - 11:30</literal> or <literal>Tuesday 13:30 - 14:30</literal>. In this example, all time slots have the same duration and there are no time slots during lunch or other breaks.
					</para>
				</formalpara>
				<simpara>
					A time slot has no date because a high school schedule just repeats every week. There is no need for <link xlink:href="https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning">continuous planning</link>. A timeslot is called a <emphasis>problem fact</emphasis> because no <literal>Timeslot</literal> instances change during solving. Such classes do not require any OptaPlanner-specific annotations.
				</simpara>
				<formalpara>
					<title>Room</title>
					<para>
						The <literal>Room</literal> class represents a location where lessons are taught, for example, <literal>Room A</literal> or <literal>Room B</literal>. In this example, all rooms are without capacity limits and they can accommodate all lessons.
					</para>
				</formalpara>
				<simpara>
					<literal>Room</literal> instances do not change during solving so <literal>Room</literal> is also a <emphasis>problem fact</emphasis>.
				</simpara>
				<formalpara>
					<title>Lesson</title>
					<para>
						During a lesson, represented by the <literal>Lesson</literal> class, a teacher teaches a subject to a group of students, for example, <literal>Math by A.Turing for 9th grade</literal> or <literal>Chemistry by M.Curie for 10th grade</literal>. If a subject is taught multiple times each week by the same teacher to the same student group, there are multiple <literal>Lesson</literal> instances that are only distinguishable by <literal>id</literal>. For example, the 9th grade has six math lessons a week.
					</para>
				</formalpara>
				<simpara>
					During solving, OptaPlanner changes the <literal>timeslot</literal> and <literal>room</literal> fields of the <literal>Lesson</literal> class to assign each lesson to a time slot and a room. Because OptaPlanner changes these fields, <literal>Lesson</literal> is a <emphasis>planning entity</emphasis>:
				</simpara>
				<informalfigure>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/_images/optimizer/timeTableClassDiagramAnnotated.png" format="PNG" />
					</imageobject>
					<textobject>
						<phrase>timeTableClassDiagramAnnotated</phrase>
					</textobject>
				</mediaobject>
				</informalfigure>
				<simpara>
					Most of the fields in the previous diagram contain input data, except for the orange fields. A lesson’s <literal>timeslot</literal> and <literal>room</literal> fields are unassigned (<literal>null</literal>) in the input data and assigned (not <literal>null</literal>) in the output data. OptaPlanner changes these fields during solving. Such fields are called planning variables. In order for OptaPlanner to recognize them, both the <literal>timeslot</literal> and <literal>room</literal> fields require an <literal>@PlanningVariable</literal> annotation. Their containing class, <literal>Lesson</literal>, requires an <literal>@PlanningEntity</literal> annotation.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Timeslot.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import java.time.DayOfWeek;
import java.time.LocalTime;

public class Timeslot {

    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;

    private Timeslot() {
    }

    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {
        this.dayOfWeek = dayOfWeek;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    @Override
    public String toString() {
        return dayOfWeek + " " + startTime.toString();
    }

    // ********************************
    // Getters and setters
    // ********************************

    public DayOfWeek getDayOfWeek() {
        return dayOfWeek;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }

}</programlisting>
						<simpara>
							Notice the <literal>toString()</literal> method keeps the output short so it is easier to read OptaPlanner’s <literal>DEBUG</literal> or <literal>TRACE</literal> log, as shown later.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Room.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

public class Room {

    private String name;

    private Room() {
    }

    public Room(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return name;
    }

    // ********************************
    // Getters and setters
    // ********************************

    public String getName() {
        return name;
    }

}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/com/example/domain/Lesson.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import org.optaplanner.core.api.domain.entity.PlanningEntity;
import org.optaplanner.core.api.domain.variable.PlanningVariable;

@PlanningEntity
public class Lesson {

    private Long id;

    private String subject;
    private String teacher;
    private String studentGroup;

    @PlanningVariable(valueRangeProviderRefs = "timeslotRange")
    private Timeslot timeslot;

    @PlanningVariable(valueRangeProviderRefs = "roomRange")
    private Room room;

    private Lesson() {
    }

    public Lesson(Long id, String subject, String teacher, String studentGroup) {
        this.id = id;
        this.subject = subject;
        this.teacher = teacher;
        this.studentGroup = studentGroup;
    }

    @Override
    public String toString() {
        return subject + "(" + id + ")";
    }

    // ********************************
    // Getters and setters
    // ********************************

    public Long getId() {
        return id;
    }

    public String getSubject() {
        return subject;
    }

    public String getTeacher() {
        return teacher;
    }

    public String getStudentGroup() {
        return studentGroup;
    }

    public Timeslot getTimeslot() {
        return timeslot;
    }

    public void setTimeslot(Timeslot timeslot) {
        this.timeslot = timeslot;
    }

    public Room getRoom() {
        return room;
    }

    public void setRoom(Room room) {
        this.room = room;
    }

}</programlisting>
						<simpara>
							The <literal>Lesson</literal> class has an <literal>@PlanningEntity</literal> annotation, so OptaPlanner knows that this class changes during solving because it contains one or more planning variables.
						</simpara>
						<simpara>
							The <literal>timeslot</literal> field has an <literal>@PlanningVariable</literal> annotation, so OptaPlanner knows that it can change its value. In order to find potential <literal>Timeslot</literal> instances to assign to this field, OptaPlanner uses the <literal>valueRangeProviderRefs</literal> property to connect to a value range provider that provides a <literal>List&lt;Timeslot&gt;</literal> to pick from. See <xref linkend="business-optimizr-gather-objects-proc_optaplanner-java" /> for information about value range providers.
						</simpara>
						<simpara>
							The <literal>room</literal> field also has an <literal>@PlanningVariable</literal> annotation for the same reasons.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="business-optimizr-define-contraints-proc_optaplanner-java">
				<title>Define the constraints and calculate the score</title>
				<simpara>
					When solving a problem, a <emphasis>score</emphasis> represents the quality of a specific solution. The higher the score the better. Red Hat build of OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time. It might be the <emphasis>optimal</emphasis> solution.
				</simpara>
				<simpara>
					Because the timetable example use case has hard and soft constraints, use the <literal>HardSoftScore</literal> class to represent the score:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Hard constraints must not be broken. For example: <emphasis>A room can have at most one lesson at the same time.</emphasis>
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Soft constraints should not be broken. For example: <emphasis>A teacher prefers to teach in a single room.</emphasis>
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					Hard constraints are weighted against other hard constraints. Soft constraints are weighted against other soft constraints. Hard constraints always outweigh soft constraints, regardless of their respective weights.
				</simpara>
				<simpara>
					To calculate the score, you could implement an <literal>EasyScoreCalculator</literal> class:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">public class TimeTableEasyScoreCalculator implements EasyScoreCalculator&lt;TimeTable&gt; {

    @Override
    public HardSoftScore calculateScore(TimeTable timeTable) {
        List&lt;Lesson&gt; lessonList = timeTable.getLessonList();
        int hardScore = 0;
        for (Lesson a : lessonList) {
            for (Lesson b : lessonList) {
                if (a.getTimeslot() != null &amp;&amp; a.getTimeslot().equals(b.getTimeslot())
                        &amp;&amp; a.getId() &lt; b.getId()) {
                    // A room can accommodate at most one lesson at the same time.
                    if (a.getRoom() != null &amp;&amp; a.getRoom().equals(b.getRoom())) {
                        hardScore--;
                    }
                    // A teacher can teach at most one lesson at the same time.
                    if (a.getTeacher().equals(b.getTeacher())) {
                        hardScore--;
                    }
                    // A student can attend at most one lesson at the same time.
                    if (a.getStudentGroup().equals(b.getStudentGroup())) {
                        hardScore--;
                    }
                }
            }
        }
        int softScore = 0;
        // Soft constraints are only implemented in the "complete" implementation
        return HardSoftScore.of(hardScore, softScore);
    }

}</programlisting>
				<simpara>
					Unfortunately, this solution does not scale well because it is non-incremental: every time a lesson is assigned to a different time slot or room, all lessons are re-evaluated to calculate the new score.
				</simpara>
				<simpara>
					A better solution is to create a <literal>src/main/java/com/example/solver/TimeTableConstraintProvider.java</literal> class to perform incremental score calculation. This class uses OptaPlanner’s ConstraintStream API which is inspired by Java 8 Streams and SQL. The <literal>ConstraintProvider</literal> scales an order of magnitude better than the <literal>EasyScoreCalculator</literal>: <emphasis>O</emphasis>(n) instead of <emphasis>O</emphasis>(n²).
				</simpara>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the following <literal>src/main/java/com/example/solver/TimeTableConstraintProvider.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package com.example.solver;

import com.example.domain.Lesson;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.stream.Constraint;
import org.optaplanner.core.api.score.stream.ConstraintFactory;
import org.optaplanner.core.api.score.stream.ConstraintProvider;
import org.optaplanner.core.api.score.stream.Joiners;

public class TimeTableConstraintProvider implements ConstraintProvider {

    @Override
    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {
        return new Constraint[] {
                // Hard constraints
                roomConflict(constraintFactory),
                teacherConflict(constraintFactory),
                studentGroupConflict(constraintFactory),
                // Soft constraints are only implemented in the "complete" implementation
        };
    }

    private Constraint roomConflict(ConstraintFactory constraintFactory) {
        // A room can accommodate at most one lesson at the same time.

        // Select a lesson ...
        return constraintFactory.from(Lesson.class)
                // ... and pair it with another lesson ...
                .join(Lesson.class,
                        // ... in the same timeslot ...
                        Joiners.equal(Lesson::getTimeslot),
                        // ... in the same room ...
                        Joiners.equal(Lesson::getRoom),
                        // ... and the pair is unique (different id, no reverse pairs)
                        Joiners.lessThan(Lesson::getId))
                // then penalize each pair with a hard weight.
                .penalize("Room conflict", HardSoftScore.ONE_HARD);
    }

    private Constraint teacherConflict(ConstraintFactory constraintFactory) {
        // A teacher can teach at most one lesson at the same time.
        return constraintFactory.from(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getTeacher),
                        Joiners.lessThan(Lesson::getId))
                .penalize("Teacher conflict", HardSoftScore.ONE_HARD);
    }

    private Constraint studentGroupConflict(ConstraintFactory constraintFactory) {
        // A student can attend at most one lesson at the same time.
        return constraintFactory.from(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getStudentGroup),
                        Joiners.lessThan(Lesson::getId))
                .penalize("Student group conflict", HardSoftScore.ONE_HARD);
    }

}</programlisting>
			</section>
			<section xml:id="business-optimizr-gather-objects-proc_optaplanner-java">
				<title>Gather the domain objects in a planning solution</title>
				<simpara>
					A <literal>TimeTable</literal> instance wraps all <literal>Timeslot</literal>, <literal>Room</literal>, and <literal>Lesson</literal> instances of a single dataset. Furthermore, because it contains all lessons, each with a specific planning variable state, it is a <emphasis>planning solution</emphasis> and it has a score:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							If lessons are still unassigned, then it is an <emphasis>uninitialized</emphasis> solution, for example, a solution with the score <literal>-4init/0hard/0soft</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If it breaks hard constraints, then it is an <emphasis>infeasible</emphasis> solution, for example, a solution with the score <literal>-2hard/-3soft</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If it adheres to all hard constraints, then it is a <emphasis>feasible</emphasis> solution, for example, a solution with the score <literal>0hard/-7soft</literal>.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					The <literal>TimeTable</literal> class has an <literal>@PlanningSolution</literal> annotation, so Red Hat build of OptaPlanner knows that this class contains all of the input and output data.
				</simpara>
				<simpara>
					Specifically, this class is the input of the problem:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <literal>timeslotList</literal> field with all time slots
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of problem facts, because they do not change during solving.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							A <literal>roomList</literal> field with all rooms
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of problem facts, because they do not change during solving.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							A <literal>lessonList</literal> field with all lessons
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									This is a list of planning entities because they change during solving.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Of each <literal>Lesson</literal>:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											The values of the <literal>timeslot</literal> and <literal>room</literal> fields are typically still <literal>null</literal>, so unassigned. They are planning variables.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											The other fields, such as <literal>subject</literal>, <literal>teacher</literal> and <literal>studentGroup</literal>, are filled in. These fields are problem properties.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<simpara>
					However, this class is also the output of the solution:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <literal>lessonList</literal> field for which each <literal>Lesson</literal> instance has non-null <literal>timeslot</literal> and <literal>room</literal> fields after solving
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A <literal>score</literal> field that represents the quality of the output solution, for example, <literal>0hard/-5soft</literal>
						</simpara>
					</listitem>
				</itemizedlist>
				<formalpara>
					<title>Procedure</title>
					<para>
						Create the <literal>src/main/java/com/example/domain/TimeTable.java</literal> class:
					</para>
				</formalpara>
				
<programlisting language="java" linenumbering="unnumbered">package com.example.domain;

import java.util.List;

import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.PlanningSolution;
import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;

@PlanningSolution
public class TimeTable {

    @ValueRangeProvider(id = "timeslotRange")
    @ProblemFactCollectionProperty
    private List&lt;Timeslot&gt; timeslotList;

    @ValueRangeProvider(id = "roomRange")
    @ProblemFactCollectionProperty
    private List&lt;Room&gt; roomList;

    @PlanningEntityCollectionProperty
    private List&lt;Lesson&gt; lessonList;

    @PlanningScore
    private HardSoftScore score;

    private TimeTable() {
    }

    public TimeTable(List&lt;Timeslot&gt; timeslotList, List&lt;Room&gt; roomList,
            List&lt;Lesson&gt; lessonList) {
        this.timeslotList = timeslotList;
        this.roomList = roomList;
        this.lessonList = lessonList;
    }

    // ********************************
    // Getters and setters
    // ********************************

    public List&lt;Timeslot&gt; getTimeslotList() {
        return timeslotList;
    }

    public List&lt;Room&gt; getRoomList() {
        return roomList;
    }

    public List&lt;Lesson&gt; getLessonList() {
        return lessonList;
    }

    public HardSoftScore getScore() {
        return score;
    }

}</programlisting>
				<formalpara>
					<title>The value range providers</title>
					<para>
						The <literal>timeslotList</literal> field is a value range provider. It holds the <literal>Timeslot</literal> instances which OptaPlanner can pick from to assign to the <literal>timeslot</literal> field of <literal>Lesson</literal> instances. The <literal>timeslotList</literal> field has an <literal>@ValueRangeProvider</literal> annotation to connect those two, by matching the <literal>id</literal> with the <literal>valueRangeProviderRefs</literal> of the <literal>@PlanningVariable</literal> in the <literal>Lesson</literal>.
					</para>
				</formalpara>
				<simpara>
					Following the same logic, the <literal>roomList</literal> field also has an <literal>@ValueRangeProvider</literal> annotation.
				</simpara>
				<formalpara>
					<title>The problem fact and planning entity properties</title>
					<para>
						Furthermore, OptaPlanner needs to know which <literal>Lesson</literal> instances it can change as well as how to retrieve the <literal>Timeslot</literal> and <literal>Room</literal> instances used for score calculation by your <literal>TimeTableConstraintProvider</literal>.
					</para>
				</formalpara>
				<simpara>
					The <literal>timeslotList</literal> and <literal>roomList</literal> fields have an <literal>@ProblemFactCollectionProperty</literal> annotation, so your <literal>TimeTableConstraintProvider</literal> can select from those instances.
				</simpara>
				<simpara>
					The <literal>lessonList</literal> has an <literal>@PlanningEntityCollectionProperty</literal> annotation, so OptaPlanner can change them during solving and your <literal>TimeTableConstraintProvider</literal> can select from those too.
				</simpara>
			</section>
			<section remap="_the_timetableapp_java_class" xml:id="the_timetableapp_java_class">
				<title>The TimeTableApp.java class</title>
				<simpara>
					After you have created all of the components of the school timetable application, you will put them all together in the <literal>TimeTableApp.java</literal> class.
				</simpara>
				<simpara>
					The <literal>main()</literal> method performs the following tasks:
				</simpara>
				<orderedlist numeration="arabic">
					<listitem>
						<simpara>
							Creates the <literal>SolverFactory</literal> to build a <literal>Solver</literal> for each data set.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Loads a data set.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Solves it with <literal>Solver.solve()</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Visualizes the solution for that data set.
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					Typically, an application has a single <literal>SolverFactory</literal> to build a new <literal>Solver</literal> instance for each problem data set to solve. A <literal>SolverFactory</literal> is thread-safe, but a <literal>Solver</literal> is not. For the school timetable application, there is only one data set, so only one <literal>Solver</literal> instance.
				</simpara>
				<simpara>
					Here is the completed <literal>TimeTableApp.java</literal> class:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">package org.acme.schooltimetabling;

import java.time.DayOfWeek;
import java.time.Duration;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.acme.schooltimetabling.domain.Lesson;
import org.acme.schooltimetabling.domain.Room;
import org.acme.schooltimetabling.domain.TimeTable;
import org.acme.schooltimetabling.domain.Timeslot;
import org.acme.schooltimetabling.solver.TimeTableConstraintProvider;
import org.optaplanner.core.api.solver.Solver;
import org.optaplanner.core.api.solver.SolverFactory;
import org.optaplanner.core.config.solver.SolverConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TimeTableApp {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeTableApp.class);

    public static void main(String[] args) {
        SolverFactory&lt;TimeTable&gt; solverFactory = SolverFactory.create(new SolverConfig()
                .withSolutionClass(TimeTable.class)
                .withEntityClasses(Lesson.class)
                .withConstraintProviderClass(TimeTableConstraintProvider.class)
                // The solver runs only for 5 seconds on this small data set.
                // It's recommended to run for at least 5 minutes ("5m") otherwise.
                .withTerminationSpentLimit(Duration.ofSeconds(10)));

        // Load the problem
        TimeTable problem = generateDemoData();

        // Solve the problem
        Solver&lt;TimeTable&gt; solver = solverFactory.buildSolver();
        TimeTable solution = solver.solve(problem);

        // Visualize the solution
        printTimetable(solution);
    }

    public static TimeTable generateDemoData() {
        List&lt;Timeslot&gt; timeslotList = new ArrayList&lt;&gt;(10);
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));

        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));

        List&lt;Room&gt; roomList = new ArrayList&lt;&gt;(3);
        roomList.add(new Room("Room A"));
        roomList.add(new Room("Room B"));
        roomList.add(new Room("Room C"));

        List&lt;Lesson&gt; lessonList = new ArrayList&lt;&gt;();
        long id = 0;
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "9th grade"));
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "9th grade"));
        lessonList.add(new Lesson(id++, "Physics", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(id++, "Chemistry", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(id++, "Biology", "C. Darwin", "9th grade"));
        lessonList.add(new Lesson(id++, "History", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(id++, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(id++, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(id++, "Spanish", "P. Cruz", "9th grade"));
        lessonList.add(new Lesson(id++, "Spanish", "P. Cruz", "9th grade"));

        lessonList.add(new Lesson(id++, "Math", "A. Turing", "10th grade"));
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "10th grade"));
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "10th grade"));
        lessonList.add(new Lesson(id++, "Physics", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(id++, "Chemistry", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(id++, "French", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(id++, "Geography", "C. Darwin", "10th grade"));
        lessonList.add(new Lesson(id++, "History", "I. Jones", "10th grade"));
        lessonList.add(new Lesson(id++, "English", "P. Cruz", "10th grade"));
        lessonList.add(new Lesson(id++, "Spanish", "P. Cruz", "10th grade"));

        return new TimeTable(timeslotList, roomList, lessonList);
    }

    private static void printTimetable(TimeTable timeTable) {
        LOGGER.info("");
        List&lt;Room&gt; roomList = timeTable.getRoomList();
        List&lt;Lesson&gt; lessonList = timeTable.getLessonList();
        Map&lt;Timeslot, Map&lt;Room, List&lt;Lesson&gt;&gt;&gt; lessonMap = lessonList.stream()
                .filter(lesson -&gt; lesson.getTimeslot() != null &amp;&amp; lesson.getRoom() != null)
                .collect(Collectors.groupingBy(Lesson::getTimeslot, Collectors.groupingBy(Lesson::getRoom)));
        LOGGER.info("|            | " + roomList.stream()
                .map(room -&gt; String.format("%-10s", room.getName())).collect(Collectors.joining(" | ")) + " |");
        LOGGER.info("|" + "------------|".repeat(roomList.size() + 1));
        for (Timeslot timeslot : timeTable.getTimeslotList()) {
            List&lt;List&lt;Lesson&gt;&gt; cellList = roomList.stream()
                    .map(room -&gt; {
                        Map&lt;Room, List&lt;Lesson&gt;&gt; byRoomMap = lessonMap.get(timeslot);
                        if (byRoomMap == null) {
                            return Collections.&lt;Lesson&gt;emptyList();
                        }
                        List&lt;Lesson&gt; cellLessonList = byRoomMap.get(room);
                        if (cellLessonList == null) {
                            return Collections.&lt;Lesson&gt;emptyList();
                        }
                        return cellLessonList;
                    })
                    .collect(Collectors.toList());

            LOGGER.info("| " + String.format("%-10s",
                    timeslot.getDayOfWeek().toString().substring(0, 3) + " " + timeslot.getStartTime()) + " | "
                    + cellList.stream().map(cellLessonList -&gt; String.format("%-10s",
                            cellLessonList.stream().map(Lesson::getSubject).collect(Collectors.joining(", "))))
                            .collect(Collectors.joining(" | "))
                    + " |");
            LOGGER.info("|            | "
                    + cellList.stream().map(cellLessonList -&gt; String.format("%-10s",
                            cellLessonList.stream().map(Lesson::getTeacher).collect(Collectors.joining(", "))))
                            .collect(Collectors.joining(" | "))
                    + " |");
            LOGGER.info("|            | "
                    + cellList.stream().map(cellLessonList -&gt; String.format("%-10s",
                            cellLessonList.stream().map(Lesson::getStudentGroup).collect(Collectors.joining(", "))))
                            .collect(Collectors.joining(" | "))
                    + " |");
            LOGGER.info("|" + "------------|".repeat(roomList.size() + 1));
        }
        List&lt;Lesson&gt; unassignedLessons = lessonList.stream()
                .filter(lesson -&gt; lesson.getTimeslot() == null || lesson.getRoom() == null)
                .collect(Collectors.toList());
        if (!unassignedLessons.isEmpty()) {
            LOGGER.info("");
            LOGGER.info("Unassigned lessons");
            for (Lesson lesson : unassignedLessons) {
                LOGGER.info("  " + lesson.getSubject() + " - " + lesson.getTeacher() + " - " + lesson.getStudentGroup());
            }
        }
    }

}</programlisting>
				<simpara>
					The <literal>main()</literal> method first creates the <literal>SolverFactory</literal>:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">SolverFactory&lt;TimeTable&gt; solverFactory = SolverFactory.create(new SolverConfig()
        .withSolutionClass(TimeTable.class)
        .withEntityClasses(Lesson.class)
        .withConstraintProviderClass(TimeTableConstraintProvider.class)
        // The solver runs only for 5 seconds on this small data set.
        // It's recommended to run for at least 5 minutes ("5m") otherwise.
        .withTerminationSpentLimit(Duration.ofSeconds(5)));</programlisting>
				<simpara>
					The <literal>SolverFactory</literal> creation registers the <literal>@PlanningSolution</literal> class, the <literal>@PlanningEntity</literal> classes, and the <literal>ConstraintProvider</literal> class, all of which you created earlier.
				</simpara>
				<simpara>
					Without a termination setting or a <literal>terminationEarly()</literal> event, the solver runs forever. To avoid that, the solver limits the solving time to five seconds.
				</simpara>
				<simpara>
					After five seconds, the <literal>main()</literal> method loads the problem, solves it, and prints the solution:
				</simpara>
				
<programlisting language="java" linenumbering="unnumbered">        // Load the problem
        TimeTable problem = generateDemoData();

        // Solve the problem
        Solver&lt;TimeTable&gt; solver = solverFactory.buildSolver();
        TimeTable solution = solver.solve(problem);

        // Visualize the solution
        printTimetable(solution);</programlisting>
				<simpara>
					The <literal>solve()</literal> method doesn’t return instantly. It runs for five seconds before returning the best solution.
				</simpara>
				<simpara>
					OptaPlanner returns <emphasis>the best solution</emphasis> found in the available termination time. Due to the nature of NP-hard problems, the best solution might not be optimal, especially for larger data sets. Increase the termination time to potentially find a better solution.
				</simpara>
				<simpara>
					The <literal>generateDemoData()</literal> method generates the school timetable problem to solve.
				</simpara>
				<simpara>
					The <literal>printTimetable()</literal> method prettyprints the timetable to the console, so it’s easy to determine visually whether or not it’s a good schedule.
				</simpara>
			</section>
			<section remap="_create_and_run_the_school_timetable_application" xml:id="create_and_run_the_school_timetable_application">
				<title>Create and run the school timetable application</title>
				<simpara>
					Now that you have completed all of the components of the school timetable Java application, you are ready to put them all together in the <literal>TimeTableApp.java</literal> class and run it.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created all of the required components of the school timetable application.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Create the <literal>src/main/java/org/acme/schooltimetabling/TimeTableApp.java</literal> class:
						</simpara>
						
<programlisting language="java" linenumbering="unnumbered">package org.acme.schooltimetabling;

import java.time.DayOfWeek;
import java.time.Duration;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.acme.schooltimetabling.domain.Lesson;
import org.acme.schooltimetabling.domain.Room;
import org.acme.schooltimetabling.domain.TimeTable;
import org.acme.schooltimetabling.domain.Timeslot;
import org.acme.schooltimetabling.solver.TimeTableConstraintProvider;
import org.optaplanner.core.api.solver.Solver;
import org.optaplanner.core.api.solver.SolverFactory;
import org.optaplanner.core.config.solver.SolverConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TimeTableApp {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeTableApp.class);

    public static void main(String[] args) {
        SolverFactory&lt;TimeTable&gt; solverFactory = SolverFactory.create(new SolverConfig()
                .withSolutionClass(TimeTable.class)
                .withEntityClasses(Lesson.class)
                .withConstraintProviderClass(TimeTableConstraintProvider.class)
                // The solver runs only for 5 seconds on this small data set.
                // It's recommended to run for at least 5 minutes ("5m") otherwise.
                .withTerminationSpentLimit(Duration.ofSeconds(10)));

        // Load the problem
        TimeTable problem = generateDemoData();

        // Solve the problem
        Solver&lt;TimeTable&gt; solver = solverFactory.buildSolver();
        TimeTable solution = solver.solve(problem);

        // Visualize the solution
        printTimetable(solution);
    }

    public static TimeTable generateDemoData() {
        List&lt;Timeslot&gt; timeslotList = new ArrayList&lt;&gt;(10);
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));

        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));

        List&lt;Room&gt; roomList = new ArrayList&lt;&gt;(3);
        roomList.add(new Room("Room A"));
        roomList.add(new Room("Room B"));
        roomList.add(new Room("Room C"));

        List&lt;Lesson&gt; lessonList = new ArrayList&lt;&gt;();
        long id = 0;
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "9th grade"));
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "9th grade"));
        lessonList.add(new Lesson(id++, "Physics", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(id++, "Chemistry", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(id++, "Biology", "C. Darwin", "9th grade"));
        lessonList.add(new Lesson(id++, "History", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(id++, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(id++, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(id++, "Spanish", "P. Cruz", "9th grade"));
        lessonList.add(new Lesson(id++, "Spanish", "P. Cruz", "9th grade"));

        lessonList.add(new Lesson(id++, "Math", "A. Turing", "10th grade"));
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "10th grade"));
        lessonList.add(new Lesson(id++, "Math", "A. Turing", "10th grade"));
        lessonList.add(new Lesson(id++, "Physics", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(id++, "Chemistry", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(id++, "French", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(id++, "Geography", "C. Darwin", "10th grade"));
        lessonList.add(new Lesson(id++, "History", "I. Jones", "10th grade"));
        lessonList.add(new Lesson(id++, "English", "P. Cruz", "10th grade"));
        lessonList.add(new Lesson(id++, "Spanish", "P. Cruz", "10th grade"));

        return new TimeTable(timeslotList, roomList, lessonList);
    }

    private static void printTimetable(TimeTable timeTable) {
        LOGGER.info("");
        List&lt;Room&gt; roomList = timeTable.getRoomList();
        List&lt;Lesson&gt; lessonList = timeTable.getLessonList();
        Map&lt;Timeslot, Map&lt;Room, List&lt;Lesson&gt;&gt;&gt; lessonMap = lessonList.stream()
                .filter(lesson -&gt; lesson.getTimeslot() != null &amp;&amp; lesson.getRoom() != null)
                .collect(Collectors.groupingBy(Lesson::getTimeslot, Collectors.groupingBy(Lesson::getRoom)));
        LOGGER.info("|            | " + roomList.stream()
                .map(room -&gt; String.format("%-10s", room.getName())).collect(Collectors.joining(" | ")) + " |");
        LOGGER.info("|" + "------------|".repeat(roomList.size() + 1));
        for (Timeslot timeslot : timeTable.getTimeslotList()) {
            List&lt;List&lt;Lesson&gt;&gt; cellList = roomList.stream()
                    .map(room -&gt; {
                        Map&lt;Room, List&lt;Lesson&gt;&gt; byRoomMap = lessonMap.get(timeslot);
                        if (byRoomMap == null) {
                            return Collections.&lt;Lesson&gt;emptyList();
                        }
                        List&lt;Lesson&gt; cellLessonList = byRoomMap.get(room);
                        if (cellLessonList == null) {
                            return Collections.&lt;Lesson&gt;emptyList();
                        }
                        return cellLessonList;
                    })
                    .collect(Collectors.toList());

            LOGGER.info("| " + String.format("%-10s",
                    timeslot.getDayOfWeek().toString().substring(0, 3) + " " + timeslot.getStartTime()) + " | "
                    + cellList.stream().map(cellLessonList -&gt; String.format("%-10s",
                            cellLessonList.stream().map(Lesson::getSubject).collect(Collectors.joining(", "))))
                            .collect(Collectors.joining(" | "))
                    + " |");
            LOGGER.info("|            | "
                    + cellList.stream().map(cellLessonList -&gt; String.format("%-10s",
                            cellLessonList.stream().map(Lesson::getTeacher).collect(Collectors.joining(", "))))
                            .collect(Collectors.joining(" | "))
                    + " |");
            LOGGER.info("|            | "
                    + cellList.stream().map(cellLessonList -&gt; String.format("%-10s",
                            cellLessonList.stream().map(Lesson::getStudentGroup).collect(Collectors.joining(", "))))
                            .collect(Collectors.joining(" | "))
                    + " |");
            LOGGER.info("|" + "------------|".repeat(roomList.size() + 1));
        }
        List&lt;Lesson&gt; unassignedLessons = lessonList.stream()
                .filter(lesson -&gt; lesson.getTimeslot() == null || lesson.getRoom() == null)
                .collect(Collectors.toList());
        if (!unassignedLessons.isEmpty()) {
            LOGGER.info("");
            LOGGER.info("Unassigned lessons");
            for (Lesson lesson : unassignedLessons) {
                LOGGER.info("  " + lesson.getSubject() + " - " + lesson.getTeacher() + " - " + lesson.getStudentGroup());
            }
        }
    }

}</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Run the <literal>TimeTableApp</literal> class as the main class of a normal Java application. The following output should result:
						</simpara>
						
<screen>...
INFO  |            | Room A     | Room B     | Room C     |
INFO  |------------|------------|------------|------------|
INFO  | MON 08:30  | English    | Math       |            |
INFO  |            | I. Jones   | A. Turing  |            |
INFO  |            | 9th grade  | 10th grade |            |
INFO  |------------|------------|------------|------------|
INFO  | MON 09:30  | History    | Physics    |            |
INFO  |            | I. Jones   | M. Curie   |            |
INFO  |            | 9th grade  | 10th grade |            |
...</screen>
					</listitem>
					<listitem>
						<simpara>
							Verify the console output. Does it conform to all hard constraints? What happens if you comment out the <literal>roomConflict</literal> constraint in <literal>TimeTableConstraintProvider</literal>?
						</simpara>
					</listitem>
				</orderedlist>
				<simpara>
					The <literal>info</literal> log shows what OptaPlanner did in those five seconds:
				</simpara>
				
<screen>... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).
... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).
... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).</screen>
			</section>
			<section remap="_test_the_application" xml:id="test_the_application">
				<title>Test the application</title>
				<simpara>
					A good application includes test coverage. Test the constraints and the solver in your timetable project.
				</simpara>
				<section xml:id="business-optimizer-test-constraints-proc_optaplanner-java">
					<title>Test the school timetable constraints</title>
					<simpara>
						To test each constraint of the timetable project in isolation, use a <literal>ConstraintVerifier</literal> in unit tests. This tests each constraint’s corner cases in isolation from the other tests, which lowers maintenance when adding a new constraint with proper test coverage.
					</simpara>
					<simpara>
						This test verifies that the constraint <literal>TimeTableConstraintProvider::roomConflict</literal>, when given three lessons in the same room and two of the lessons have the same timeslot, penalizes with a match weight of 1. So if the constraint weight is <literal>10hard</literal> it reduces the score by <literal>-10hard</literal>.
					</simpara>
					<formalpara>
						<title>Procedure</title>
						<para>
							Create the <literal>src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java</literal> class:
						</para>
					</formalpara>
					
<programlisting language="java" linenumbering="unnumbered">package org.acme.optaplanner.solver;

import java.time.DayOfWeek;
import java.time.LocalTime;

import javax.inject.Inject;

import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.domain.Timeslot;
import org.junit.jupiter.api.Test;
import org.optaplanner.test.api.score.stream.ConstraintVerifier;

@QuarkusTest
class TimeTableConstraintProviderTest {

    private static final Room ROOM = new Room("Room1");
    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);
    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);

    @Inject
    ConstraintVerifier&lt;TimeTableConstraintProvider, TimeTable&gt; constraintVerifier;

    @Test
    void roomConflict() {
        Lesson firstLesson = new Lesson(1, "Subject1", "Teacher1", "Group1");
        Lesson conflictingLesson = new Lesson(2, "Subject2", "Teacher2", "Group2");
        Lesson nonConflictingLesson = new Lesson(3, "Subject3", "Teacher3", "Group3");

        firstLesson.setRoom(ROOM);
        firstLesson.setTimeslot(TIMESLOT1);

        conflictingLesson.setRoom(ROOM);
        conflictingLesson.setTimeslot(TIMESLOT1);

        nonConflictingLesson.setRoom(ROOM);
        nonConflictingLesson.setTimeslot(TIMESLOT2);

        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)
                .given(firstLesson, conflictingLesson, nonConflictingLesson)
                .penalizesBy(1);
    }

}</programlisting>
					<simpara>
						Notice how <literal>ConstraintVerifier</literal> ignores the constraint weight during testing even if those constraint weights are hardcoded in the <literal>ConstraintProvider</literal>. This is because constraint weights change regularly before going into production. This way, constraint weight tweaking does not break the unit tests.
					</simpara>
				</section>
				<section xml:id="business-optimizer-test-solver-proc_optaplanner-java">
					<title>Test the school timetable solver</title>
					<simpara>
						This example tests the Red Hat build of OptaPlanner school timetable project on Red Hat build of Quarkus. It uses a JUnit test to generate a test data set and send it to the <literal>TimeTableController</literal> to solve.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Create the <literal>src/test/java/com/example/rest/TimeTableResourceTest.java</literal> class with the following content:
							</simpara>
							
<programlisting language="java" linenumbering="unnumbered">package com.exmaple.optaplanner.rest;

import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import io.quarkus.test.junit.QuarkusTest;
import com.exmaple.optaplanner.domain.Room;
import com.exmaple.optaplanner.domain.Timeslot;
import com.exmaple.optaplanner.domain.Lesson;
import com.exmaple.optaplanner.domain.TimeTable;
import com.exmaple.optaplanner.rest.TimeTableResource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@QuarkusTest
public class TimeTableResourceTest {

    @Inject
    TimeTableResource timeTableResource;

    @Test
    @Timeout(600_000)
    public void solve() {
        TimeTable problem = generateProblem();
        TimeTable solution = timeTableResource.solve(problem);
        assertFalse(solution.getLessonList().isEmpty());
        for (Lesson lesson : solution.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(solution.getScore().isFeasible());
    }

    private TimeTable generateProblem() {
        List&lt;Timeslot&gt; timeslotList = new ArrayList&lt;&gt;();
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));

        List&lt;Room&gt; roomList = new ArrayList&lt;&gt;();
        roomList.add(new Room("Room A"));
        roomList.add(new Room("Room B"));
        roomList.add(new Room("Room C"));

        List&lt;Lesson&gt; lessonList = new ArrayList&lt;&gt;();
        lessonList.add(new Lesson(101L, "Math", "B. May", "9th grade"));
        lessonList.add(new Lesson(102L, "Physics", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(103L, "Geography", "M. Polo", "9th grade"));
        lessonList.add(new Lesson(104L, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(105L, "Spanish", "P. Cruz", "9th grade"));

        lessonList.add(new Lesson(201L, "Math", "B. May", "10th grade"));
        lessonList.add(new Lesson(202L, "Chemistry", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(203L, "History", "I. Jones", "10th grade"));
        lessonList.add(new Lesson(204L, "English", "P. Cruz", "10th grade"));
        lessonList.add(new Lesson(205L, "French", "M. Curie", "10th grade"));
        return new TimeTable(timeslotList, roomList, lessonList);
    }

}</programlisting>
							<simpara>
								This test verifies that after solving, all lessons are assigned to a time slot and a room. It also verifies that it found a feasible solution (no hard constraints broken).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add test properties to the <literal>src/main/resources/application.properties</literal> file:
							</simpara>
							
<screen># The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.
# It's recommended to run for at least 5 minutes ("5m") otherwise.
quarkus.optaplanner.solver.termination.spent-limit=5s

# Effectively disable this termination in favor of the best-score-limit
%test.quarkus.optaplanner.solver.termination.spent-limit=1h
%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft</screen>
						</listitem>
					</orderedlist>
					<simpara>
						Normally, the solver finds a feasible solution in less than 200 milliseconds. Notice how the <literal>application.properties</literal> file overwrites the solver termination during tests to terminate as soon as a feasible solution <literal>(0hard/*soft)</literal> is found. This avoids hard coding a solver time, because the unit test might run on arbitrary hardware. This approach ensures that the test runs long enough to find a feasible solution, even on slow systems. But it does not run a millisecond longer than it strictly must, even on fast systems.
					</simpara>
				</section>
			</section>
			<section xml:id="business-optimizer-logging-quarkus-proc_optaplanner-java">
				<title>Logging</title>
				<simpara>
					After you complete the Red Hat build of OptaPlanner school timetable project, you can use logging information to help you fine-tune the constraints in the <literal>ConstraintProvider</literal>. Review the score calculation speed in the <literal>info</literal> log file to assess the impact of changes to your constraints. Run the application in debug mode to show every step that your application takes or use trace logging to log every step and every move.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Run the school timetable application for a fixed amount of time, for example, five minutes.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Review the score calculation speed in the <literal>log</literal> file as shown in the following example:
						</simpara>
						
<screen>... Solving ended: ..., score calculation speed (29455/sec), ...</screen>
					</listitem>
					<listitem>
						<simpara>
							Change a constraint, run the planning application again for the same amount of time, and review the score calculation speed recorded in the <literal>log</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Run the application in debug mode to log every step that the application makes:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									To run debug mode from the command line, use the <literal>-D</literal> system property.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To permanently enable debug mode, add the following line to the <literal>application.properties</literal> file:
								</simpara>
								
<programlisting language="properties" linenumbering="unnumbered">quarkus.log.category."org.optaplanner".level=debug</programlisting>
								<simpara>
									The following example shows output in the <literal>log</literal> file in debug mode:
								</simpara>
								
<screen>... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -&gt; Room A}, Math(101) {null -&gt; MONDAY 08:30}]).
...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -&gt; Room A}, Physics(102) {null -&gt; MONDAY 09:30}]).
...</screen>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Use <literal>trace</literal> logging to show every step and every move for each step.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
			<section remap="_using_micrometer_and_prometheus_to_monitor_your_school_timetable_optaplanner_java_application" xml:id="using_micrometer_and_prometheus_to_monitor_your_school_timetable_optaplanner_java_application">
				<title>Using Micrometer and Prometheus to monitor your school timetable OptaPlanner Java application</title>
				<simpara>
					OptaPlanner exposes metrics through <link xlink:href="https://micrometer.io/">Micrometer</link>, a metrics instrumentation library for Java applications. You can use Micrometer with Prometheus to monitor the OptaPlanner solver in the school timetable application.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have created the OptaPlanner school timetable application with Java.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Prometheus is installed. For information about installing Prometheus, see the <link xlink:href="https://prometheus.io/">Prometheus</link> website.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Add the Micrometer Prometheus dependencies to the school timetable <literal>pom.xml</literal> file where <literal>&lt;MICROMETER_VERSION&gt;</literal> is the version of Micrometer that you installed:
						</simpara>
						
<screen>&lt;dependency&gt;
 &lt;groupId&gt;io.micrometer&lt;/groupId&gt;
 &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;
 &lt;version&gt;&lt;MICROMETER_VERSION&gt;&lt;/version&gt;
&lt;/dependency&gt;</screen>
						<note>
							<simpara>
								The <literal>micrometer-core</literal> dependency is also required. However this dependency is contained in the <literal>optaplanner-core</literal> dependency so you do not need to add it to the <literal>pom.xml</literal> file.
							</simpara>
						</note>
					</listitem>
					<listitem>
						<simpara>
							Add the following import statements to the <literal>TimeTableApp.java</literal> class.
						</simpara>
						
<screen>import io.micrometer.core.instrument.Metrics;
import io.micrometer.prometheus.PrometheusConfig;
import io.micrometer.prometheus.PrometheusMeterRegistry;</screen>
					</listitem>
					<listitem>
						<simpara>
							Add the following lines to the top of the main method of the <literal>TimeTableApp.java</literal> class so Prometheus can scrap data from <literal>com.sun.net.httpserver.HttpServer</literal> before the solution starts:
						</simpara>
						
<programlisting language="java" linenumbering="numbered">PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);

        try {
            HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
            server.createContext("/prometheus", httpExchange -&gt; {
                String response = prometheusRegistry.scrape();
                httpExchange.sendResponseHeaders(200, response.getBytes().length);
                try (OutputStream os = httpExchange.getResponseBody()) {
                    os.write(response.getBytes());
                }
            });

            new Thread(server::start).start();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        Metrics.addRegistry(prometheusRegistry);

        solve();
    }</programlisting>
					</listitem>
					<listitem>
						<simpara>
							Add the following line to control the solving time. By adjusting the solving time, you can see how the metrics change based on the time spent solving.
						</simpara>
						
<screen>withTerminationSpentLimit(Duration.ofMinutes(5)));</screen>
					</listitem>
					<listitem>
						<simpara>
							Start the school timetable application.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open <literal><link xlink:href="http://localhost:8080/prometheus">http://localhost:8080/prometheus</link></literal> in a web browser to view the timetable application in Prometheus.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Open your monitoring system to view the metrics for your OptaPlanner project.
						</simpara>
						<simpara>
							The following metrics are exposed:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>optaplanner_solver_errors_total</literal>: the total number of errors that occurred while solving since the start of the measuring.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>optaplanner_solver_solve_duration_seconds_active_count</literal>: the number of solvers currently solving.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>optaplanner_solver_solve_duration_seconds_max</literal>: run time of the longest-running currently active solver.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>optaplanner_solver_solve_duration_seconds_duration_sum</literal>: the sum of each active solver’s solve duration. For example, if there are two active solvers, one running for three minutes and the other for one minute, the total solve time is four minutes.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
	</part>
	<part xml:id="assembly-optaplanner-starter-applications_optaplanner-quickstarts">
		<title>Red Hat build of OptaPlanner starter applications</title>
		<partintro>
			<simpara>
				Red Hat build of OptaPlanner provides the following starter applications that you can deploy out-of-the-box on Red Hat OpenShift Container Platform:
			</simpara>
			<itemizedlist>
				<listitem>
					<simpara>
						Employee Rostering starter application
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Vechile Route Planning starter application
					</simpara>
				</listitem>
			</itemizedlist>
			<simpara>
				OptaPlanner starter applications are more developed than examples and quick start guides. They focus on specific use cases and use the best technologies available to build a planning solution.
			</simpara>
		</partintro>
		<chapter xml:id="assembly-optimizer-modifying-ER-template-IDE">
			<title>Using Red Hat build of OptaPlanner in an IDE: an employee rostering example</title>
			<simpara>
				As a business rules developer, you can use an IDE to build, run, and modify the <literal>optaweb-employee-rostering</literal> starter application that uses the Red Hat build of OptaPlanner functionality.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You use an integrated development environment, such as Red Hat CodeReady Studio or IntelliJ IDEA.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have an understanding of the Java language.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						You have an understanding of React and TypeScript. This requirement is necessary to develop the OptaWeb UI.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="optashift-ER-overview-con_employee-rostering-ide">
				<title>Overview of the employee rostering starter application</title>
				<simpara>
					The employee rostering starter application assigns employees to shifts on various positions in an organization. For example, you can use the application to distribute shifts in a hospital between nurses, guard duty shifts across a number of locations, or shifts on an assembly line between workers.
				</simpara>
				<simpara>
					Optimal employee rostering must take a number of variables into account. For example, different skills can be required for shifts in different positions. Also, some employees might be unavailable for some time slots or might prefer a particular time slot. Moreover, an employee can have a contract that limits the number of hours that the employee can work in a single time period.
				</simpara>
				<simpara>
					The Red Hat build of OptaPlanner rules for this starter application use both hard and soft constraints. During an optimization, the planning engine may not violate hard constraints, for example, if an employee is unavailable (out sick), or that an employee cannot work two spots in a single shift. The planning engine tries to adhere to soft constraints, such as an employee’s preference to not work a specific shift, but can violate them if the optimal solution requires it.
				</simpara>
			</section>
			<section xml:id="optashift-ER-building-con">
				<title>Building and running the employee rostering starter application</title>
				<simpara>
					You can build the employee rostering starter application from the source code and run it as a JAR file.
				</simpara>
				<simpara>
					Alternatively, you can use your IDE, for example, Eclipse (including Red Hat CodeReady Studio), to build and run the application.
				</simpara>
				<section xml:id="er-deploy-prepare-proc">
					<title>Preparing deployment files</title>
					<simpara>
						You must download and prepare the deployment files before building and deploying the application.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Product: Decision Manager
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Version: 7.13
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Download <emphasis role="strong">Red Hat Decision Manager 7.13.0 Kogito and OptaPlanner 8 Decision Services Quickstarts</emphasis> (<literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal>).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Extract the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal> file.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Download <emphasis role="strong">Red Hat Decision Manager 7.13 Maven Repository Kogito and OptaPlanner 8 Maven Repository</emphasis> (<literal>rhdm-7.13.0-kogito-maven-repository.zip</literal>).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Extract the <literal>rhdm-7.13.0-kogito-maven-repository.zip</literal> file.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Copy the contents of the <literal>rhdm-7.13.0-kogito-maven-repository/maven-repository</literal> subdirectory into the <literal>~/.m2/repository</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Navigate to the <literal>optaweb-8.11.1.Final-redhat-00006/optaweb-employee-rostering</literal> directory. This folder is the base folder in subsequent parts of this document.
							</simpara>
							<note>
								<simpara>
									File and folder names might have higher version numbers than specifically noted in this document.
								</simpara>
							</note>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="optashift-ER-running-jar-proc">
					<title>Running the Employee Rostering starter application JAR file</title>
					<simpara>
						You can run the Employee Rostering starter application from a JAR file included in the <emphasis role="strong">Red Hat Decision Manager 7.13.0 Kogito and OptaPlanner 8 Decision Services Quickstarts</emphasis> download.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have downloaded and extracted the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal> file as described in <xref linkend="er-deploy-prepare-proc" />.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A Java Development Kit is installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Maven is installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The host has access to the Internet. The build process uses the Internet for downloading Maven packages from external repositories.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In a command terminal, change to the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-employee-rostering</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command:
							</simpara>
							
<programlisting language="bash" linenumbering="unnumbered">mvn clean install -DskipTests</programlisting>
						</listitem>
						<listitem>
							<simpara>
								Wait for the build process to complete.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Navigate to the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-employee-rostering/optaweb-employee-rostering-standalone/target</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command to run the Employee Rostering JAR file:
							</simpara>
							
<programlisting language="xml" linenumbering="unnumbered">java -jar quarkus-app/quarkus-run.jar</programlisting>
							<note>
								<simpara>
									The value of the <literal>quarkus.datasource.db-kind</literal> parameter is set to <literal>H2</literal> by default at build time. To use a different database, you must rebuild the standalone module and specify the database type on the command line. For example, to use a PostgreSQL database, enter the following command:
								</simpara>
								<simpara>
									<literal>mvn clean install -DskipTests -Dquarkus.profile=postgres</literal>
								</simpara>
							</note>
						</listitem>
						<listitem>
							<simpara>
								To access the application, enter <literal>http://localhost:8080/</literal> in a web browser.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="optashift-ER-building-commandline-proc">
					<title>Building and running the Employee Rostering starter application using Maven</title>
					<simpara>
						You can use the command line to build and run the employee rostering starter application.
					</simpara>
					<simpara>
						If you use this procedure, the data is stored in memory and is lost when the server is stopped. To build and run the application with a database server for persistent storage, see <xref linkend="optashift-ER-building-commandline-db-proc" />.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have prepared the deployment files as described in <xref linkend="er-deploy-prepare-proc" />.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A Java Development Kit is installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Maven is installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The host has access to the Internet. The build process uses the Internet for downloading Maven packages from external repositories.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Navigate to the <literal>optaweb-employee-rostering-backend</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command:
							</simpara>
							
<programlisting language="bash" linenumbering="unnumbered">mvn quarkus:dev</programlisting>
						</listitem>
						<listitem>
							<simpara>
								Navigate to the <literal>optaweb-employee-rostering-frontend</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command:
							</simpara>
							
<programlisting language="bash" linenumbering="unnumbered">npm start</programlisting>
							<note>
								<simpara>
									If you use <literal>npm</literal> to start the server, <literal>npm</literal> monitors code changes.
								</simpara>
							</note>
						</listitem>
						<listitem>
							<simpara>
								To access the application, enter <literal>http://localhost:3000/</literal> in a web browser.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="optashift-ER-building-commandline-db-proc">
					<title>Building and running the employee rostering starter application with persistent data storage from the command line</title>
					<simpara>
						If you use the command line to build the employee rostering starter application and run it, you can provide a database server for persistent data storage.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have prepared the deployment files as described in <xref linkend="er-deploy-prepare-proc" />.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A Java Development Kit is installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Maven is installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The host has access to the Internet. The build process uses the Internet for downloading Maven packages from external repositories.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								You have a deployed MySQL or PostrgeSQL database server.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In a command terminal, navigate to the <literal>optaweb-employee-rostering-standalone/target</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command to run the Employee Rostering JAR file:
							</simpara>
							
<programlisting language="bash" linenumbering="unnumbered">java \
-Dquarkus.datasource.username=&lt;DATABASE_USER&gt; \
-Dquarkus.datasource.password=&lt;DATABASE_PASSWORD&gt; \
-Dquarkus.datasource.jdbc.url=&lt;DATABASE_URL&gt; \
-jar quarkus-app/quarkus-run.jar</programlisting>
							<simpara>
								In this example, replace the following placeholders:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<literal>&lt;DATABASE_URL&gt;</literal>: URL to connect to the database
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>&lt;DATABASE_USER&gt;</literal>: The user to connect to the database
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<literal>&lt;DATABASE_PASSWORD&gt;</literal>: The password for <literal>&lt;DATABASE_USER&gt;</literal>
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</orderedlist>
					<note>
						<simpara>
							The value of the <literal>quarkus.datasource.db-kind</literal> parameter is set to <literal>H2</literal> by default at build time. To use a different database, you must rebuild the standalone module and specify the database type on the command line. For example, to use a PostgreSQL database, enter the following command:
						</simpara>
						<simpara>
							<literal>mvn clean install -DskipTests -Dquarkus.profile=postgres</literal>
						</simpara>
					</note>
				</section>
				<section xml:id="optashift-ER-building-IntelliJ-IDEA-proc">
					<title>Building and running the employee rostering starter application using IntelliJ IDEA</title>
					<simpara>
						You can use IntelliJ IDEA to build and run the employee rostering starter application.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You have downloaded the Employee Rostering source code, available from the <link xlink:href="https://github.com/kiegroup/optaweb-employee-rostering">Employee Rostering</link> GitHub page.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								IntelliJ IDEA, Maven, and Node.js are installed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The host has access to the Internet. The build process uses the Internet for downloading Maven packages from external repositories.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Start IntelliJ IDEA.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the IntelliJ IDEA main menu, select <emphasis role="strong">File</emphasis> → <emphasis role="strong">Open</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select the root directory of the application source and click <emphasis role="strong">OK</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								From the main menu, select <emphasis role="strong">Run</emphasis> → <emphasis role="strong">Edit Configurations</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the window that appears, expand <emphasis role="strong">Templates</emphasis> and select <emphasis role="strong">Maven</emphasis>. The Maven sidebar appears.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the Maven sidebar, select <literal>optaweb-employee-rostering-backend</literal> from the <emphasis role="strong">Working Directory</emphasis> menu.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In <emphasis role="strong">Command Line</emphasis>, enter <literal>mvn quarkus:dev</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To start the back end, click <emphasis role="strong">OK</emphasis> .
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In a command terminal, navigate to the <literal>optaweb-employee-rostering-frontend</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command to start the front end:
							</simpara>
							
<screen>npm start</screen>
						</listitem>
						<listitem>
							<simpara>
								To access the application, enter <literal>http://localhost:3000/</literal> in a web browser.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
			</section>
			<section xml:id="er-overview-source-con">
				<title>Overview of the source code of the employee rostering starter application</title>
				<simpara>
					The employee rostering starter application consists of the following principal components:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							A <literal>backend</literal> that implements the rostering logic using Red Hat build of OptaPlanner and provides a REST API
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							A <literal>frontend</literal> module that implements a user interface using React and interacts with the <literal>backend</literal> module through the REST API
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					You can build and use these components independently. In particular, you can implement a different user interface and use the REST API to call the server.
				</simpara>
				<simpara>
					In addition to the two main components, the employee rostering template contains a generator of random source data (useful for demonstration and testing purposes) and a benchmarking application.
				</simpara>
				<formalpara>
					<title>Modules and key classes</title>
					<para>
						The Java source code of the employee rostering template contains several Maven modules. Each of these modules includes a separate Maven project file (<literal>pom.xml</literal>), but they are intended for building in a common project.
					</para>
				</formalpara>
				<simpara>
					The modules contain a number of files, including Java classes. This document lists all the modules, as well as the classes and other files that contain the key information for the employee rostering calculations.
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<literal>optaweb-employee-rostering-benchmark</literal> module: Contains an additional application that generates random data and benchmarks the solution.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>optaweb-employee-rostering-distribution</literal> module: Contains README files.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>optaweb-employee-rostering-docs</literal> module: Contains documentation files.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>optaweb-employee-rostering-frontend</literal> module: Contains the client application with the user interface, developed in React.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<literal>optaweb-employee-rostering-backend</literal> module: Contains the server application that uses OptaPlanner to perform the rostering calculation.
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.service.roster/rosterGenerator.java</literal>: Generates random input data for demonstration and testing purposes. If you change the required input data, change the generator accordingly.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.employee/EmployeeAvailability.java</literal>: Defines availability information for an employee. For every time slot, an employee can be unavailable, available, or the time slot can be designated a preferred time slot for the employee.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.employee/Employee.java</literal>: Defines an employee. An employee has a name, a list of skills, and works under a contract. Skills are represented by skill objects.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.roster/Roster.java</literal>: Defines the calculated rostering information.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.shift/Shift.java</literal>: Defines a shift to which an employee can be assigned. A shift is defined by a time slot and a spot. For example, in a diner there could be a shift in the <emphasis role="strong">Kitchen</emphasis> spot for the February 20 8AM-4PM time slot. Multiple shifts can be defined for a specific spot and time slot. In this case, multiple employees are required for this spot and time slot.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.skill/Skill.java</literal>: Defines a skill that an employee can have.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.spot/Spot.java</literal>: Defines a spot where employees can be placed. For example, a <literal>Kitchen</literal> can be a spot.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.contract/Contract.java</literal>: Defines a contract that sets limits on work time for an employee in various time periods.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>src/main/java/org.optaweb.employeerostering.domain.tenant/Tenant.java</literal>: Defines a tenant. Each tenant represents an independent set of data. Changes in the data for one tenant do not affect any other tenants.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>*View.java</literal>: Classes related to domain objects that define value sets that are calculated from other information; the client application can read these values through the REST API, but not write them.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>*Service.java</literal>: Interfaces located in the service package that define the REST API. Both the server and the client application separately define implementations of these interfaces.
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							<literal>optaweb-employee-rostering-standalone</literal> module: Contains the assembly configurations for the standalone application.
						</simpara>
					</listitem>
				</itemizedlist>
			</section>
			<section xml:id="optashift-ER-modifying-proc">
				<title>Modifying the employee rostering starter application</title>
				<simpara>
					To modify the employee rostering starter application to suit your needs, you must change the rules that govern the optimization process. You must also ensure that the data structures include the required data and provide the required calculations for the rules. If the required data is not present in the user interface, you must also modify the user interface.
				</simpara>
				<simpara>
					The following procedure outlines the general approach to modifying the employee rostering starter application.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have a build environment that successfully builds the application.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							You can read and modify Java code.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Plan the required changes. Answer the following questions:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									What are the additional scenarios that <emphasis>must</emphasis> be avoided? These scenarios are <emphasis>hard constraints</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									What are the additional scenarios that the optimizer must <emphasis>try to avoid</emphasis> when possible? These scenarios are <emphasis>soft constraints</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									What data is required to calculate if each scenario is happening in a potential solution?
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Which of the data can be derived from the information that the user enters in the existing version?
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Which of the data can be hardcoded?
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Which of the data must be entered by the user and is not entered in the current version?
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							If any required data can be calculated from the current data or can be hardcoded, add the calculations or hardcoding to existing view or utility classes. If the data must be calculated on the server side, add REST API endpoints to read it.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							If any required data must be entered by the user, add the data to the classes representing the data entities (for example, the <literal>Employee</literal> class), add REST API endpoints to read and write the data, and modify the user interface to enter the data.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							When all of the data is available, modify the rules. For most modifications, you must add a new rule. The rules are located in the <literal>src/main/java/org/optaweb/employeerostering/service/solver/EmployeeRosteringConstraintProvider.java</literal> file of the <literal>optaweb-employee-rostering-backend</literal> module.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							After modifying the application, build and run it.
						</simpara>
					</listitem>
				</orderedlist>
			</section>
		</chapter>
		<chapter xml:id="assembly-optimizer-running-employee-rostering-openshift">
			<title>Deploying and using Red Hat build of OptaPlanner in Red Hat OpenShift Container Platform: an employee rostering starter example</title>
			<simpara>
				As a business rules developer, you can test and interact with the Red Hat build of OptaPlanner functionality by quickly deploying the <literal>optaweb-employee-rostering</literal> starter project included in the Red Hat Decision Manager distribution to OpenShift.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						You have access to a deployed OpenShift environment. For details, see the documentation for the OpenShift product that you use.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="optashift-ER-overview-con_employee-rostering-openshift">
				<title>Overview of the employee rostering starter application</title>
				<simpara>
					The employee rostering starter application assigns employees to shifts on various positions in an organization. For example, you can use the application to distribute shifts in a hospital between nurses, guard duty shifts across a number of locations, or shifts on an assembly line between workers.
				</simpara>
				<simpara>
					Optimal employee rostering must take a number of variables into account. For example, different skills can be required for shifts in different positions. Also, some employees might be unavailable for some time slots or might prefer a particular time slot. Moreover, an employee can have a contract that limits the number of hours that the employee can work in a single time period.
				</simpara>
				<simpara>
					The Red Hat build of OptaPlanner rules for this starter application use both hard and soft constraints. During an optimization, the planning engine may not violate hard constraints, for example, if an employee is unavailable (out sick), or that an employee cannot work two spots in a single shift. The planning engine tries to adhere to soft constraints, such as an employee’s preference to not work a specific shift, but can violate them if the optimal solution requires it.
				</simpara>
			</section>
			<section xml:id="optashift-ER-openshift-deploy-con">
				<title>Installing and starting the employee rostering starter application on OpenShift</title>
				<simpara>
					Use the <literal>runOnOpenShift.sh</literal> script to deploy the Employee Rostering starter application to Red Hat OpenShift Container Platform. The <literal>runOnOpenShift.sh</literal> shell script is available in the <emphasis role="strong">Red Hat Decision Manager 7.13.0 Kogito and OptaPlanner 8 Decision Services Quickstarts</emphasis> distribution.
				</simpara>
				<simpara>
					The <literal>runOnOpenShift.sh</literal> script builds and packages the application source code locally and uploads it to the OpenShift environment for deployment. This method requires Java Development Kit, Apache Maven, and a bash shell command line.
				</simpara>
				<section xml:id="er-deploy-script-proc">
					<title>Deploying the application using the provided script</title>
					<simpara>
						You can deploy the Employee Rostering starter application to Red Hat OpenShift Container Platform using the provided script. The script builds and packages the application source code locally and uploads it to the OpenShift environment for deployment.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								You are logged in to the target OpenShift environment using the <literal>oc</literal> command line tool. For more information about this tool, see the <link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html-single/cli_reference/"><emphasis>OpenShift Container Platform CLI Reference</emphasis></link>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								OpenJDK 11 or later is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A <literal>bash</literal> shell environment is available on your local system.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Product: Decision Manager
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Version: 7.13.0
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								Download the <emphasis role="strong">Red Hat Decision Manager 7.13 Maven Repository Kogito and OptaPlanner 8 Maven Repository</emphasis> (<literal>rhdm-7.13.0-kogito-maven-repository.zip</literal>) file.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Extract the <literal>rhdm-7.13.0-kogito-maven-repository.zip</literal> file.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Copy the contents of the <literal>rhdm-7.13.0-kogito-maven-repository/maven-repository</literal> subdirectory into the <literal>~/.m2/repository</literal> directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Download the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal> file from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;product=rhdm&amp;productChanged=yes">Software Downloads</link> page of the Red Hat Customer Portal.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Extract the downloaded archive.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Navigate to the <literal>optaweb-employee-rostering</literal> folder.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To build the Employee Rostering application, run the following command:
							</simpara>
							
<screen>mvn clean install -DskipTests -DskipITs</screen>
						</listitem>
						<listitem>
							<simpara>
								Log in to an OpenShift account or a Red Hat Code Ready Container instance. In the following example, <literal>&lt;account-url&gt;</literal> is the URL for an OpenShift account or Red Hat Code Ready Container instance and <literal>&lt;login-token&gt;</literal> is the login token for that account:
							</simpara>
							
<screen>oc login &lt;account-url&gt; --token &lt;login-token&gt;</screen>
						</listitem>
						<listitem>
							<simpara>
								Create a new project to host Employee Rostering:
							</simpara>
							
<screen>oc new-project optaweb-employee-rostering</screen>
						</listitem>
						<listitem>
							<simpara>
								Run the provision script to build and deploy the application:
							</simpara>
							
<screen>./runOnOpenShift.sh</screen>
							<simpara>
								Compilation and packaging might take up to 10 minutes to complete. These processes continually show progress on the command line output.
							</simpara>
							<simpara>
								When the operation completes, the following message is displayed, where <literal>&lt;URL&gt;</literal> is the URL for the deployment:
							</simpara>
							
<screen>You can access the application at &lt;URL&gt; once the deployment is done.</screen>
						</listitem>
						<listitem>
							<simpara>
								Enter the URL that you used earlier in the procedure, for either an OpenShift account or Red Hat Code Ready Container instance, to access the deployed application. The first startup can take up to a minute because additional building is completed on the OpenShift platform.
							</simpara>
							<note>
								<simpara>
									If the application does not open a minute after clicking the link, perform a hard refresh of your browser page.
								</simpara>
							</note>
						</listitem>
					</orderedlist>
				</section>
			</section>
			<section xml:id="er-using-con">
				<title>Using the employee rostering starter application</title>
				<simpara>
					You can use the web interface to use the Employee Rostering starter application. The interface is developed in ReactJS. You can also access the REST API to create a custom user interface as necessary.
				</simpara>
				<section xml:id="er-periods-con">
					<title>The draft and published periods</title>
					<simpara>
						At any particular moment, you can use the application to create the roster for a time period, called a <emphasis>draft</emphasis> period. By default, the length of a draft period is three weeks.
					</simpara>
					<simpara>
						When the roster is final for the first week of the draft period, you can <emphasis>publish</emphasis> the roster. At this time, the roster for the first week of the current draft period becomes a <emphasis>published</emphasis> period. In a published period, the roster is fixed and you can no longer change it automatically (however, emergency manual changes are still possible). This roster can then be distributed to employees so they can plan their time around it. The draft period is shifted a week later.
					</simpara>
					<simpara>
						For example, assume that a draft period of September 1 to September 21 is set. You can automatically create the employee roster for this period. Then, when you publish the roster, the period up to September 7 becomes published. The new draft period is September 8 to September 28.
					</simpara>
					<simpara>
						For instructions about publishing the roster, see <xref linkend="er-publish-proc" />.
					</simpara>
				</section>
				<section xml:id="er-rotation-con">
					<title>The rotation pattern</title>
					<simpara>
						The employee rostering application supports a <emphasis>rotation pattern</emphasis> for shifts and employees.
					</simpara>
					<simpara>
						The rotation pattern is a "model" period of any time starting from two days. The pattern is not tied to a particular date.
					</simpara>
					<simpara>
						You can create time buckets for every day of the rotation. Every time bucket sets the time of a shift. Optionally, the template can include the name of the default employee for the shift.
					</simpara>
					<simpara>
						When you publish the roster, the application adds a new week to the draft period. At this time, the shifts and, if applicable, default employee names are copied from the rotation pattern to the new part of the draft period.
					</simpara>
					<simpara>
						When the end of the rotation pattern is reached, it is automatically restarted from the beginning.
					</simpara>
					<simpara>
						If weekend shift patterns in your organization are different from weekday shift patterns, use a rotation pattern of one week or a whole number of weeks, for example, 14, 21, or 28 days. The default length is 28 days. Then the pattern is always repeated on the same weekdays and you can set the shifts for different weekdays.
					</simpara>
					<simpara>
						For instructions about editing the rotation pattern, see <xref linkend="er-rotation-edit-proc" />.
					</simpara>
				</section>
				<section xml:id="er-tenants-con">
					<title>Employee Rostering tenants</title>
					<simpara>
						The Employee Rostering application supports multiple <emphasis>tenants</emphasis>. Each tenant is an independent set of data, including inputs and roster outputs. Changing data for one tenant does not affect other tenants. You can switch between tenants to use several independent data sets, for example, to prepare employee rosters for different locations.
					</simpara>
					<simpara>
						Several sample tenants are present after installation, representing several typical enterprise types such as a factory or hospital. You can select any of these tenants and modify them to suit your needs. You can also create a new tenant to enter data from a blank slate.
					</simpara>
					<section xml:id="er-tenant-select-proc">
						<title>Changing an Employee Rostering tenant</title>
						<simpara>
							You can change the current tenant. After you select a different tenant, all of the displayed information refers to this tenant and any changes you make affect only this tenant.
						</simpara>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									In the Employee Rostering application web interface, in the top right part of the browser window, click the <emphasis role="strong">Tenant</emphasis> list.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Select a tenant from the list.
								</simpara>
							</listitem>
						</orderedlist>
					</section>
					<section xml:id="er-tenant-create-proc">
						<title>Creating a tenant</title>
						<simpara>
							You can create a new tenant to enter data from a blank slate. When creating a tenant, you can set several parameters that determine how the application prepares the output for this tenant.
						</simpara>
						<important>
							<simpara>
								You cannot change tenant parameters after you create the tenant.
							</simpara>
						</important>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									To create a new tenant in the Employee Rostering application web interface, in the top right corner of the browser window click the settings (gear) icon then click <emphasis role="strong">Add</emphasis>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Set the following values:
								</simpara>
								<itemizedlist>
									<listitem>
										<simpara>
											<emphasis role="strong">Name</emphasis>: The name of the new tenant. This name is displayed in the list of tenants.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Schedule Start Date</emphasis>: The start date of the initial draft period. After you publish the roster, this date becomes the start date of the published period. The weekday of this date always remains the weekday that starts the draft period, any particular published period, and the first use of the rotation pattern. So it is usually most convenient to set the start date to the start of a week (Sunday or Monday).
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Draft Length (days)</emphasis>: The length of the draft period. The draft period stays the same length for the lifetime of the tenant.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Publish Notice (days)</emphasis>: The length of the publish notice period. Aspire to publish the final roster for any day at least this time in advance, so employees have enough notice to plan their personal life around their shift times. In the current version, this setting is not enforced in any way.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Publish Length (days)</emphasis>: The length of the period that becomes published (fixed) every time you publish the roster. In the current version, this setting is fixed at 7 days.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Rotation Length (days)</emphasis>: The length of the rotation pattern.
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<emphasis role="strong">Timezone</emphasis>: The timezone of the environment to which the roster applies. This timezone is used to determine the "current" date for user interface display.
										</simpara>
									</listitem>
								</itemizedlist>
							</listitem>
							<listitem>
								<simpara>
									Click <emphasis role="strong">Save</emphasis>.
								</simpara>
							</listitem>
						</orderedlist>
						<simpara>
							The tenant is created with blank data.
						</simpara>
					</section>
				</section>
				<section xml:id="er-skills-proc">
					<title>Entering skills</title>
					<simpara>
						You can set all <emphasis>skills</emphasis> that are required in any position within the roster. For example, a 24-hour diner can require cooking, serving, bussing, and hosting skills, in addition to skills such as general human resources and restaurant operations.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In the Employee Rostering application web interface, click the <emphasis role="strong">Skills</emphasis> tab.
							</simpara>
							<simpara>
								You can see the numbers of currently visible skills in the top right part of the browser window, for example, <literal>1-15 of 34</literal>. You can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons to display other skills in the list.
							</simpara>
							<simpara>
								You can enter any part of a skill name in the <emphasis role="strong">Search</emphasis> box to search for skills.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Complete the following steps to add a new skill:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Click <emphasis role="strong">Add</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Enter the name of the new skill in the text field under <emphasis role="strong">Name</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Click the Save icon.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								To edit the name of a skill, click the <emphasis role="strong">Edit Skill</emphasis> icon (pencil shape) next to the skill.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To delete a skill, click the <emphasis role="strong">Delete Skill</emphasis> icon (trashcan shape) next to the skill.
							</simpara>
						</listitem>
					</orderedlist>
					<note>
						<simpara>
							Within each tenant, skill names must be unique. You cannot delete a skill if the skill is associated with an employee or spot.
						</simpara>
					</note>
				</section>
				<section xml:id="er-spots-proc">
					<title>Entering spots</title>
					<simpara>
						You must enter the list of <emphasis>spots</emphasis>, which represent various positions at the business. For a diner, spots include the bar, the bussing stations, the front counter, the various kitchen stations, the serving areas, and the office.
					</simpara>
					<simpara>
						For each spot, you can select one or more required skills from the list that you entered in the <emphasis role="strong">Skills</emphasis> tab. The application rosters only employees that have all of the required skills for a spot into that spot. If the spot has no required skill, the application can roster any employee into the spot.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To enter or change spots in the Employee Rostering application web interface, click the <emphasis role="strong">Spots</emphasis> tab. You can enter any part of a spot name in the <emphasis role="strong">Search</emphasis> box to search for spots.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Complete the following steps to add a new spot:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Click <emphasis role="strong">Add Spot</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Enter the name of the new spot in the text field under <emphasis role="strong">Name</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Optional: Select one or more skills from the drop-down list under <emphasis role="strong">Required skill set</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Click the Save icon.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								To edit the name and required skills for a spot, click the <emphasis role="strong">Edit Spot</emphasis> icon (pencil shape) next to the spot.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To delete a spot, click the <emphasis role="strong">Delete Spot</emphasis> icon (trashcan shape) next to the spot.
							</simpara>
						</listitem>
					</orderedlist>
					<note>
						<simpara>
							Within each tenant, spot names must be unique. You cannot delete a spot when any shifts are created for it.
						</simpara>
					</note>
				</section>
				<section xml:id="er-contracts-proc">
					<title>Entering the list of contracts</title>
					<simpara>
						You must enter the list of all of the types of contracts that the business uses for employees.
					</simpara>
					<simpara>
						A contract determines the maximum time that the employee can work in a day, calendar week, calendar month, or calendar year.
					</simpara>
					<simpara>
						When creating a contract, you can set any of the limitations or none at all. For example, a part-time employee might not be allowed to work more than 20 hours in a week, while a full-time employee might be limited to 10 hours in a day and 1800 hours in a year. Another contract might include no limitations on worked hours.
					</simpara>
					<simpara>
						You must enter all work time limits for contracts in minutes.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To enter or change the list of contracts in the Employee Rostering application web interface, click the <emphasis role="strong">Contracts</emphasis> tab.
							</simpara>
							<simpara>
								You can see the numbers of currently visible contracts in the top right part of the browser window, for example, <literal>1-15 of 34</literal>. You can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons to display other contracts in the list.
							</simpara>
							<simpara>
								You can enter any part of a contract name in the <emphasis role="strong">Search</emphasis> box to search for contracts.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Complete the following steps to add a new contract:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Click <emphasis role="strong">Add</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Enter the name of the contract in the text field under <emphasis role="strong">Name</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Enter the required time limits under <emphasis role="strong">Maximum minutes</emphasis>:
									</simpara>
									<itemizedlist>
										<listitem>
											<simpara>
												If the employee must not work more than a set time per day, enable the check box at <emphasis role="strong">Per Day</emphasis> and enter the amount of minutes in the field next to this check box.
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												If the employee must not work more than a set time per calendar week, enable the check box at <emphasis role="strong">Per Week</emphasis> and enter the amount of minutes in the field next to this check box.
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												If the employee must not work more than a set time per calendar month, enable the check box at <emphasis role="strong">Per Month</emphasis> and enter the amount of minutes in the field next to this check box.
											</simpara>
										</listitem>
										<listitem>
											<simpara>
												If the employee must not work more than a set time per calendar year, enable the check box at <emphasis role="strong">Per Year</emphasis> and enter the amount of minutes in the field next to this check box.
											</simpara>
										</listitem>
									</itemizedlist>
								</listitem>
								<listitem>
									<simpara>
										Click the Save icon.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								To edit the name and time limits for a contract, click the <emphasis role="strong">Edit Contract</emphasis> icon (pencil shape) next to the name of the contract.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To delete a contract, click the <emphasis role="strong">Delete Contract</emphasis> icon (trashcan shape) next to the name of the contract.
							</simpara>
						</listitem>
					</orderedlist>
					<note>
						<simpara>
							Within each tenant, contract names must be unique. You cannot delete a contract if it is assigned to any employee.
						</simpara>
					</note>
				</section>
				<section xml:id="er-employees-proc">
					<title>Entering the list of employees</title>
					<simpara>
						You must enter the list of all employees of the business, the skills they possess, and the contracts that apply to them. The application rosters these employees to spots according to their skills and according to the work time limits in the contracts.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To enter or change the list of employees in the Employee Rostering application web interface, click the <emphasis role="strong">Employees</emphasis> tab.
							</simpara>
							<simpara>
								You can see the numbers of currently visible employees in the top right part of the browser window, for example, <literal>1-15 of 34</literal>. You can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons to display other employees in the list.
							</simpara>
							<simpara>
								You can enter any part of an employee name in the <emphasis role="strong">Search</emphasis> box to search for employees.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Complete the following steps to add a new employee:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Click <emphasis role="strong">Add</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Enter the name of the employee in the text field under <emphasis role="strong">Name</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Optional: Select one or more skills from the drop-down list under <emphasis role="strong">Skill set</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Select a contract from the drop-down list under <emphasis role="strong">Contract</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Click the Save icon.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								To edit the name and skills for an employee, click the <emphasis role="strong">Edit Employee</emphasis> icon (pencil shape) next to the name of the employee.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To delete an employee, click the <emphasis role="strong">Delete Employee</emphasis> icon (trashcan shape) next to the name of the employee.
							</simpara>
						</listitem>
					</orderedlist>
					<note>
						<simpara>
							Within each tenant, employee names must be unique. You cannot delete employees if they are rostered to any shifts.
						</simpara>
					</note>
				</section>
				<section xml:id="er-availability-proc">
					<title>Setting employee availability</title>
					<simpara>
						You can set the availability of employees for particular time spans.
					</simpara>
					<simpara>
						If an employee is <emphasis>unavailable</emphasis> for a particular time span, the employee can never be assigned to any shift during this time span (for example, if the employee has called in sick or is on vacation). <emphasis>Undesired</emphasis> and <emphasis>desired</emphasis> are employee preferences for particular time spans; the application accommodates them when possible.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To view and edit employee availability in the Employee Rostering application web interface, click the <emphasis role="strong">Availability Roster</emphasis> tab.
							</simpara>
							<simpara>
								In the top left part of the window, you can see the dates for which the roster is displayed. To view other weeks, you can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons next to the <emphasis role="strong">Week of</emphasis> field. Alternatively, you can click the date field and change the date to view the week that includes this date.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To create an availability entry for an employee, click empty space on the schedule and then select an employee. Initially, an <literal>Unavailable</literal> entry for the entire day is created.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To change an availability entry, click the entry. You can change the following settings:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">From</emphasis> and <emphasis role="strong">To</emphasis> date and time: The time span to which the availability entry applies.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Status: you can select <emphasis role="strong">Unavailable</emphasis>, <emphasis role="strong">Desired</emphasis>, or <emphasis role="strong">Undesired</emphasis> status from a drop-down list.
									</simpara>
									<simpara>
										To save the entry, click <emphasis role="strong">Apply</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To delete an availability entry, click the entry, then click <emphasis role="strong">Delete availability</emphasis>.
							</simpara>
							<simpara>
								You can also change or delete an availability entry by moving the mouse pointer over the entry and then clicking one of the icons displayed over the entry:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										Click the 
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/employee-rostering/unavailable-icon.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>Unavailable</phrase>
											</textobject>
										</inlinemediaobject>
										 icon to set the status of the entry to <emphasis role="strong">Unavailable</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Click the 
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/employee-rostering/undesired-icon.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>Undesired</phrase>
											</textobject>
										</inlinemediaobject>
										 icon to set the status of the entry to <emphasis role="strong">Undesired</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Click the 
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/employee-rostering/desired-icon.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>Desired</phrase>
											</textobject>
										</inlinemediaobject>
										 icon to set the status of the entry to <emphasis role="strong">Desired</emphasis>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Click the 
										<inlinemediaobject>
											<imageobject>
												<imagedata fileref="images/_images/employee-rostering/delete-icon.png" format="PNG" />
											</imageobject>
											<textobject>
												<phrase>Delete</phrase>
											</textobject>
										</inlinemediaobject>
										 icon to delete the entry.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
					</orderedlist>
					<important>
						<simpara>
							If an employee is already assigned to a shift and then you create or change an availability entry during this shift, the assignment is not changed automatically. You must create the employee shift roster again to apply new or changed availability entries.
						</simpara>
					</important>
				</section>
				<section xml:id="er-shiftroster-proc">
					<title>Viewing and editing shifts in the shift roster</title>
					<simpara>
						The Shift Roster is a table of all spots and all possible time spans.
					</simpara>
					<simpara>
						If an employee must be present in a spot during a time span, a <emphasis>shift</emphasis> must exist for this spot and this time span. If a spot requires several employees at the same time, you can create several shifts for the same spot and time span.
					</simpara>
					<simpara>
						Each shift is represented by a rectangle at the intersection of a spot (row) and time span (column).
					</simpara>
					<simpara>
						When new time is added to the draft period, the application copies the shifts (and default employees, if present) from the rotation pattern into this new part of the draft period. You can also manually add and edit shifts in the draft period.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To view and edit the shift roster in the Employee Rostering application web interface, click the <emphasis role="strong">Shift</emphasis> tab.
							</simpara>
							<simpara>
								In the top left part of the window, you can see the dates for which the roster is displayed. To view other weeks, you can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons next to the <emphasis role="strong">Week of</emphasis> field. Alternatively, you can click the date field and change the date to view the week that includes this date.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To add a shift, click an open area of the schedule. The application adds a shift, determining the slot and time span automatically from the location of the click.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To edit a shift, click the shift. You can set the following values for a shift:
							</simpara>
							<itemizedlist>
								<listitem>
									<simpara>
										<emphasis role="strong">From</emphasis> and <emphasis role="strong">To</emphasis> date and time: The exact time and duration of the shift.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Employee</emphasis>: The employee assigned to the shift.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										<emphasis role="strong">Pinned</emphasis>: Whether the employee is <emphasis>pinned</emphasis> to the shift. If an employee is pinned, automatic employee rostering cannot change the assignment of the employee to the shift. A pinned employee is not automatically replicated to any other shift.
									</simpara>
									<simpara>
										To save the changes, click <emphasis role="strong">Apply</emphasis>.
									</simpara>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<simpara>
								To delete a shift, click the shift, and then click <emphasis role="strong">Delete shift</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="er-solve-proc">
					<title>Creating and viewing the employee shift roster</title>
					<simpara>
						You can use the application to create and view the optimal shift roster for all employees.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To view and edit the shift roster in the Employee Rostering application web interface, click the <emphasis role="strong">Shift</emphasis> tab.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To create the optimal shift roster, click <emphasis role="strong">Schedule</emphasis>. The application takes 30 seconds to find the optimal solution.
							</simpara>
						</listitem>
					</orderedlist>
					<formalpara>
						<title>Result</title>
						<para>
							When the operation is finished, the Shift Roster view contains the optimal shift roster. The new roster is created for the draft period. The operation does not modify the published periods.
						</para>
					</formalpara>
					<simpara>
						In the top left part of the window, you can see the dates for which the roster is displayed. To view other weeks, you can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons next to the <emphasis role="strong">Week of</emphasis> field. Alternatively, you can click the date field and change the date to view the week that includes this date.
					</simpara>
					<simpara>
						In the draft period, the borders of boxes that represent shifts are dotted lines. In the published periods, the borders are unbroken lines.
					</simpara>
					<simpara>
						The color of the boxes that represent shifts shows the constraint status of every shift:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Strong green: Soft constraint matched; for example, the shift is in a "desired" timeslot for the employee.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Pale green: No constraint broken.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Grey: Soft constraint broken; for example, the shift is in an "undesired" timeslot for the employee.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Yellow: Medium constraint broken; for example, no employee is assigned to the shift.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Red: Hard constraint broken; for example, an employee has two shifts at the same time.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="er-individualroster-proc">
					<title>Viewing employee shifts</title>
					<simpara>
						You can view the assigned shifts for particular employees in an employee-centric table. The information is the same as the Shift Roster, but the viewing format might be more convenient for informing employees about their assigned shifts.
					</simpara>
					<formalpara>
						<title>Procedure</title>
						<para>
							To view a table of employees and shifts in the Employee Rostering application web interface, click the <emphasis role="strong">Availability Roster</emphasis> tab.
						</para>
					</formalpara>
					<simpara>
						In the top left part of the window, you can see the dates for which the roster is displayed. To view other weeks, you can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons next to the <emphasis role="strong">Week of</emphasis> field. Alternatively, you can click the date field and change the date to view the week that includes this date.
					</simpara>
					<simpara>
						You can see the numbers of currently visible employees in the top right part of the browser window, for example, <literal>1-10 of 34</literal>. You can use the <emphasis role="strong">&lt;</emphasis> and <emphasis role="strong">&gt;</emphasis> buttons next to the numbers to display other employees in the list.
					</simpara>
					<simpara>
						In the draft period, the borders of boxes representing shifts are dotted lines. In the published periods, the borders are unbroken lines.
					</simpara>
				</section>
				<section xml:id="er-publish-proc">
					<title>Publishing the shift roster</title>
					<simpara>
						When you publish the shift roster, the first week of the draft period becomes published. Automatic employee rostering no longer changes any shift assignments in the published period, though emergency manual changing is still possible. The draft period is shifted one week later. For details about draft and published periods, see <xref linkend="er-periods-con" />.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To view and edit the shift roster in the Employee Rostering application web interface, click the <emphasis role="strong">Shift</emphasis> tab.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Review the shift roster for the first week of the draft period to ensure that it is acceptable.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Publish</emphasis>.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
				<section xml:id="er-rotation-edit-proc">
					<title>Viewing and editing the rotation pattern</title>
					<simpara>
						The rotation pattern enables you to add, move, and delete shifts so you can manage your employee resources efficiently. It is defined by time buckets and seats.
					</simpara>
					<informalfigure>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/_images/employee-rostering/rotation.png" format="PNG" />
						</imageobject>
						<textobject>
							<phrase>rotation</phrase>
						</textobject>
					</mediaobject>
					</informalfigure>
					<itemizedlist>
						<listitem>
							<simpara>
								A time bucket describes a time slot (for example, 9:00 a.m. to 5:00 p.m.) for a particular spot or location <emphasis role="strong">(A)</emphasis> (for example, Anaesthetics), over two or more days, and any skills that are required (for example, firearm training).
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								A seat <emphasis role="strong">(B)</emphasis> is an employee assignment for a particular day in a specific time bucket.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								An employee stub is an icon that represents an employee that is available to be assigned to a time bucket. Employee stubs are listed in the <emphasis role="strong">Employee Stub List</emphasis>.
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						For more information about the rotation pattern, see <xref linkend="er-rotation-con" />.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Click the <emphasis role="strong">Rotation</emphasis> tab to view and edit the rotation pattern.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Select a spot from the <emphasis role="strong">Rotation</emphasis> menu.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Add New Time Bucket</emphasis>. The <emphasis role="strong">Creating Working Time Bucket</emphasis> dialog is displayed.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Specify a start and end time, select any additional required skills, select the days for this time bucket, and click <emphasis role="strong">Save</emphasis>. The unassigned seats for that time bucket appears on the <emphasis role="strong">Rotation</emphasis> page organized by time ranges.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To create an employee stub list so that you can add employees to the rotation, click <emphasis role="strong">Edit Employee Stub List</emphasis>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								In the <emphasis role="strong">Edit Employee Stub List</emphasis> dialog, click <emphasis role="strong">Add Employee</emphasis> and select an employee from the list.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Add all of the employees required for this stub list and click <emphasis role="strong">Save</emphasis>. The employees appear above the time buckets on the <emphasis role="strong">Rotation</emphasis> page.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click an employee icon to select an employee from the employee stub list.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click and drag the mouse over the seats of a time bucket to assign the selected employee to those seats. The seat is populated with the employee icon.
							</simpara>
							<note>
								<simpara>
									A time bucket can only have one employee assigned to it for each day. To add multiple employees to the same time bucket, copy the time bucket and change the employee name as required.
								</simpara>
							</note>
						</listitem>
						<listitem>
							<simpara>
								To provision the schedule, click <emphasis role="strong">Scheduling</emphasis> and select the spot that you created the rotation for.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Provision</emphasis> and specify the date range.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Deselect the spots that you do not want to include in this schedule.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the arrow next to the selected spot and deselect any time buckets that you do not want to use in your schedule.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Provision Shifts</emphasis>. The calendar is populated with shifts generated from the time buckets.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To modify a shift, click a generated shift on the calendar.
							</simpara>
						</listitem>
					</orderedlist>
				</section>
			</section>
		</chapter>
		<chapter xml:id="assembly-business-optimizer-vrp">
			<title>Deploying and using the Red Hat build of OptaPlanner vehicle route planning starter application</title>
			<simpara>
				As a developer, you can use the OptaWeb Vehicle Routing starter application to optimize your vehicle fleet deliveries.
			</simpara>
			<itemizedlist>
				<title>Prerequisites</title>
				<listitem>
					<simpara>
						OpenJDK (JDK) 11 is installed. Red Hat build of Open JDK is available from the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required).
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Apache Maven 3.6 or higher is installed. Maven is available from the <link xlink:href="https://maven.apache.org/">Apache Maven Project</link> website.
					</simpara>
				</listitem>
			</itemizedlist>
			<section xml:id="vrp-con_business-optimizer-vrp">
				<title>What is OptaWeb Vehicle Routing?</title>
				<simpara>
					The main purpose of many businesses is to transport various types of cargo. The goal of these businesses is to deliver a piece of cargo from the loading point to a destination and use its vehicle fleet in the most efficient way. One of the main objectives is to minimize travel costs which are measured in either time or distance.
				</simpara>
				<simpara>
					This type of optimization problem is referred to as the vehicle routing problem (VRP) and has many variations.
				</simpara>
				<simpara>
					Red Hat build of OptaPlanner can solve many of these vehicle routing variations and provides solution examples. OptaPlanner enables developers to focus on modeling business rules and requirements instead of learning <link xlink:href="https://en.wikipedia.org/wiki/Constraint_programming">constraint programming</link> theory. OptaWeb Vehicle Routing expands the vehicle routing capabilities of OptaPlanner by providing a starter application that answers questions such as these:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Where do I get the distances and travel times?
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							How do I visualize the solution on a map?
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							How do I build an application that runs in the cloud?
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					OptaWeb Vehicle Routing uses OpenStreetMap (OSM) data files. For information about OpenStreetMap, see the <link xlink:href="https://wiki.openstreetmap.org/wiki/About_OpenStreetMap">OpenStreetMap</link> web site.
				</simpara>
				<simpara>
					Use the following definitions when working with OptaWeb Vehicle Routing:
				</simpara>
				<simpara>
					<emphasis role="strong">Region</emphasis>: An arbitrary area on the map of Earth, represented by an OSM file. A region can be a country, a city, a continent, or a group of countries that are frequently used together. For example, the DACH region includes Germany (DE), Austria (AT), and Switzerland (CH).
				</simpara>
				<simpara>
					<emphasis role="strong">Country code</emphasis>: A two-letter code assigned to a country by the ISO-3166 standard. You can use a country code to filter geosearch results. Because you can work with a region that spans multiple countries (for example, the DACH region), OptaWeb Vehicle Routing accepts a list of country codes so that geosearch filtering can be used with such regions. For a list of country codes, see <link xlink:href="https://www.iso.org/iso-3166-country-codes.html"><emphasis>ISO 3166 Country Codes</emphasis></link>
				</simpara>
				<simpara>
					<emphasis role="strong">Geosearch</emphasis>: A type of query where you provide an address or a place name of a region as the search keyword and receive a number of GPS locations as a result. The number of locations returned depends on how unique the search keyword is. Because most place names are not unique, filter out nonrelevant results by including only places in the country or countries that are in your working region.
				</simpara>
			</section>
			<section xml:id="download-ref-imp-proc_business-optimizer-vrp">
				<title>Download and build the OptaWeb Vehicle Routing deployment files</title>
				<simpara>
					You must download and prepare the deployment files before building and deploying OptaWeb Vehicle Routing.
				</simpara>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Navigate to the <link xlink:href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html">Software Downloads</link> page in the Red Hat Customer Portal (login required), and select the product and version from the drop-down options:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									Product: Decision Manager
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Version: 7.13.0
								</simpara>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							Download <emphasis role="strong">Red Hat Decision Manager 7.13.0 Kogito and OptaPlanner 8 Decision Services Quickstarts</emphasis> (<literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal>).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Extract the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts.zip</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Download <emphasis role="strong">Red Hat Decision Manager 7.13 Maven Repository Kogito and OptaPlanner 8 Maven Repository</emphasis> (<literal>rhdm-7.13.0-kogito-maven-repository.zip</literal>).
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Extract the <literal>rhdm-7.13.0-kogito-maven-repository.zip</literal> file.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Copy the contents of the <literal>rhdm-7.13.0-kogito-maven-repository/maven-repository</literal> subdirectory into the <literal>~/.m2/repository</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Navigate to the <literal>optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing</literal> directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the following command to build OptaWeb Vehicle Routing:
						</simpara>
						
<screen>mvn clean package -DskipTests</screen>
					</listitem>
				</orderedlist>
			</section>
			<section xml:id="runlocally-con_business-optimizer-vrp">
				<title>Run OptaWeb Vehicle Routing locally using the runLocally.sh script</title>
				<simpara>
					Linux users can use the <literal>runLocally.sh</literal> Bash script to run OptaWeb Vehicle Routing.
				</simpara>
				<note>
					<simpara>
						The <literal>runLocally.sh</literal> script does not run on macOS. If you cannot use the <literal>runLocally.sh</literal> script, see <xref linkend="run-vrp-manually-proc_business-optimizer-vrp" />.
					</simpara>
				</note>
				<simpara>
					The <literal>runLocally.sh</literal> script automates the following setup steps that otherwise must be carried out manually:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Create the data directory.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Download selected OpenStreetMap (OSM) files from Geofabrik.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Try to associate a country code with each downloaded OSM file automatically.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Build the project if the standalone JAR file does not exist.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Launch OptaWeb Vehicle Routing by taking a single region argument or by selecting the region interactively.
						</simpara>
					</listitem>
				</itemizedlist>
				<simpara>
					See the following sections for instructions about executing the <literal>runLocally.sh</literal> script:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<xref linkend="run-locally-qs-proc_business-optimizer-vrp" />
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<xref linkend="run-locally-interactive-proc_business-optimizer-vrp" />
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<xref linkend="run-locally-noninteractive-proc_business-optimizer-vrp" />
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="run-locally-qs-proc_business-optimizer-vrp">
					<title>Run the OptaWeb Vehicle Routing runLocally.sh script in quick start mode</title>
					<simpara>
						The easiest way to get started with OptaWeb Vehicle Routing is to run the <literal>runLocally.sh</literal> script without any arguments.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing has been successfully built with Maven as described in <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Internet access is available.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Enter the following command in the <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing</literal> directory.
							</simpara>
							
<screen> ./runLocally.sh</screen>
						</listitem>
						<listitem>
							<simpara>
								If prompted to create the <literal>.optaweb-vehicle-routing</literal> directory, enter <literal>y</literal>. You are prompted to create this directory the first time you run the script.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								If prompted to download an OSM file, enter <literal>y</literal>. The first time that you run the script, OptaWeb Vehicle Routing downloads the Belgium OSM file.
							</simpara>
							<simpara>
								The application starts after the OSM file is downloaded.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To open the OptaWeb Vehicle Routing user interface, enter the following URL in a web browser:
							</simpara>
							
<screen>http://localhost:8080</screen>
						</listitem>
					</orderedlist>
					<note>
						<simpara>
							The first time that you run the script, it will take a few minutes to start because the OSM file must be imported by GraphHopper and stored as a road network graph. The next time you run the <literal>runlocally.sh</literal> script, load times will be significantly faster.
						</simpara>
					</note>
					<formalpara>
						<title>Next steps</title>
						<para>
							<xref linkend="use-vrp-con_business-optimizer-vrp" />
						</para>
					</formalpara>
				</section>
				<section xml:id="run-locally-interactive-proc_business-optimizer-vrp">
					<title>Run the OptaWeb Vehicle Routing runLocally.sh script in interactive mode</title>
					<simpara>
						Use interactive mode to see the list of downloaded OSM files and country codes assigned to each region. You can use the interactive mode to download additional OSM files from Geofabrik without visiting the website and choosing a destination for the download.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing has been successfully built with Maven as described in <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Internet access is available.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Change directory to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command to run the script in interactive mode:
							</simpara>
							
<screen>./runLocally.sh -i</screen>
						</listitem>
						<listitem>
							<simpara>
								At the <literal>Your choice</literal> prompt, enter <literal>d</literal> to display the download menu. A list of previously downloaded regions appears followed by a list of regions that you can download.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Optional: Select a region from the list of previously downloaded regions:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Enter the number associated with a region in the list of downloaded regions.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Press the Enter key.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								Optional: Download a region:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Enter the number associated with the region that you want to download. For example, to select the map of Europe, enter <literal>5</literal>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To download the map, enter <literal>d</literal> then press the Enter key.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										To download a specific region within the map, enter <literal>e</literal> then enter the number associated with the region that you want to download, and press the Enter key.
									</simpara>
									<warning>
										<title>Using large OSM files</title>
										<simpara>
											For the best user experience, use smaller regions such as individual European or US states. Using OSM files larger than 1 GB will require significant RAM size and take a lot of time (up to several hours) for the initial processing.
										</simpara>
									</warning>
									<simpara>
										The application starts after the OSM file is downloaded.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								To open the OptaWeb Vehicle Routing user interface, enter the following URL in a web browser:
							</simpara>
							
<screen>http://localhost:8080</screen>
						</listitem>
					</orderedlist>
					<formalpara>
						<title>Next steps</title>
						<para>
							<xref linkend="use-vrp-con_business-optimizer-vrp" />
						</para>
					</formalpara>
				</section>
				<section xml:id="run-locally-noninteractive-proc_business-optimizer-vrp">
					<title>Run the OptaWeb Vehicle Routing runLocally.sh script in non-interactive mode</title>
					<simpara>
						Use OptaWeb Vehicle Routing in non-interactive mode to start OptaWeb Vehicle Routing with a single command that includes an OSM file that you downloaded previously. This is useful when you want to switch between regions quickly or when doing a demo.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing has been successfully built with Maven as described in <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								The OSM file for the region that you want to use has been downloaded. For information about downloading OSM files, see <xref linkend="run-locally-interactive-proc_business-optimizer-vrp" />.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Internet access is available.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								Change directory to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Execute the following command where <literal>&lt;OSM_FILE_NAME&gt;</literal> is an OSM file that you downloaded previously:
							</simpara>
							
<screen>./runLocally.sh &lt;OSM_FILE_NAME&gt;</screen>
						</listitem>
					</orderedlist>
					<formalpara>
						<title>Next steps</title>
						<para>
							<xref linkend="use-vrp-con_business-optimizer-vrp" />
						</para>
					</formalpara>
				</section>
				<section xml:id="adjust-data-dir-proc_business-optimizer-vrp">
					<title>Update the data directory</title>
					<simpara>
						You can update the data directory that OptaWeb Vehicle Routing uses if you want to use a different data directory. The default data directory is <literal>$HOME/.optaweb-vehicle-routing</literal>.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing has been successfully built with Maven as described in <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
							</simpara>
						</listitem>
					</itemizedlist>
					<itemizedlist>
						<title>Procedure</title>
						<listitem>
							<simpara>
								To use a different data directory, add the directory’s absolute path to the <literal>.DATA_DIR_LAST</literal> file in the current data directory.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To change country codes associated with a region, edit the corresponding file in the <literal>country_codes</literal> directory, in the current data directory.
							</simpara>
							<simpara>
								For example, if you downloaded an OSM file for Scotland and the script fails to guess the country code, set the content of <literal>country_codes/scotland-latest</literal> to GB.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To remove a region, delete the corresponding OSM file from <literal>openstreetmap</literal> directory in the data directory and delete the region’s directory in the <literal>graphhopper</literal> directory.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
			</section>
			<section xml:id="run-vrp-manually-proc_business-optimizer-vrp">
				<title>Configure and run OptaWeb Vehicle Routing manually</title>
				<simpara>
					The easiest way to run OptaWeb Vehicle Routing is to use the <literal>runlocally.sh</literal> script. However, if Bash is not available on your system you can manually complete the steps that the <literal>runlocally.sh</literal> script performs.
				</simpara>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							OptaWeb Vehicle Routing has been successfully built with Maven as described in <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Internet access is available.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Download routing data.
						</simpara>
						<simpara>
							The routing engine requires geographical data to calculate the time it takes vehicles to travel between locations. You must download and store OpenStreetMap (OSM) data files on the local file system before you run OptaWeb Vehicle Routing.
						</simpara>
						<note>
							<simpara>
								The OSM data files are typically between 100 MB to 1 GB and take time to download so it is a good idea to download the files before building or starting the OptaWeb Vehicle Routing application.
							</simpara>
						</note>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Open <literal><link xlink:href="http://download.geofabrik.de/">http://download.geofabrik.de/</link></literal> in a web browser.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Click a region in the <emphasis role="strong">Sub Region</emphasis> list, for example <emphasis role="strong">Europe</emphasis>. The subregion page opens.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									In the <emphasis role="strong">Sub Regions</emphasis> table, download the OSM file (<literal>.osm.pbf</literal>) for a country, for example Belgium.
								</simpara>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Create the data directory structure.
						</simpara>
						<simpara>
							OptaWeb Vehicle Routing reads and writes several types of data on the file system. It reads OSM (OpenStreetMap) files from the <literal>openstreetmap</literal> directory, writes a road network graph to the <literal>graphhopper</literal> directory, and persists user data in a directory called <literal>db</literal>. Create a new directory dedicated to storing all of these data to make it easier to upgrade to a newer version of OptaWeb Vehicle Routing in the future and continue working with the data you created previously.
						</simpara>
						<orderedlist numeration="loweralpha">
							<listitem>
								<simpara>
									Create the <literal>$HOME/.optaweb-vehicle-routing</literal> directory.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									Create the <literal>openstreetmap</literal> directory in the <literal>$HOME/.optaweb-vehicle-routing</literal> directory:
								</simpara>
								
<screen>$HOME/.optaweb-vehicle-routing
└── openstreetmap</screen>
							</listitem>
							<listitem>
								<simpara>
									Move all of your downloaded OSM files (files with the extension <literal>.osm.pbf</literal>) to the <literal>openstreetmap</literal> directory.
								</simpara>
								<simpara>
									The rest of the directory structure is created by the OptaWeb Vehicle Routing application when it runs for the first time. After that, your directory structure is similar to the following example:
								</simpara>
								
<screen>$HOME/.optaweb-vehicle-routing

├── db
│   └── vrp.mv.db
├── graphhopper
│   └── belgium-latest
└── openstreetmap
    └── belgium-latest.osm.pbf</screen>
							</listitem>
						</orderedlist>
					</listitem>
					<listitem>
						<simpara>
							Change directory to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing/optaweb-vehicle-routing-standalone/target</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							To run OptaWeb Vehicle Routing, enter the following command:
						</simpara>
						
<screen>java \
-Dapp.demo.data-set-dir=$HOME/.optaweb-vehicle-routing/dataset \
-Dapp.persistence.h2-dir=$HOME/.optaweb-vehicle-routing/db \
-Dapp.routing.gh-dir=$HOME/.optaweb-vehicle-routing/graphhopper \
-Dapp.routing.osm-dir=$HOME/.optaweb-vehicle-routing/openstreetmap \
-Dapp.routing.osm-file=&lt;OSM_FILE_NAME&gt; \
-Dapp.region.country-codes=&lt;COUNTRY_CODE_LIST&gt; \
-jar quarkus-app/quarkus-run.jar</screen>
						<simpara>
							In this command, replace the following variables:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>&lt;OSM_FILE_NAME&gt;</literal>: The OSM file for the region that you want to use and that you downloaded previously
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>&lt;COUNTRY_CODE_LIST&gt;</literal>: A comma-separated list of country codes used to filter geosearch queries. For a list of country codes, see <link xlink:href="https://www.iso.org/iso-3166-country-codes.html"><emphasis>ISO 3166 Country Codes</emphasis></link>.
								</simpara>
								<simpara>
									The application starts after the OSM file is downloaded.
								</simpara>
								<simpara>
									In the following example, OptaWeb Vehicle Routing downloads the OSM map of Central America (<literal>central-america-latest.osm.pbf</literal>) and searches in the countries Belize (BZ) and Guatemala (GT).
								</simpara>
								
<screen>java \
-Dapp.demo.data-set-dir=$HOME/.optaweb-vehicle-routing/dataset \
-Dapp.persistence.h2-dir=$HOME/.optaweb-vehicle-routing/db \
-Dapp.routing.gh-dir=$HOME/.optaweb-vehicle-routing/graphhopper \
-Dapp.routing.osm-dir=$HOME/.optaweb-vehicle-routing/openstreetmap \
-Dapp.routing.osm-file=entral-america-latest.osm.pbf \
-Dapp.region.country-codes=BZ,GT \
-jar quarkus-app/quarkus-run.jar</screen>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<simpara>
							To open the OptaWeb Vehicle Routing user interface, enter the following URL in a web browser:
						</simpara>
						
<screen>http://localhost:8080</screen>
					</listitem>
				</orderedlist>
				<formalpara>
					<title>Next steps</title>
					<para>
						<xref linkend="use-vrp-con_business-optimizer-vrp" />
					</para>
				</formalpara>
			</section>
			<section xml:id="vrp-run-openshift-proc_business-optimizer-vrp">
				<title>Run OptaWeb Vehicle Routing on Red Hat OpenShift Container Platform</title>
				<simpara>
					Linux users can use the <literal>runOnOpenShift.sh</literal> Bash script to install OptaWeb Vehicle Routing on Red Hat OpenShift Container Platform.
				</simpara>
				<note>
					<simpara>
						The <literal>runOnOpenShift.sh</literal> script does not run on macOS.
					</simpara>
				</note>
				<itemizedlist>
					<title>Prerequisites</title>
					<listitem>
						<simpara>
							You have access to an OpenShift cluster and the OpenShift command-line interface (<literal>oc</literal>) has been installed. For information about Red Hat OpenShift Container Platform, see <link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.5/html-single/installing/index"><emphasis>Installing OpenShift Container Platform</emphasis></link>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							OptaWeb Vehicle Routing has been successfully built with Maven as described in <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Internet access is available.
						</simpara>
					</listitem>
				</itemizedlist>
				<orderedlist numeration="arabic">
					<title>Procedure</title>
					<listitem>
						<simpara>
							Log in to or start a Red Hat OpenShift Container Platform cluster.
						</simpara>
					</listitem>
				</orderedlist>
				<orderedlist numeration="loweralpha">
					<listitem>
						<simpara>
							Enter the following command where <literal>&lt;PROJECT_NAME&gt;</literal> is the name of your new project:
						</simpara>
						
<screen>oc new-project &lt;PROJECT_NAME&gt;</screen>
					</listitem>
					<listitem>
						<simpara>
							If necessary, change directory to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing</literal>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Enter the following command to execute the <literal>runOnOpenShift.sh</literal> script and download an OpenStreetMap (OSM) file:
						</simpara>
						
<screen>./runOnOpenShift.sh &lt;OSM_FILE_NAME&gt; &lt;COUNTRY_CODE_LIST&gt; &lt;OSM_FILE_DOWNLOAD_URL&gt;</screen>
						<simpara>
							In this command, replace the following variables:
						</simpara>
						<itemizedlist>
							<listitem>
								<simpara>
									<literal>&lt;OSM_FILE_NAME&gt;</literal>: The name of a file downloaded from <literal>&lt;OSM_FILE_DOWNLOAD_URL&gt;</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>&lt;COUNTRY_CODE_LIST&gt;</literal>: A comma-separated list of country codes used to filter geosearch queries. For a list of country codes, see <link xlink:href="https://www.iso.org/iso-3166-country-codes.html"><emphasis>ISO 3166 Country Codes</emphasis></link>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									<literal>&lt;OSM_FILE_DOWNLOAD_URL&gt;</literal>: The URL of an OSM data file in PBF format accessible from OpenShift. The file will be downloaded during backend startup and saved as <literal>/deployments/local/&lt;OSM_FILE_NAME&gt;</literal>.
								</simpara>
								<simpara>
									In the following example, OptaWeb Vehicle Routing downloads the OSM map of Central America (<literal>central-america-latest.osm.pbf</literal>) and searches in the countries Belize (BZ) and Guatemala (GT).
								</simpara>
								
<screen>./runOnOpenShift.sh central-america-latest.osm.pbf BZ,GT http://download.geofabrik.de/europe/central-america-latest.osm.pbf</screen>
							</listitem>
						</itemizedlist>
					</listitem>
				</orderedlist>
				<note>
					<simpara>
						For help with the <literal>runOnOpenShift.sh</literal> script, enter <literal>./runOnOpenShift.sh --help</literal>.
					</simpara>
				</note>
				<section xml:id="vrp-update-deployed-changes-proc_business-optimizer-vrp">
					<title>Updating the deployed OptaWeb Vehicle Routing application with local changes</title>
					<simpara>
						After you deploy your OptaWeb Vehicle Routing application on Red Hat OpenShift Container Platform, you can update the back end and front end.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing has been successfully built with Maven and deployed on OpenShift.
							</simpara>
						</listitem>
					</itemizedlist>
					<itemizedlist>
						<title>Procedure</title>
						<listitem>
							<simpara>
								To update the back end, perform the following steps:
							</simpara>
							<orderedlist numeration="arabic">
								<listitem>
									<simpara>
										Change the source code and build the back-end module with Maven.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Change directory to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing</literal>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Enter the following command to start the OpenShift build:
									</simpara>
									
<programlisting language="shell" linenumbering="unnumbered">oc start-build backend --from-dir=. --follow</programlisting>
								</listitem>
							</orderedlist>
						</listitem>
						<listitem>
							<simpara>
								To update the front end, perform the following steps:
							</simpara>
							<orderedlist numeration="arabic">
								<listitem>
									<simpara>
										Change the source code and build the front-end module with the <literal>npm</literal> utility.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Change directory to <literal>sources/optaweb-vehicle-routing-frontend</literal>.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Enter the following command to start the OpenShift build:
									</simpara>
									
<programlisting language="shell" linenumbering="unnumbered">oc start-build frontend --from-dir=docker --follow</programlisting>
								</listitem>
							</orderedlist>
						</listitem>
					</itemizedlist>
					<formalpara>
						<title>Next steps</title>
						<para>
							<xref linkend="use-vrp-con_business-optimizer-vrp" />
						</para>
					</formalpara>
				</section>
			</section>
			<section xml:id="use-vrp-con_business-optimizer-vrp">
				<title>Using OptaWeb Vehicle Routing</title>
				<simpara>
					In the OptaWeb Vehicle Routing application, you can mark a number of locations on the map. The first location is assumed to be the depot. Vehicles must deliver goods from this depot to every other location that you marked.
				</simpara>
				<simpara>
					You can set the number of vehicles and the carrying capacity of every vehicle. However, the route is not guaranteed to use all vehicles. The application uses as many vehicles as required for an optimal route.
				</simpara>
				<simpara>
					The current version has certain limitations:
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							Every delivery to a location is supposed to take one point of vehicle capacity. For example, a vehicle with a capacity of 10 can visit up to 10 locations before returning to the depot.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							Setting custom names of vehicles and locations is not supported.
						</simpara>
					</listitem>
				</itemizedlist>
				<section xml:id="vrp-create-route-proc_business-optimizer-vrp">
					<title>Creating a route</title>
					<simpara>
						To create an optimal route, use the <emphasis role="strong">Demo</emphasis> tab of the OptaWeb Vehicle Routing user interface.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing is running and you have access to the user interface.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In OptaWeb Vehicle Routing, click <emphasis role="strong">Demo</emphasis> to open the <emphasis role="strong">Demo</emphasis> tab.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Use the blue minus and plus buttons above the map to set the number of vehicles. Each vehicle has a default capacity of 10.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Use the plus button in a square on the map to zoom in as required.
							</simpara>
							<note>
								<simpara>
									Do not double-click to zoom in. A double click also creates a location.
								</simpara>
							</note>
						</listitem>
						<listitem>
							<simpara>
								Click a location for the depot.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click other locations on the map for delivery points.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								If you want to delete a location:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Hover the mouse cursor over the location to see the location name.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Find the location name in the list in the left part of the screen.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Click the <emphasis role="strong">X</emphasis> icon next to the name.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
					</orderedlist>
					<simpara>
						Every time you add or remove a location or change the number of vehicles, the application creates and displays a new optimal route. If the solution uses several vehicles, the application shows the route for every vehicle in a different color.
					</simpara>
				</section>
				<section xml:id="vrp-other-actions-proc_business-optimizer-vrp">
					<title>Viewing and setting other details</title>
					<simpara>
						You can use other tabs in the OptaWeb Vehicle Routing user interface to view and set additional details.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing is running and you have access to the user interface.
							</simpara>
						</listitem>
					</itemizedlist>
					<itemizedlist>
						<title>Procedure</title>
						<listitem>
							<simpara>
								Click the <emphasis role="strong">Vehicles</emphasis> tab to view, add, and remove vehicles, and also set the capacity for every vehicle.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the <emphasis role="strong">Visits</emphasis> tab to view and remove locations.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click the <emphasis role="strong">Route</emphasis> tab to select each vehicle and view the route for the selected vehicle.
							</simpara>
						</listitem>
					</itemizedlist>
				</section>
				<section xml:id="vrp-custom-data-sets-proc_business-optimizer-vrp">
					<title>Creating custom data sets with OptaWeb Vehicle Routing</title>
					<simpara>
						There is a built-in demo data set consisting of a several large Belgian cities. If you want to have more demos available in the <emphasis role="strong">Load demo</emphasis> menu, you can prepare your own data sets.
					</simpara>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								In OptaWeb Vehicle Routing, add a depot and one or more of visits by clicking on the map or using geosearch.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Click <emphasis role="strong">Export</emphasis> and save the file in the data set directory.
							</simpara>
							<note>
								<simpara>
									The data set directory is the directory specified in the <literal>app.demo.data-set-dir</literal> property.
								</simpara>
								<simpara>
									If the application is running through the <literal>runLocally.sh</literal> script, the data set directory is set to <literal>$HOME/.optaweb-vehicle-routing/dataset</literal>.
								</simpara>
								<simpara>
									Otherwise, the property is taken from the <literal>application.properties</literal> file and defaults to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing/optaweb-vehicle-routing-standalone/target/local/dataset</literal>.
								</simpara>
								<simpara>
									You can edit the <literal>app.demo.data-set-dir</literal> property to specify a diffent data directory.
								</simpara>
							</note>
						</listitem>
						<listitem>
							<simpara>
								Edit the YAML file and choose a unique name for the data set.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Restart the back end.
							</simpara>
						</listitem>
					</orderedlist>
					<simpara>
						After you restart the back end, files in the data set directory appear in the <emphasis role="strong">Load demo</emphasis> menu.
					</simpara>
				</section>
				<section xml:id="vrp-troubleshooting-proc_business-optimizer-vrp">
					<title>Troubleshooting OptaWeb Vehicle Routing</title>
					<simpara>
						If the OptaWeb Vehicle Routing behaves unexpectedly, follow this procedure to trouble-shoot.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								OptaWeb Vehicle Routing is running and behaving unexpectedly.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								To identify issues, review the back-end terminal output log.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To resolve issues, remove the back-end database:
							</simpara>
							<orderedlist numeration="loweralpha">
								<listitem>
									<simpara>
										Stop the back end by pressing Ctrl+C in the back-end terminal window.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Remove the <literal>optaweb-vehicle-routing/optaweb-vehicle-routing-backend/local/db</literal> directory.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										Restart OptaWeb Vehicle Routing.
									</simpara>
								</listitem>
							</orderedlist>
						</listitem>
					</orderedlist>
				</section>
			</section>
			<section remap="_optaweb_vehicle_routing_development_guide" xml:id="optaweb_vehicle_routing_development_guide">
				<title>OptaWeb Vehicle Routing development guide</title>
				<simpara>
					This section describes how to configure and run the back-end and front-end modules in development mode.
				</simpara>
				<section xml:id="vrp-structure-con_business-optimizer-vrp">
					<title>OptaWeb Vehicle Routing project structure</title>
					<simpara>
						The OptaWeb Vehicle Routing project is a multi-module Maven project.
					</simpara>
					<figure>
						<title>Module dependency tree diagram</title>
						<mediaobject>
							<imageobject>
								<imagedata align="center" fileref="images/_images/vrp/modules.dot.svg" format="SVG" />
							</imageobject>
							<textobject>
								<phrase>modules.dot</phrase>
							</textobject>
						</mediaobject>
					</figure>
					<simpara>
						The back-end and front-end modules are at the bottom of the module tree. These modules contain the application source code.
					</simpara>
					<simpara>
						The standalone module is an assembly module that combines the back end and front end into a single executable JAR file.
					</simpara>
					<simpara>
						The distribution module represents the final assembly step. It takes the standalone application and the documentation and wraps them in an archive that is easy to distribute.
					</simpara>
					<simpara>
						The back end and front end are separate projects that you can build and deploy separately. In fact, they are written in completely different languages and built with different tools. Both projects have tools that provide a modern developer experience with fast turn-around between code changes and the running application.
					</simpara>
					<simpara>
						The next sections describe how to run both back-end and front-end projects in development mode.
					</simpara>
				</section>
				<section xml:id="vrp-backend-con_business-optimizer-vrp">
					<title>The OptaWeb Vehicle Routing back-end module</title>
					<simpara>
						The back-end module contains a server-side application that uses Red Hat build of OptaPlanner to optimize vehicle routes. Optimization is a CPU-intensive computation that must avoid any I/O operations in order to perform to its full potential. Because one of the chief objectives is to minimize travel cost, either time or distance, OptaWeb Vehicle Routing keeps the travel cost information in RAM memory. While solving, OptaPlanner needs to know the travel cost between every pair of locations entered by the user. This information is stored in a structure called the <emphasis>distance matrix</emphasis>.
					</simpara>
					<simpara>
						When you enter a new location, OptaWeb Vehicle Routing calculates the travel cost between the new location and every other location that has been entered so far, and stores the travel cost in the distance matrix. The travel cost calculation is performed by the <link xlink:href="https://github.com/graphhopper/graphhopper">GraphHopper</link> routing engine.
					</simpara>
					<simpara>
						The back-end module implements the following additional functionality:
					</simpara>
					<itemizedlist>
						<listitem>
							<simpara>
								Persistence
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								WebSocket connection for the front end
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Data set loading, export, and import
							</simpara>
						</listitem>
					</itemizedlist>
					<simpara>
						To learn more about the back-end code architecture, see <xref linkend="backend-architecture-con_business-optimizer-vrp" />.
					</simpara>
					<simpara>
						The next sections describe how to configure and run the back end in development mode.
					</simpara>
					<section xml:id="vrp-backend-spring-proc_business-optimizer-vrp">
						<title>Running the OptaWeb Vehicle Routing back-end module</title>
						<simpara>
							You can run the back-end module in Quarkus development mode.
						</simpara>
						<itemizedlist>
							<title>Prerequisites</title>
							<listitem>
								<simpara>
									OptaWeb Vehicle Routing has been configured as described in <xref linkend="run-vrp-manually-proc_business-optimizer-vrp" />.
								</simpara>
							</listitem>
						</itemizedlist>
						<orderedlist numeration="arabic">
							<title>Procedure</title>
							<listitem>
								<simpara>
									Change directory to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing/optaweb-vehicle-routing-backend</literal>.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To run the back end in development mode, enter the following command:
								</simpara>
								
<programlisting language="shell" linenumbering="unnumbered">mvn compile quarkus:dev</programlisting>
							</listitem>
						</orderedlist>
					</section>
					<section xml:id="vrp-backend-intellij-proc_business-optimizer-vrp">
						<title>Running the OptaWeb Vehicle Routing back-end module from IntelliJ IDEA Ultimate</title>
						<simpara>
							You can use IntelliJ IDEA Ulitmate to run the OptaWeb Vehicle Routing back-end module to make it easier to develop your project. IntelliJ IDEA Ultimate includes a Quarkus plug-in that automatically creates run configurations for modules that use the Quarkus framework.
						</simpara>
						<formalpara>
							<title>Procedure</title>
							<para>
								Use the <emphasis role="strong">optaweb-vehicle-routing-backend</emphasis> run configuration to run the back end.
							</para>
						</formalpara>
						<formalpara>
							<title>Additional resources</title>
							<para>
								For more information, see <link xlink:href="https://www.jetbrains.com/help/idea/quarkus.html#run-app">Run the Quarkus application</link>.
							</para>
						</formalpara>
					</section>
					<section xml:id="vrp-auto-restart-con_business-optimizer-vrp">
						<title>Quarkus development mode</title>
						<simpara>
							In development mode, if there are changes to the back-end source code or configuration and you refresh the browser tab where the front end runs, the back-end automatically restarts.
						</simpara>
						<simpara>
							Learn more about <link xlink:href="https://quarkus.io/guides/maven-tooling#development-mode">Quarkus development mode</link>.
						</simpara>
					</section>
					<section xml:id="vrp-backend-config-proc_business-optimizer-vrp">
						<title>Changing OptaWeb Vehicle Routing back-end module system property values</title>
						<simpara>
							You can temporarily or permanently override the default system property values of the OptaWeb Vehicle Routing back-end module.
						</simpara>
						<simpara>
							The OptaWeb Vehicle Routing back-end module system properties are stored in the <literal>/src/main/resources/application.properties</literal> file. This file is under version control. Use it to permanently store default configuration property values and to define Quarkus profiles.
						</simpara>
						<itemizedlist>
							<title>Prerequisites</title>
							<listitem>
								<simpara>
									The OptaWeb Vehicle Routing starter application has been downloaded and extracted. For information, see <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
								</simpara>
							</listitem>
						</itemizedlist>
						<itemizedlist>
							<title>Procedure</title>
							<listitem>
								<simpara>
									To temporarily override a default system property value, include the <literal>-D&lt;PROPERTY&gt;=&lt;VALUE&gt;</literal> argument when you run the <literal>mvn</literal> or <literal>java</literal> command, where <literal>&lt;PROPERTY&gt;</literal> is the name of the property that you want to change and <literal>&lt;VALUE&gt;</literal> is the value that you want to temporarily assign to that property. The following example shows how to temporarily change the value of the <literal>quarkus.http.port</literal> system property to <literal>8181</literal> when you use Maven to compile a Quarkus project in <literal>dev</literal> mode:
								</simpara>
								
<screen>mvn compile quarkus:dev -Dquarkus.http.port=8181</screen>
								<simpara>
									This temporarily changes the value of the property stored in the <literal>/src/main/resources/application.properties</literal> file.
								</simpara>
							</listitem>
							<listitem>
								<simpara>
									To change a configuration value permanently, for example to store a configuration that is specific to your development environment, copy the contents of the <literal>env-example</literal> file to the <literal>optaweb-vehicle-routing-backend/.env</literal> file.
								</simpara>
								<simpara>
									This file is excluded from version control and therefore it does not exist when you clone the repository. You can make changes in the <literal>.env</literal> file without affecting the Git working tree.
								</simpara>
							</listitem>
						</itemizedlist>
						<formalpara>
							<title>Additional resources</title>
							<para>
								For a complete list of OptaWeb Vehicle Routing configuration properties, see <xref linkend="backend-properties-ref_business-optimizer-vrp" />.
							</para>
						</formalpara>
					</section>
					<section xml:id="vrp-backend-logging-con_business-optimizer-vrp">
						<title>OptaWeb Vehicle Routing backend logging</title>
						<simpara>
							OptaWeb Vehicle Routing uses the SLF4J API and Logback as the logging framework. For more information, see <link xlink:href="https://quarkus.io/guides/logging">Quarkus - Configuring Logging</link>.
						</simpara>
					</section>
				</section>
				<section xml:id="vrp-frontend-proc_business-optimizer-vrp">
					<title>Working with the OptaWeb Vehicle Routing front-end module</title>
					<simpara>
						The front-end project was bootstrapped with <link xlink:href="https://create-react-app.dev/">Create React App</link>. Create React App provides a number of scripts and dependencies that help with development and with building the application for production.
					</simpara>
					<itemizedlist>
						<title>Prerequisites</title>
						<listitem>
							<simpara>
								The OptaWeb Vehicle Routing starter application has been downloaded and extracted. For information, see <xref linkend="download-ref-imp-proc_business-optimizer-vrp" />.
							</simpara>
						</listitem>
					</itemizedlist>
					<orderedlist numeration="arabic">
						<title>Procedure</title>
						<listitem>
							<simpara>
								On Fedora, enter the following command to set up the development environment:
							</simpara>
							
<programlisting language="shell" linenumbering="unnumbered">sudo dnf install npm</programlisting>
							<simpara>
								See <link xlink:href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm">Downloading and installing Node.js and npm</link> for more information about installing npm.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Change directory to <literal>rhdm-7.13.0-kogito-and-optaplanner-quickstarts/optaweb-8.11.1.Final-redhat-00006/optaweb-vehicle-routing/optaweb-vehicle-routing-frontend</literal>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Install <literal>npm</literal> dependencies:
							</simpara>
							
<programlisting language="shell" linenumbering="unnumbered">npm install</programlisting>
							<simpara>
								Unlike Maven, the <literal>npm</literal> package manager installs dependencies in <literal>node_modules</literal> under the project directory and does that only when you execute <literal>npm install</literal>. Whenever the dependencies listed in <literal>package.json</literal> change, for example when you pull changes to the master branch, you must execute <literal>npm install</literal> before you run the development server.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command to run the development server:
							</simpara>
							
<programlisting language="shell" linenumbering="unnumbered">npm start</programlisting>
						</listitem>
						<listitem>
							<simpara>
								If it does not open automatically, open <literal>http://localhost:3000/</literal> in a web browser.
							</simpara>
							<simpara>
								By default, the <literal>npm start</literal> command attempts to open this URL in your default browser.
							</simpara>
							<note>
								<simpara>
									If you do not want the <literal>npm start</literal> command to open a new browser tab each time you run it, export the <literal>BROWSER=none</literal> environment variable. You can use <literal>.env.local</literal> file to make this preference permanent. To do that, enter the following command:
								</simpara>
								
<programlisting language="shell" linenumbering="unnumbered">echo BROWSER=none &gt;&gt; .env.local</programlisting>
							</note>
							<simpara>
								The browser refreshes the page whenever you make changes in the front-end source code. The development server process running in the terminal picks up the changes as well and prints compilation and lint errors to the console.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								Enter the following command to run tests:
							</simpara>
							
<screen>npm test</screen>
						</listitem>
						<listitem>
							<simpara>
								Change the value of the <literal>REACT_APP_BACKEND_URL</literal> environment variable to specify the location of the back-end project to be used by <literal>npm</literal> when you execute <literal>npm start</literal> or <literal>npm run build</literal>, for example:
							</simpara>
							
<screen>REACT_APP_BACKEND_URL=http://10.0.0.123:8081</screen>
							<note>
								<simpara>
									Environment variables are hard coded inside the JavaScript bundle during the <literal>npm</literal> build process, so you must specify the back-end location before you build and deploy the front end.
								</simpara>
							</note>
							<simpara>
								To learn more about the React environment variables, see <link xlink:href="https://create-react-app.dev/docs/adding-custom-environment-variables/"><emphasis>Adding Custom Environment Variables</emphasis></link>.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								To build the front end, enter one of the following commands:
							</simpara>
							
<screen>./mvnw install</screen>
							
<screen>mvn install</screen>
						</listitem>
					</orderedlist>
				</section>
			</section>
			<section xml:id="backend-architecture-con_business-optimizer-vrp">
				<title>OptaWeb Vehicle Routing back-end architecture</title>
				<simpara>
					Domain model and use cases are essential for the application. The OptaWeb Vehicle Routing domain model is at the center of the architecture and is surround by the application layer that embeds use cases. Functions such as route optimization, distance calculation, persistence, and network communication are considered implementation details and are placed at the outermost layer of the architecture.
				</simpara>
				<figure>
					<title>Diagram of application layers</title>
					<mediaobject>
						<imageobject>
							<imagedata align="center" fileref="images/_images/vrp/backend-layers.svg" format="SVG" />
						</imageobject>
						<textobject>
							<phrase>backend layers</phrase>
						</textobject>
					</mediaobject>
				</figure>
				<section remap="_code_organization" xml:id="code_organization">
					<title>Code organization</title>
					<simpara>
						The back-end code is organized in three layers, illustrated in the preceding graphic.
					</simpara>
					
<literallayout class="monospaced">org.optaweb.vehiclerouting
├── domain
├── plugin          # Infrastructure layer
│   ├── persistence
│   ├── planner
│   ├── routing
│   └── rest
└── service         # Application layer
    ├── demo
    ├── distance
    ├── error
    ├── location
    ├── region
    ├── reload
    ├── route
    └── vehicle</literallayout>
					<simpara>
						The <literal>service</literal> package contains the application layer that implements use cases. The <literal>plugin</literal> package contains the infrastructure layer.
					</simpara>
					<simpara>
						Code in each layer is further organized by function. This means that each service or plug-in has its own package.
					</simpara>
				</section>
				<section remap="_dependency_rules" xml:id="dependency_rules">
					<title>Dependency rules</title>
					<simpara>
						Compile-time dependencies are only allowed to point from outer layers towards the center. Following this rule helps to keep the domain model independent of underlying frameworks and other implementation details and models the behavior of business entities more precisely. With presentation and persistence being pushed out to the periphery, it is easier to test the behavior of business entities and use cases.
					</simpara>
					<simpara>
						The domain has no dependencies.
					</simpara>
					<simpara>
						Services only depend on the domain. If a service needs to send a result (for example to the database or to the client), it uses an output boundary interface. Its implementation is injected by the <link xlink:href="https://quarkus.io/guides/cdi">contexts and dependency injection</link> (CDI) container.
					</simpara>
					<simpara>
						Plug-ins depend on services in two ways. First, they invoke services based on events such as a user input or a route update coming from the optimization engine. Services are injected into plug-ins which moves the burden of their construction and dependency resolution to the IoC container. Second, plug-ins implement service output boundary interfaces to handle use case results, for example persisting changes to the database or sending a response to the web UI.
					</simpara>
				</section>
				<section remap="_the_domain_package" xml:id="the_domain_package">
					<title>The domain package</title>
					<simpara>
						The <literal>domain</literal> package contains <emphasis>business objects</emphasis> that model the domain of this project, for example <literal>Location</literal>, <literal>Vehicle</literal>, <literal>Route</literal>. These objects are strictly business-oriented and must not be influenced by any tools and frameworks, for example object-relational mapping tools and web service frameworks.
					</simpara>
				</section>
				<section remap="_the_service_package" xml:id="the_service_package">
					<title>The service package</title>
					<simpara>
						The <literal>service</literal> package contains classes that implement <emphasis>use cases</emphasis>. A use case describes something that you want to do, for example adding a new location, changing vehicle capacity, or finding coordinates for an address. The business rules that govern use cases are expressed using the domain objects.
					</simpara>
					<simpara>
						Services often need to interact with plug-ins in the outer layer, such as persistence, web, and optimization. To satisfy the dependency rules between layers, the interaction between services and plug-ins is expressed in terms of interfaces that define the dependencies of a service. A plug-in can satisfy a dependency of a service by providing a bean that implements the boundary interface of the service. The CDI container creates an instance of the plug-in bean and injects it to the service at runtime. This is an example of the inversion of control principle.
					</simpara>
				</section>
				<section remap="_the_plugin_package" xml:id="the_plugin_package">
					<title>The plugin package</title>
					<simpara>
						The <literal>plugin</literal> package contains infrastructure functions such as optimization, persistence, routing, and network.
					</simpara>
				</section>
			</section>
			<section xml:id="backend-properties-ref_business-optimizer-vrp">
				<title>OptaWeb Vehicle Routing back-end configuration properties</title>
				<simpara>
					You can set the OptaWeb Vehicle Routing application properties listed in the following table.
				</simpara>
				<informaltable colsep="1" frame="all" rowsep="1">
					<tgroup cols="4">
						<colspec colname="col_1" colwidth="25*"></colspec>
						<colspec colname="col_2" colwidth="25*"></colspec>
						<colspec colname="col_3" colwidth="25*"></colspec>
						<colspec colname="col_4" colwidth="25*"></colspec>
						<thead>
							<row>
								<entry align="left" valign="top">Property</entry>
								<entry align="left" valign="top">Type</entry>
								<entry align="left" valign="top">Example</entry>
								<entry align="left" valign="top">Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>app.demo.data-set-dir</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Relative or absolute path
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>/home/user/.optaweb-vehicle-routing/dataset</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Custom data sets are loaded from this directory. Defaults to <literal>local/dataset</literal>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>app.persistence.h2-dir</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Relative or absolute path
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>/home/user/.optaweb-vehicle-routing/db</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									The directory used by H2 to store the database file. Defaults to <literal>local/db</literal>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>app.region.country-codes</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									List of <literal><link xlink:href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</link></literal> country codes
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>US</literal>, <literal>GB,IE</literal>, <literal>DE,AT,CH</literal>, may be empty
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Restricts geosearch results.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>app.routing.engine</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Enumeration
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>air</literal>, <literal>graphhopper</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Routing engine implementation. Defaults to <literal>graphhopper</literal>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>app.routing.gh-dir</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Relative or absolute path
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>/home/user/.optaweb-vehicle-routing/graphhopper</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									The directory used by GraphHopper to store road network graphs. Defaults to <literal>local/graphhopper</literal>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>app.routing.osm-dir</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Relative or absolute path
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>/home/user/.optaweb-vehicle-routing/openstreetmap</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									The directory that contains OSM files. Defaults to <literal>local/openstreetmap</literal>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>app.routing.osm-file</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									File name
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>belgium-latest.osm.pbf</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Name of the OSM file to be loaded by GraphHopper. The file must be placed under <literal>app.routing.osm-dir</literal>.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>optaplanner.solver.termination.spent-limit</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>java.time.Duration</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<itemizedlist>
									<listitem>
										<simpara>
											<literal>1m</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>150s</literal>
										</simpara>
									</listitem>
									<listitem>
										<simpara>
											<literal>P2dT21h</literal> (<literal>PnDTnHnMn.nS</literal>)
										</simpara>
									</listitem>
								</itemizedlist>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									How long the solver should run after a location change occurs.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>server.address</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									IP address or hostname
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>10.0.0.123</literal>, <literal>my-vrp.geo-1.openshiftapps.com</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Network address to which to bind the server.
								</simpara>
								</entry>
							</row>
							<row>
								<entry align="left" valign="top">
								<simpara>
									<literal><literal>server.port</literal></literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Port number
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									<literal>4000</literal>, <literal>8081</literal>
								</simpara>
								</entry>
								<entry align="left" valign="top">
								<simpara>
									Server HTTP port.
								</simpara>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
			</section>
		</chapter>
	</part>
	<appendix xml:id="versioning-information">
		<title>Versioning information</title>
		<simpara>
			Documentation last updated on Thursday, March 24, 2022.
		</simpara>
	</appendix>
	<appendix xml:id="author-group">
		<title>Contact information</title>
		<simpara>
			Red Hat Decision Manager documentation team: <link xlink:href="mailto:brms-docs@redhat.com">brms-docs@redhat.com</link>
		</simpara>
	</appendix>
</book>

