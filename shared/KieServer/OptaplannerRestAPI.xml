<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Optaplanner REST API</title>

  <para>When the BRP (Business Resource Planner) capability is enabled, the Kie Server supports the following additional
  REST APIs. As usual, all these APIs are also available through JMS and the Java client API.</para>

  <para>Please note the following before using these commands:</para>

  <para><itemizedlist>
      <listitem>
        <para>The base URL for these will remain as the endpoint defined earlier (for example:
        <code>http://SERVER:PORT/CONTEXT/services/rest/server/</code> )</para>
      </listitem>

      <listitem>
        <para>All requests require basic HTTP Authentication for the role kie-server as indicated earlier.</para>
      </listitem>
    </itemizedlist></para>

  <section>
    <title>[GET] /containers/{containerId}/solvers</title>

    <para>Returns the list of solvers created in the container.</para>

    <example>
      <title>Example Server Response (XStream)</title>

      <programlisting language="XML">&lt;org.kie.server.api.model.ServiceResponse&gt;
  &lt;type&gt;SUCCESS&lt;/type&gt;
  &lt;msg&gt;Solvers list successfully retrieved from container &amp;apos;cloud&amp;apos;&lt;/msg&gt;
  &lt;result class="org.kie.server.api.model.instance.SolverInstanceList"&gt;
    &lt;solvers&gt;
      &lt;solver-instance&gt;
        &lt;container-id&gt;cloud&lt;/container-id&gt;
        &lt;solver-id&gt;cloudsolver2&lt;/solver-id&gt;
        &lt;solver-config-file&gt;META-INF/cloudbalance-solver.xml&lt;/solver-config-file&gt;
        &lt;status&gt;NOT_SOLVING&lt;/status&gt;
      &lt;/solver-instance&gt;
      &lt;solver-instance&gt;
        &lt;container-id&gt;cloud&lt;/container-id&gt;
        &lt;solver-id&gt;cloudsolver1&lt;/solver-id&gt;
        &lt;solver-config-file&gt;META-INF/cloudbalance-solver.xml&lt;/solver-config-file&gt;
        &lt;status&gt;NOT_SOLVING&lt;/status&gt;
      &lt;/solver-instance&gt;
    &lt;/solvers&gt;
  &lt;/result&gt;
&lt;/org.kie.server.api.model.ServiceResponse&gt;</programlisting>
    </example>

    <example>
      <title>Example Server Response (JSON)</title>

      <programlisting language="JSON">{
  "type" : "SUCCESS",
  "msg" : "Solvers list successfully retrieved from container 'cloud'",
  "result" : {
    "solver-instance-list" : {
      "solver" : [ {
        "status" : "NOT_SOLVING",
        "container-id" : "cloud",
        "solver-id" : "cloudsolver2",
        "solver-config-file" : "META-INF/cloudbalance-solver.xml"
      }, {
        "status" : "NOT_SOLVING",
        "container-id" : "cloud",
        "solver-id" : "cloudsolver1",
        "solver-config-file" : "META-INF/cloudbalance-solver.xml"
      } ]
    }
  }
}           </programlisting>
    </example>
  </section>

  <section>
    <title>[PUT] /containers/{containerId}/solvers/{solverId}</title>

    <para>Creates a new solver with the given <code>{solverId}</code> in the container <code>{containerId}</code>. The
    request's body is a marshalled SolverInstance entity that must specify the solver configuration file.</para>

    <para>The following is an example of the request and the corresponding response.</para>

    <example>
      <title>Example Server Request (XStream)</title>

      <programlisting language="XML">&lt;solver-instance&gt;
  &lt;solver-config-file&gt;META-INF/cloudbalance-solver.xml&lt;/solver-config-file&gt;
&lt;/solver-instance&gt;           </programlisting>
    </example>

    <example>
      <title>Example Server Response (XStream)</title>

      <programlisting language="XML">&lt;org.kie.server.api.model.ServiceResponse&gt;
  &lt;type&gt;SUCCESS&lt;/type&gt;
  &lt;msg&gt;Solver 'cloudsolver' successfully created in container 'cloud'&lt;/msg&gt;
  &lt;result class="solver-instance"&gt;
    &lt;container-id&gt;cloud&lt;/container-id&gt;
    &lt;solver-id&gt;cloudsolver&lt;/solver-id&gt;
    &lt;solver-config-file&gt;META-INF/cloudbalance-solver.xml&lt;/solver-config-file&gt;
    &lt;status&gt;NOT_SOLVING&lt;/status&gt;
  &lt;/result&gt;
&lt;/org.kie.server.api.model.ServiceResponse&gt;           </programlisting>
    </example>

    <example>
      <title>Example Server Request (JSON)</title>

      <programlisting language="JSON">{
  "solver-config-file" : "META-INF/cloudbalance-solver.xml"
}           </programlisting>
    </example>

    <example>
      <title>Example Server Response (JSON)</title>

      <programlisting language="JSON">{
  "type" : "SUCCESS",
  "msg" : "Solver 'cloudsolver' successfully created in container 'cloud'",
  "result" : {
    "solver-instance" : {
      "status" : "NOT_SOLVING",
      "container-id" : "cloud",
      "solver-id" : "cloudsolver",
      "solver-config-file" : "META-INF/cloudbalance-solver.xml"
    }
  }
}</programlisting>
    </example>
  </section>

  <section>
    <title>[GET] /containers/{containerId}/solvers/{solverId}</title>

    <para>Returns the current state of the solver <code>{solverId}</code> in container
    <code>{containerId}</code>.</para>

    <example>
      <title>Example Server Response (XStream)</title>

      <programlisting language="XML">&lt;org.kie.server.api.model.ServiceResponse&gt;
  &lt;type&gt;SUCCESS&lt;/type&gt;
  &lt;msg&gt;Solver &amp;apos;cloudsolver&amp;apos; state successfully retrieved from container &amp;apos;cloud&amp;apos;&lt;/msg&gt;
  &lt;result class="solver-instance"&gt;
    &lt;container-id&gt;cloud&lt;/container-id&gt;
    &lt;solver-id&gt;cloudsolver&lt;/solver-id&gt;
    &lt;solver-config-file&gt;META-INF/cloudbalance-solver.xml&lt;/solver-config-file&gt;
    &lt;status&gt;NOT_SOLVING&lt;/status&gt;
    &lt;score class="org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore"&gt;
      &lt;hardScore&gt;0&lt;/hardScore&gt;
      &lt;softScore&gt;-7410&lt;/softScore&gt;
    &lt;/score&gt;
  &lt;/result&gt;
&lt;/org.kie.server.api.model.ServiceResponse&gt;</programlisting>
    </example>

    <example>
      <title>Example Server Response (JSON)</title>

      <programlisting language="JSON">{
  "type" : "SUCCESS",
  "msg" : "Solver 'cloudsolver' state successfully retrieved from container 'cloud'",
  "result" : {
    "solver-instance" : {
      "status" : "NOT_SOLVING",
      "score" : {"org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore":{
  "hardScore" : 0,
  "softScore" : -7410,
  "feasible" : true
}},
      "container-id" : "cloud",
      "solver-id" : "cloudsolver",
      "solver-config-file" : "META-INF/cloudbalance-solver.xml"
    }
  }
}</programlisting>
    </example>
  </section>

  <section>
    <title>⁠[POST] /containers/{containerId}/solvers/{solverId}</title>

    <para>Updates the state of the {solverId} in container {containerId}. The request's body is a marshalled
    <code>SolverInstance</code> and can either request the solver to solve a planning problem or to stop solvind one.
    The SolverInstance state determines which operation should be executed and can be set one of two possible
    values:</para>

    <itemizedlist>
      <listitem>
        <para>SOLVING: starts the solver if it is not executing yet. The request's boty must also contain the problem's
        data to be solved.</para>
      </listitem>

      <listitem>
        <para>NOT_SOLVING: requests the solver to terminate early, if it is running. All other attributes are
        ignored.</para>
      </listitem>
    </itemizedlist>

    <example>
      <title>Example Server Request (XStream)</title>

      <programlisting language="XML">
                       
                     </programlisting>
    </example>

    <example>
      <title>Example Server Request (JSON)</title>

      <programlisting language="JSON">
                       
                     </programlisting>
    </example>

    <example>
      <title>Example Server Response (XStream)</title>

      <programlisting language="XML">&lt;org.kie.server.api.model.ServiceResponse&gt;
  &lt;type&gt;SUCCESS&lt;/type&gt;
  &lt;msg&gt;Solver &amp;apos;cloudsolver&amp;apos; from container &amp;apos;cloud&amp;apos; successfully updated.&lt;/msg&gt;
  &lt;result class="solver-instance"&gt;
    &lt;container-id&gt;cloud&lt;/container-id&gt;
    &lt;solver-id&gt;cloudsolver&lt;/solver-id&gt;
    &lt;solver-config-file&gt;META-INF/cloudbalance-solver.xml&lt;/solver-config-file&gt;
    &lt;status&gt;SOLVING&lt;/status&gt;
  &lt;/result&gt;
&lt;/org.kie.server.api.model.ServiceResponse&gt;</programlisting>
    </example>

    <example>
      <title>Example Server Response (JSON)</title>

      <programlisting language="JSON">{
  "type" : "SUCCESS",
  "msg" : "Solver 'cloudsolver' from container 'cloud' successfully updated.",
  "result" : {
    "solver-instance" : {
      "status" : "SOLVING",
      "container-id" : "cloud",
      "solver-id" : "cloudsolver",
      "solver-config-file" : "META-INF/cloudbalance-solver.xml"
    }
  }
}</programlisting>
    </example>
  </section>

  <section>
    <title>⁠[GET] /containers/{containerId}/solvers/{solverId}/bestsolution</title>

    <para>Returns the best calculated solution at the time the request is made.⁠</para>

    <example>
      <title>Example Server Response (XStream)</title>

      <programlisting language="XML">
                       
                     </programlisting>
    </example>

    <example>
      <title>Example Server Response (JSON)</title>

      <programlisting language="JSON">                     </programlisting>
    </example>
  </section>

  <section>
    <title>[DELETE] /containers/{containerId}/solvers/{solverId}</title>

    <para>⁠Disposes the solver <code>{solverId}</code> in container <code>{containerId}</code>.</para>

    <example>
      <title>Example Server Response (XStream)</title>

      <programlisting language="XML">&lt;org.kie.server.api.model.ServiceResponse&gt;
  &lt;type&gt;SUCCESS&lt;/type&gt;
  &lt;msg&gt;Solver 'cloudsolver' successfully disposed from container 'cloud'&lt;/msg&gt;
&lt;/org.kie.server.api.model.ServiceResponse&gt;                     </programlisting>
    </example>

    <example>
      <title>Example Server Response (JSON)</title>

      <programlisting language="JSON">{
  "type" : "SUCCESS",
  "msg" : "Solver 'cloudsolver' successfully disposed from container 'cloud'",
  "result" : null
}                     </programlisting>
    </example>
  </section>
</section>
