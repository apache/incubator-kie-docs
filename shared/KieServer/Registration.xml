<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Kie Server setup</title>
       <para>
              <important>
                     <para>Server setup and registration changed significantly from versions 6.2 and
                            before. The following applies only to version 6.3 and forward.</para>
              </important>
       </para>
       <section>
              <title>Managed Kie Server </title>
              <para>A managed instance is one that requires a controller to be available to properly
                     startup the Kie Server instance. </para>
              <para>A Controller is a component responsible for keeping and managing a Kie Server
                     Configuration in centralized way. Each controller can manager multiple
                     configurations at once and there can be multiple controllers in the
                     environment. Managed KIE Servers can be configured with a list of controllers
                     but will connect to only one at a time.</para>
              <para>
                     <note>It's important to mention that even though there can be multiple
                            controllers they should be kept in sync to make sure that regardless
                            which one of them is contacted by KIE Server instance it will provide
                            same set of configuration.</note>
              </para>
              <para>At startup, if a Kie Server is configured with a list of controllers, it will
                     try succesivelly to connect to each of them until a connection is successfully
                     stablished with one of them. If for any reason a connection can't be
                     stablished, the server will not start, even if there is local storage available
                     with configuration. This happens by design in order to ensure consistency. For
                     instance, if the Kie  Server was down and the configuration has changed, this
                     restriction guarantees that it will run with up to date configuration or not at
                     all. </para>
              <para>
                     <note>In order to run the Kie Server in standalone mode, without connecting to
                            any controllers, please see "Unmanaged Kie Server". </note>
              </para>
              <para>The configuration sets, among other things: <itemizedlist>
                            <listitem>
                                   <para>kie containers to be deployed and started</para>
                            </listitem>
                            <listitem>
                                   <para>configuration items - currently this is a place holder for
                                          further enhancements that will allow remotely configure
                                          KIE Execution Server components - timers, persistence, etc
                                   </para>
                            </listitem>
                     </itemizedlist>The Controller, besides providing configuration management, is
                     also responsible for overall management of Kie Servers. It provides a REST api
                     that is divided into two parts:<itemizedlist>
                            <listitem>
                                   <para>the controller itself that is exposed to interact with KIE
                                          Execution Server instances</para>
                            </listitem>
                            <listitem>
                                   <para>an administration API that allows to remotely manage Kie
                                          Server instances:<itemizedlist>
                                                 <listitem>
                                                  <para>add/remove servers </para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>add/remove containers to/from the
                                                  servers</para>
                                                 </listitem>
                                                 <listitem>
                                                  <para>start/stop containers on servers </para>
                                                 </listitem>
                                          </itemizedlist></para>
                            </listitem>
                     </itemizedlist></para>
              <para>The controller deals only with the Kie Server configuration or definition to put
                     it differently. It does not handle any runtime components of KIE Execution
                     Server instances. They are always considered remote to controller. The
                     controller is responsible for persisting the configuration to preserve restarts
                     of the controller itself. It should manage the synchronization as well in case
                     multiple controllers are configured to keep all definitions up to date on all
                     instances of the controller. </para>
              <para>By default controller is shipped with Kie Workbench and provides a fully
                     featured management interface (both REST api and UI). It uses underlying git
                     repository as persistent store and thus when GIT repositories are clustered
                     (using Apache Zookeeper and Apache Helix) it will cover the controllers
                     synchronization as well. </para>
              <para><screenshot>
                     <mediaobject>
                            <imageobject>
                                   <imagedata fileref="shared/images/KieServer/kie-server-simple-architecture.png"/>
                            </imageobject>
                     </mediaobject>
              </screenshot></para>
              <para>The diagram above illustrates the single controller (workbench) setup with
                     multiple Kie Server instances managed by it. </para>
              <para>The diagram below illustrates the clustered setup where there are multiple
                     instances of controller synchronized over Zookeeper. </para>
              <para><screenshot>
                     <mediaobject>
                            <imageobject>
                                   <imagedata fileref="shared/images/KieServer/kie-server-architecture.png"/>
                            </imageobject>
                     </mediaobject>
              </screenshot></para>
              <para>In the above diagram we can see that the Kie Server instances are capable of
                     connecting to any controllers, but they will connect to only one. Each instance
                     will attempt to connect to controller as long as it can reach one. Once
                     connection is established with one of the controllers it will skip the others. </para>
              <section>
                     <title>Working with managed servers </title>
                     <para>There are two approaches that users can take when working with managed
                            KIE Server instances: </para>
                     <itemizedlist>
                            <listitem><para><emphasis>Configuration first: </emphasis>with this approach, a user will start working with
                                          the controller (either UI or REST api) and create and
                                          configure Kie Server definitions. That consists basically
                                          of an identification for the server definition (id and
                                          name + optionally version for improved readability) and
                                          the configuration for the Kie Containers to run on the
                                          server.</para>
                            </listitem>
                            <listitem><para><emphasis>Registration first:</emphasis> with this approach, the Kie Server instances are
                                          started first and auto register themselves on controller.
                                          The user then can configure the Kie Containers. This
                                          option simply skips the registration step done in the
                                          first approach and populates it with server id, name and
                                          version directly upon auto registration. There are no
                                          other differences between the two approaches.</para></listitem>
                     </itemizedlist>
              </section>
       </section>
       <section>
              <title>Unmanaged KIE Execution Server</title>
              <para>An unmanaged Kie Server is in turn just a standalone instance, and thus must be
                     configured individually using REST/JMS api from the Kie Server itself. There is
                     no controller involved. The configuration is automatically persisted by the
                     server into a file and that is used as the internal server state, in case of
                     restarts. </para>
              <para>The configuration is updated during the following operations: <itemizedlist>
                            <listitem>
                                   <para>deploy Kie Container </para>
                            </listitem>
                            <listitem>
                                   <para>undeploy Kie Container </para>
                            </listitem>
                            <listitem>
                                   <para>start Kie Container </para>
                            </listitem>
                            <listitem>
                                   <para>stop Kie Container</para>
                            </listitem>
                     </itemizedlist>
                     <note>if the Kie Server is restarted, it will try to restablish the same state
                     that was persisted before shutdown. That means that Kie Containers that were 
                     running, will be started, but the ones that were stopped/disposed before, will not.
                     </note></para>
              <para>In most use cases, the Kie Server should be executed in managed mode as that
                     provides some benefits, like a web user interface (if using the workbench as a
                     controller) and some facilities for clustering.</para>
       </section>
</section>
