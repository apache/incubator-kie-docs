<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="sect-datamodeler-generateCode"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">

  <title>Generate data model code.</title>

  <para>The data model in itself is merely a visual tool that allows the user
    to define high-level data structures, for them to interact with the Drools
    Engine on the one hand, and the jBPM platform on the other. In order for
    this to become possible, these high-level visual structures have to be
    transformed into low-level artifacts that can effectively be consumed by
    these platforms. These artifacts are Java POJOs (Plain Old Java Objects),
    and they are generated every time the data model is saved, by pressing the
    "Save" button in the top Data Modeller Menu. Additionally when the user round trip
    between the "Editor" and "Source" tab, the code is auto generated to maintain the consistency
    with the Editor view and vice versa.
  </para>

  <figure>
    <title>Save the data model from the top menu</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Workbench/Authoring/DataModeller/6.3/save_top.jpg"/>
        </imageobject>
      </mediaobject>
    </screenshot>
  </figure>

  <para/>

  <para>The resulting code is generated according to the following transformation rules:
  </para>

  <itemizedlist>
    <listitem>
      <para>The data object's identifier property will become the Java class's
        name. It therefore needs to be a valid Java identifier.
      </para>
    </listitem>

    <listitem>
      <para>The data object's package property becomes the Java class's package
        declaration.
      </para>
    </listitem>

    <listitem>
      <para>The data object's superclass property (if present) becomes the Java
        class's extension declaration.
      </para>
    </listitem>

    <listitem>
      <para>The data object's label and description properties will translate into
        the Java annotations
        "@org.kie.api.definition.type.Label" and
        "@org.kie.api.definition.type.Description",
        respectively. These annotations are merely a way of preserving the
        associated information, and as yet are not processed any further.
      </para>
    </listitem>

    <listitem>
      <para>The data object's role property (if present) will be translated into
        the "@org.kie.api.definition.type.Role" Java annotation, that
        <emphasis>IS</emphasis>
        interpreted by the application platform, in the
        sense that it marks this Java class as a Drools Event Fact-Type.
      </para>
    </listitem>

    <listitem>
      <para>The data object's type safe property (if present) will be translated into
        the "@org.kie.api.definition.type.TypeSafe Java annotation.
        (see Drools)
      </para>
    </listitem>

    <listitem>
      <para>The data object's class reactive property (if present) will be translated into
        the "@org.kie.api.definition.type.ClassReactive Java annotation.
        (see Drools)
      </para>
    </listitem>

    <listitem>
      <para>The data object's property reactive property (if present) will be translated into
        the "@org.kie.api.definition.type.PropertyReactive Java annotation.
        (see Drools)
      </para>
    </listitem>

    <listitem>
      <para>The data object's timestamp property (if present) will be translated into
        the "@org.kie.api.definition.type.Timestamp Java annotation.
        (see Drools)
      </para>
    </listitem>

    <listitem>
      <para>The data object's duration property (if present) will be translated into
        the "@org.kie.api.definition.type.Duration Java annotation.
        (see Drools)
      </para>
    </listitem>

    <listitem>
      <para>The data object's expires property (if present) will be translated into
        the "@org.kie.api.definition.type.Expires Java annotation.
        (see Drools)
      </para>
    </listitem>

    <listitem>
      <para>The data object's remotable property (if present) will be translated into
        the "@org.kie.api.remote.Remotable Java annotation.
        (see jBPM)
      </para>
    </listitem>


  </itemizedlist>

  <para/>

  <para>A standard Java default (or no parameter) constructor is generated, as
    well as a full parameter constructor, i.e. a constructor that accepts as
    parameters a value for each of the data object's user-defined fields.
  </para>

  <para>The data object's user-defined fields are translated into Java class
    fields, each one of them with its own getter and setter method, according to
    the following transformation rules:
  </para>

  <itemizedlist>
    <listitem>
      <para>The data object field's identifier will become the Java field
        identifier. It therefore needs to be a valid Java identifier.
      </para>
    </listitem>

    <listitem>
      <para>The data object field's type is directly translated into the Java
        class's field type. In case the field was declared to be
        multiple (i.e. 'List'), then the generated field is of the
        "java.util.List" type.
      </para>
    </listitem>

    <listitem>
      <para>The equals property: when it is set for a specific field, then
        this class property will be annotated with the
        "@org.kie.api.definition.type.Key" annotation, which is interpreted by
        the Drools Engine, and it will 'participate' in the generated equals()
        method, which overwrites the equals() method of the Object class. The
        latter implies that if the field is a 'primitive' type, the equals
        method will simply compares its value with the value of the
        corresponding field in another instance of the class. If the
        field is a sub-entity or a collection type, then the equals method
        will make a method-call to the equals method of the corresponding
        data object's Java class, or of the java.util.List standard Java class,
        respectively.
      </para>

      <para>If the equals property is checked for
        <emphasis>ANY</emphasis>
        of
        the data object's user defined fields, then this also implies that in
        addition to the default generated constructors another constructor is
        generated, accepting as parameters all of the fields that were
        marked with Equals. Furthermore, generation of the equals() method also
        implies that also the Object class's hashCode() method is overwritten,
        in such a manner that it will call the hashCode() methods of the
        corresponding Java class types (be it 'primitive' or user-defined types)
        for all the fields that were marked with Equals in the Data
        Model.
      </para>
    </listitem>

    <listitem>
      <para>The position property: this field property is automatically set
        for all user-defined fields, starting from 0, and incrementing by 1
        for each subsequent new field. However the user can freely changes
        the position among the fields. At code generation time this property
        is translated into the "@org.kie.api.definition.type.Position"
        annotation, which can be interpreted by the Drools Engine. Also, the
        established property order determines the order of the constructor
        parameters in the generated Java class.
      </para>
    </listitem>

  </itemizedlist>

  <para/>

  <para>As an example, the generated Java class code for the Purchase Order
    data object, corresponding to its definition as shown in the following figure
    purchase_example.jpg is visualized in the figure at the bottom of this
    chapter. Note that the two of the data object's fields, namely 'header' and
    'lines' were marked with Equals, and have been assigned with the positions 2
    and 1, respectively).
  </para>

  <figure>
    <title>Purchase Order configuration</title>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Workbench/Authoring/DataModeller/6.3/generate-purchase-example.png"/>
        </imageobject>
      </mediaobject>
    </screenshot>
  </figure>

  <para/>

  <programlisting language="java" linenumbering="numbered">

    package org.jbpm.examples.purchases;

    /**
    * This class was automatically generated by the data modeler tool.
    */
    @org.kie.api.definition.type.Label("Purchase Order")
    @org.kie.api.definition.type.TypeSafe(true)
    @org.kie.api.definition.type.Role(org.kie.api.definition.type.Role.Type.EVENT)
    @org.kie.api.definition.type.Expires("2d")
    @org.kie.api.remote.Remotable
    public class PurchaseOrder implements java.io.Serializable
    {

    static final long serialVersionUID = 1L;

    @org.kie.api.definition.type.Label("Total")
    @org.kie.api.definition.type.Position(3)
    private java.lang.Double total;

    @org.kie.api.definition.type.Label("Description")
    @org.kie.api.definition.type.Position(0)
    private java.lang.String description;

    @org.kie.api.definition.type.Label("Lines")
    @org.kie.api.definition.type.Position(2)
    @org.kie.api.definition.type.Key
    private java.util.List&lt;org.jbpm.examples.purchases.PurchaseOrderLine&gt; lines;

    @org.kie.api.definition.type.Label("Header")
    @org.kie.api.definition.type.Position(1)
    @org.kie.api.definition.type.Key
    private org.jbpm.examples.purchases.PurchaseOrderHeader header;

    @org.kie.api.definition.type.Position(4)
    private java.lang.Boolean requiresCFOApproval;

    public PurchaseOrder()
    {
    }

    public java.lang.Double getTotal()
    {
    return this.total;
    }

    public void setTotal(java.lang.Double total)
    {
    this.total = total;
    }

    public java.lang.String getDescription()
    {
    return this.description;
    }

    public void setDescription(java.lang.String description)
    {
    this.description = description;
    }

    public java.util.List&lt;org.jbpm.examples.purchases.PurchaseOrderLine&gt; getLines()
    {
    return this.lines;
    }

    public void setLines(java.util.List&lt;org.jbpm.examples.purchases.PurchaseOrderLine&gt; lines)
    {
    this.lines = lines;
    }

    public org.jbpm.examples.purchases.PurchaseOrderHeader getHeader()
    {
    return this.header;
    }

    public void setHeader(org.jbpm.examples.purchases.PurchaseOrderHeader header)
    {
    this.header = header;
    }

    public java.lang.Boolean getRequiresCFOApproval()
    {
    return this.requiresCFOApproval;
    }

    public void setRequiresCFOApproval(java.lang.Boolean requiresCFOApproval)
    {
    this.requiresCFOApproval = requiresCFOApproval;
    }

    public PurchaseOrder(java.lang.Double total, java.lang.String description,
    java.util.List&lt;org.jbpm.examples.purchases.PurchaseOrderLine&gt; lines,
    org.jbpm.examples.purchases.PurchaseOrderHeader header,
    java.lang.Boolean requiresCFOApproval)
    {
    this.total = total;
    this.description = description;
    this.lines = lines;
    this.header = header;
    this.requiresCFOApproval = requiresCFOApproval;
    }

    public PurchaseOrder(java.lang.String description,
    org.jbpm.examples.purchases.PurchaseOrderHeader header,
    java.util.List&lt;org.jbpm.examples.purchases.PurchaseOrderLine&gt; lines,
    java.lang.Double total, java.lang.Boolean requiresCFOApproval)
    {
    this.description = description;
    this.header = header;
    this.lines = lines;
    this.total = total;
    this.requiresCFOApproval = requiresCFOApproval;
    }

    public PurchaseOrder(
    java.util.List&lt;org.jbpm.examples.purchases.PurchaseOrderLine&gt; lines,
    org.jbpm.examples.purchases.PurchaseOrderHeader header)
    {
    this.lines = lines;
    this.header = header;
    }

    @Override
    public boolean equals(Object o)
    {
    if (this == o)
    return true;
    if (o == null || getClass() != o.getClass())
    return false;
    org.jbpm.examples.purchases.PurchaseOrder that = (org.jbpm.examples.purchases.PurchaseOrder) o;
    if (lines != null ? !lines.equals(that.lines) : that.lines != null)
    return false;
    if (header != null ? !header.equals(that.header) : that.header != null)
    return false;
    return true;
    }

    @Override
    public int hashCode()
    {
    int result = 17;
    result = 31 * result + (lines != null ? lines.hashCode() : 0);
    result = 31 * result + (header != null ? header.hashCode() : 0);
    return result;
    }

    }

  </programlisting>

  <para/>
</section>
