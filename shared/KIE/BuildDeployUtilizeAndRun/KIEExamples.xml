<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="./../../" xml:id="KIEExamplesSection" 
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd" 
  xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns2="http://www.w3.org/1998/Math/MathML" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Build,  Deploy and Utilize Examples</title>
  <para>The best way to learn the new build system is by example. The source project
    "drools-examples-api" contains a number of examples, and can be found at GitHub:</para>
  <para><link xlink:href="https://github.com/droolsjbpm/drools/tree/6.0.x/drools-examples-api"
      >https://github.com/droolsjbpm/drools/tree/6.0.x/drools-examples-api</link></para>
  <para>Each example is described below, the order starts with the simplest (most of the options are defaulted) and working
    its way up to more complex use cases.</para>
  <para>The Deploy use cases shown below all involve <code>mvn install</code>. Remote deployment of JARs in
    Maven is well covered in Maven literature. Utilize refers to the initial act of loading the
    resources and providing access to the KIE runtimes. Where as Run refers to the act of
    interacting with those runtimes.</para>
  
  <section> <title>Default KieSession</title>
    <itemizedlist>
      <listitem>
        <para>Project: default-kesession.</para>
      </listitem>
      <listitem>
        <para>Summary: Empty kmodule.xml KieModule on the classpath that includes all resources in a
          single default KieBase. The example shows the retrieval of the default KieSession from
          the classpath.</para>
      </listitem>
    </itemizedlist>
    <para>An empty kmodule.xml will produce a single KieBase that includes all files found under
      resources path, be it DRL, BPMN2, XLS etc. That single KieBase is the default and also
      includes a single default KieSession. Default means they can be created without knowing their
      names.</para>
    <example>
      <title>Author - kmodule.xml</title>
      <programlisting language="XML">
<![CDATA[<kmodule xmlns="http://www.drools.org/xsd/kmodule"> </kmodule>]]>
  </programlisting>
    </example>
    <example>
        <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>      
      </example>
    
    <para>ks.getKieClasspathContainer() returns the KieContainer that contains the KieBases deployed
      onto the environment classpath. kContainer.newKieSession() creates the default KieSession.
      Notice that you no longer need to look up the KieBase, in order to create the KieSession. The
      KieSession knows which KieBase it's associated with, and use that, which in this case is the
      default KieBase.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">
KieServices ks = KieServices.Factory.get();
KieContainer kContainer = ks.getKieClasspathContainer();

KieSession kSession = kContainer.newKieSession();
kSession.setGlobal("out", out);
kSession.insert(new Message("Dave", "Hello, HAL. Do you read me, HAL?"));
kSession.fireAllRules();                
      </programlisting>
    </example>
    <para/>
    <para/>
  </section>

<section><title>Named KieSession</title>
    <itemizedlist>
      <listitem>
        <para>Project: named-kiesession.</para>
      </listitem>
      <listitem>
        <para>Summary: kmodule.xml that has one named KieBase and one named KieSession. The examples
          shows the retrieval of the named KieSession from the classpath.</para>
      </listitem>
    </itemizedlist><para/>
    <para>kmodule.xml will produce a single named KieBase, 'kbase1' that includes all files found
      under resources path, be it DRL, BPMN2, XLS etc. KieSession 'ksession1' is associated with
      that KieBase and can be created by name.</para>
    <example>
      <title>Author - kmodule.xml</title>
      <programlisting language="XML"><![CDATA[<kmodule xmlns="http://www.drools.org/xsd/kmodule">
    <kbase name="kbase1">
        <ksession name="ksession1"/>
    </kbase>
</kmodule>]]></programlisting>
    </example>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>ks.getKieClasspathContainer() returns the KieContainer that contains the KieBases deployed
      onto the environment classpath. This time the KieSession uses the name 'ksession1'. You do not
      need to lookup the KieBase first, as it knows which KieBase 'ksession1' is assocaited
      with.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieContainer kContainer = ks.getKieClasspathContainer();

KieSession kSession = kContainer.newKieSession("ksession1");
kSession.setGlobal("out", out);
kSession.insert(new Message("Dave", "Hello, HAL. Do you read me, HAL?"));
kSession.fireAllRules();</programlisting>
    </example></section>
  <section>
    <title>KieBase Inheritence</title>
    <itemizedlist>
      <listitem>
        <para>Project: kiebase-inclusion.</para>
      </listitem>
      <listitem>
        <para>Summary: 'kmodule.xml' demonstrates that one KieBase can include the resources from
          another KieBase, from another KieModule. In this case it inherits the named KieBase from
          the 'name-kiesession' example. The included KieBase can be from the current KieModule or
          any other KieModule that is in the pom.xml dependency list.</para>
      </listitem>
    </itemizedlist>
    <para/>
    <para>kmodule.xml will produce a single named KieBase, 'kbase2' that includes all files found
      under resources path, be it DRL, BPMN2, XLS etc. Further it will include all the resources
      found from the KieBase 'kbase1', due to the use of the 'includes' attribute. KieSession
      'ksession2' is associated with that KieBase and can be created by name.</para>
    <example>
      <title>Author - kmodule.xml</title>
      <programlisting language="XML"><![CDATA[<kbase name="kbase2" includes="kbase1">
    <ksession name="ksession2"/>
</kbase>]]></programlisting>
    </example>
    <para>This example requires that the previous example, 'named-kiesession', is built and installed
      to the local Maven repository first. Once installed it can be included as a dependency, using
      the standard Maven &lt;dependencies&gt; element.</para>
    <example>
      <title>Author - pom.xml</title>
      <programlisting language="XML"><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.drools</groupId>
    <artifactId>drools-examples-api</artifactId>
    <version>6.0.0/version>
  </parent>

  <artifactId>kiebase-inclusion</artifactId>
  <name>Drools API examples - KieBase Inclusion</name>

  <dependencies>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-compiler</artifactId>
    </dependency>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>named-kiesession</artifactId>
      <version>6.0.0</version>
    </dependency>
  </dependencies>

</project>]]></programlisting>
    </example>
    <para>Once 'named-kiesession' is built and installed this example can be built and installed as
      normal. Again the act of installing, will force the unit tests to run, demonstrating the use
      case.</para>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>ks.getKieClasspathContainer() returns the KieContainer that contains the KieBases deployed
      onto the environment classpath. This time the KieSession uses the name 'ksession2'. You do not
      need to lookup the KieBase first, as it knows which KieBase 'ksession1' is assocaited with.
      Notice two rules fire this time, showing that KieBase 'kbase2' has included the resources from
      the dependency KieBase 'kbase1'.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieContainer kContainer = ks.getKieClasspathContainer();
KieSession kSession = kContainer.newKieSession("ksession2");
kSession.setGlobal("out", out);

kSession.insert(new Message("Dave", "Hello, HAL. Do you read me, HAL?"));
kSession.fireAllRules();

kSession.insert(new Message("Dave", "Open the pod bay doors, HAL."));
kSession.fireAllRules();</programlisting>
    </example>
  </section>
  <section>
    <title>Multiple KieBases</title>
    <itemizedlist>
      <listitem>
        <para>Project: 'multiple-kbases.</para>
      </listitem>
      <listitem>
        <para>Summary: Demonstrates that the 'kmodule.xml'  can contain any number of KieBase or
          KieSession declarations. Introduces the 'packages' attribute to select the folders for the
          resources to be included in the KieBase.</para>
      </listitem>
    </itemizedlist>
    <para>kmodule.xml produces 6 different named KieBases. 'kbase1' includes all resources from the
      KieModule. The other KieBases include resources from other selected folders, via the
      'packages' attribute. Note the use of wildcard '*', to select this package and all packages
      below it. </para>
    <example>
      <title>Author - kmodule.xml</title>
      <programlisting language="XML"><![CDATA[<kmodule xmlns="http://www.drools.org/xsd/kmodule">

  <kbase name="kbase1">
    <ksession name="ksession1"/>
  </kbase>

  <kbase name="kbase2" packages="org.some.pkg">
    <ksession name="ksession2"/>
  </kbase>

  <kbase name="kbase3" includes="kbase2" packages="org.some.pkg2">
    <ksession name="ksession3"/>
  </kbase>

  <kbase name="kbase4" packages="org.some.pkg, org.other.pkg">
    <ksession name="ksession4"/>
  </kbase>

  <kbase name="kbase5" packages="org.*">
    <ksession name="ksession5"/>
  </kbase>

  <kbase name="kbase6" packages="org.some.*">
    <ksession name="ksession6"/>
  </kbase>
</kmodule>]]></programlisting>
    </example>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>Only part of the example is included below, as there is a test method per KieSession, but
      each one is a repetition of the other, with different list expectations.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">@Test
public void testSimpleKieBase() {
    List&lt;Integer> list = useKieSession("ksession1");
    // no packages imported means import everything
    assertEquals(4, list.size());
    assertTrue( list.containsAll( asList(0, 1, 2, 3) ) );
}

//.. other tests for ksession2 to ksession6 here

private List&lt;Integer> useKieSession(String name) {
    KieServices ks = KieServices.Factory.get();
    KieContainer kContainer = ks.getKieClasspathContainer();
    KieSession kSession = kContainer.newKieSession(name);

    List&lt;Integer> list = new ArrayList&lt;Integer>();
    kSession.setGlobal("list", list);
    kSession.insert(1);
    kSession.fireAllRules();

    return list;
}</programlisting>
    </example>
  </section>
  <section>
    <title>KieContainer from KieRepository</title>
    <itemizedlist>
      <listitem>
        <para>Project: kcontainer-from-repository</para>
      </listitem>
      <listitem>
        <para>Summary: The project does not contain a kmodule.xml, nor does the pom.xml have any
          dependencies for other KieModules. Instead the Java code demonstrates the loading of a
          dynamic KieModule from a Maven repository. </para>
      </listitem>
    </itemizedlist>
    <para>The pom.xml must include kie-ci as a depdency, to ensure Maven is available at runtime.
      As this uses Maven under the hood you can also use the standard Maven settings.xml
      file.</para>
    <example>
      <title>Author - pom.xml</title>
      <programlisting language="XML"><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.drools</groupId>
    <artifactId>drools-examples-api</artifactId>
    <version>6.0.0</version>
  </parent>

  <artifactId>kiecontainer-from-kierepo</artifactId>
  <name>Drools API examples - KieContainer from KieRepo</name>

  <dependencies>
    <dependency>
      <groupId>org.kie</groupId>
      <artifactId>kie-ci</artifactId>
    </dependency>
  </dependencies>

</project>]]></programlisting>
    </example>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>In the previous examples the classpath KieContainer used. This example creates a dynamic
      KieContainer as specified by the  ReleaseId. The ReleaseId uses Maven conventions for group
      id, artifact id and version. It also obeys LATEST and SNAPSHOT for versions.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();

// Install example1 in the local Maven repo before to do this
KieContainer kContainer = ks.newKieContainer(ks.newReleaseId("org.drools", "named-kiesession", "6.0.0-SNAPSHOT"));

KieSession kSession = kContainer.newKieSession("ksession1");
kSession.setGlobal("out", out);

Object msg1 = createMessage(kContainer, "Dave", "Hello, HAL. Do you read me, HAL?");
kSession.insert(msg1);
kSession.fireAllRules();</programlisting>
    </example>
  </section>
  <section>
    <title>Default KieSession from File</title>
    <itemizedlist>
      <listitem>
        <para>Project: default-kiesession-from-file</para>
      </listitem>
      <listitem>
        <para>Summary: Dynamic KieModules can also be loaded from any Resource location. The loaded
          KieModule provides default KieBase and KieSession definitions.</para>
      </listitem>
    </itemizedlist>
    <para>No kmodue.xml file exists. The project 'default-kiesession' must be built first, so that
      the resulting JAR, in the target folder, can be referenced as a File.</para>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>Any KieModule can be loaded from a Resource location and added to the KieRepository. Once
      deployed in the KieRepository it can be resolved via its ReleaseId. Note neither Maven or kie-ci are
      needed here. It will not set up a transitive dependency parent classloader.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieRepository kr = ks.getRepository();

KieModule kModule = kr.addKieModule(ks.getResources().newFileSystemResource(getFile("default-kiesession")));

KieContainer kContainer = ks.newKieContainer(kModule.getReleaseId());

KieSession kSession = kContainer.newKieSession();
kSession.setGlobal("out", out);

Object msg1 = createMessage(kContainer, "Dave", "Hello, HAL. Do you read me, HAL?");
kSession.insert(msg1);
kSession.fireAllRules();</programlisting>
    </example>
  </section>
  <section>
    <title>Named KieSession from File</title>
    <itemizedlist>
      <listitem>
        <para>Project: named-kiesession-from-file</para>
      </listitem>
      <listitem>
        <para>Summary: Dynamic KieModules can also be loaded from any Resource location. The loaded
          KieModule provides named KieBase and KieSession definitions.</para>
      </listitem>
    </itemizedlist>
    <para>No kmodue.xml file exists. The project 'named-kiesession' must be built first, so that the
      resulting JAR, in the target folder, can be referenced as a File.</para>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>Any KieModule can be loaded from a Resource location and added to the KieRepository. Once
      in the KieRepository it can be resolved via its ReleaseId. Note neither Maven or kie-ci are
      needed here. It will not setup a transitive dependency parent classloader.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieRepository kr = ks.getRepository();

KieModule kModule = kr.addKieModule(ks.getResources().newFileSystemResource(getFile("named-kiesession")));

KieContainer kContainer = ks.newKieContainer(kModule.getReleaseId());

KieSession kSession = kContainer.newKieSession("ksession1");
kSession.setGlobal("out", out);

Object msg1 = createMessage(kContainer, "Dave", "Hello, HAL. Do you read me, HAL?");
kSession.insert(msg1);
kSession.fireAllRules();</programlisting>
    </example>
  </section>
  <section>
    <title>KieModule with Dependent KieModule</title>
    <itemizedlist>
      <listitem>
        <para>Project: kie-module-form-multiple-files</para>
      </listitem>
      <listitem>
        <para>Summary: Programmatically provide the list of dependant KieModules, without using Maven
          to resolve anything.</para>
      </listitem>
    </itemizedlist>
    <para>No kmodue.xml file exists. The projects 'named-kiesession' and 'kiebase-include' must be
      built first, so that the resulting JARs, in the target folders, can be referenced as
      Files.</para>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>Creates two resources. One is for the main KieModule 'exRes1' the other is for the
      dependency 'exRes2'. Even though kie-ci is not present and thus Maven is not available to resolve
      the dependencies, this shows how you can manually specify the dependent KieModules, for the
      vararg.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieRepository kr = ks.getRepository();

Resource ex1Res = ks.getResources().newFileSystemResource(getFile("kiebase-inclusion"));
Resource ex2Res = ks.getResources().newFileSystemResource(getFile("named-kiesession"));

KieModule kModule = kr.addKieModule(ex1Res, ex2Res);
KieContainer kContainer = ks.newKieContainer(kModule.getReleaseId());

KieSession kSession = kContainer.newKieSession("ksession2");
kSession.setGlobal("out", out);

Object msg1 = createMessage(kContainer, "Dave", "Hello, HAL. Do you read me, HAL?");
kSession.insert(msg1);
kSession.fireAllRules();

Object msg2 = createMessage(kContainer, "Dave", "Open the pod bay doors, HAL.");
kSession.insert(msg2);
kSession.fireAllRules();</programlisting>
    </example>
  </section>
  <section>
    <title>Programmaticaly build a Simple KieModule with Defaults</title>
    <itemizedlist>
      <listitem>
        <para>Project: kiemoduelmodel-example</para>
      </listitem>
      <listitem>
        <para>Summary: Programmaticaly buid a KieModule from just a single file. The POM and models
          are all defaulted. This is the quickest out of the box approach, but should not be added
          to a Maven repository.</para>
      </listitem>
    </itemizedlist>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>This programmatically builds a KieModule. It populates the model that represents the
      ReleaseId and  kmodule.xml, and it adds the relevant resources. A pom.xml is generated from
      the ReleaseId.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieRepository kr = ks.getRepository();
KieFileSystem kfs = ks.newKieFileSystem();

kfs.write("src/main/resources/org/kie/example5/HAL5.drl", getRule());

KieBuilder kb = ks.newKieBuilder(kfs);

kb.buildAll(); // kieModule is automatically deployed to KieRepository if successfully built.
if (kb.getResults().hasMessages(Level.ERROR)) {
    throw new RuntimeException("Build Errors:\n" + kb.getResults().toString());
}

KieContainer kContainer = ks.newKieContainer(kr.getDefaultReleaseId());

KieSession kSession = kContainer.newKieSession();
kSession.setGlobal("out", out);

kSession.insert(new Message("Dave", "Hello, HAL. Do you read me, HAL?"));
kSession.fireAllRules();</programlisting>
    </example>
  </section>
  <section>
    <title>Programmaticaly build a KieModule using Meta Models</title>
    <itemizedlist>
      <listitem>
        <para>Project: kiemoduelmodel-example</para>
      </listitem>
      <listitem>
        <para>Summary: Programmaticaly build a KieModule, by creating its kmodule.xml meta model
          resources. </para>
      </listitem>
    </itemizedlist>
    <example>
      <title>Build and Install - Maven</title>
      <programlisting>mvn install</programlisting>
    </example>
    <para>This programmatically builds a KieModule. It populates the model that represents the
      ReleaseId and  kmodule.xml, as well as add the relevant resources. A pom.xml is generated from
      the ReleaseId.</para>
    <example>
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieFileSystem kfs = ks.newKieFileSystem();

Resource ex1Res = ks.getResources().newFileSystemResource(getFile("named-kiesession"));
Resource ex2Res = ks.getResources().newFileSystemResource(getFile("kiebase-inclusion"));

ReleaseId rid = ks.newReleaseId("org.drools", "kiemodulemodel-example", "6.0.0-SNAPSHOT");
kfs.generateAndWritePomXML(rid);

KieModuleModel kModuleModel = ks.newKieModuleModel();
kModuleModel.newKieBaseModel("kiemodulemodel")
            .addInclude("kiebase1")
            .addInclude("kiebase2")
            .newKieSessionModel("ksession6");

kfs.writeKModuleXML(kModuleModel.toXML());
kfs.write("src/main/resources/kiemodulemodel/HAL6.drl", getRule());

KieBuilder kb = ks.newKieBuilder(kfs);
kb.setDependencies(ex1Res, ex2Res);
kb.buildAll(); // kieModule is automatically deployed to KieRepository if successfully built.
if (kb.getResults().hasMessages(Level.ERROR)) {
    throw new RuntimeException("Build Errors:\n" + kb.getResults().toString());
}

KieContainer kContainer = ks.newKieContainer(rid);

KieSession kSession = kContainer.newKieSession("ksession6");
kSession.setGlobal("out", out);

Object msg1 = createMessage(kContainer, "Dave", "Hello, HAL. Do you read me, HAL?");
kSession.insert(msg1);
kSession.fireAllRules();

Object msg2 = createMessage(kContainer, "Dave", "Open the pod bay doors, HAL.");
kSession.insert(msg2);
kSession.fireAllRules();

Object msg3 = createMessage(kContainer, "Dave", "What's the problem?");
kSession.insert(msg3);
kSession.fireAllRules();</programlisting>
    </example>
  </section>

</section>
