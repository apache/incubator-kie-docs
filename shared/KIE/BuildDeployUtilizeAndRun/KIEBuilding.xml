<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="./../../" xml:id="KIEBuildingSection"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xmlns="http://docbook.org/ns/docbook" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Building</title>

  <figure>
    <title>org.kie.api.core.builder</title>

    <mediaobject>
      <imageobject>
        <!-- HACK remove me when https://issues.jboss.org/browse/PRESSGANG-81 is fixed -->
        <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/builder.png" width="75%"/>
      </imageobject>
    </mediaobject>
  </figure>

  <section xml:id="creatingAndBuildingAKieProject">
    <title>Creating and building a Kie Project</title>

    <para>A Kie Project has the structure of a normal Maven project with the only peculiarity
    of including a kmodule.xml file defining in a declaratively way the <code>KieBase</code>s
    and <code>KieSession</code>s that can be created from it. This file has to be placed in the
    resources/META-INF folder of the Maven project while all the other Kie artifacts, such as
    DRL or a Excel files, must be stored in the resources folder or in any other subfolder under it.</para>

    <para>Since meaningful defaults have been provided for all configuration aspects, the simplest
    kmodule.xml file can contain just an empty kmodule tag like the following:</para>

    <example>
      <title>An empty kmodule.xml file</title>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;kmodule xmlns="http://www.drools.org/xsd/kmodule"/&gt;</programlisting>
    </example>

    <para>In this way the kmodule will contain one single default <code>KieBase</code>. All Kie
      assets stored under the resources folder, or any of its subfolders, will be compiled and added
      to it. To trigger the building of these artifacts it is enough to create a
        <code>KieContainer</code> for them.</para>

    <figure>
      <title>KieContainer</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieContainer.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>For this simple case it is enough to create a <code>KieContainer</code> that reads the
      files to be built from the classpath:</para>

    <example>
      <title>Creating a KieContainer from the classpath</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
KieContainer kContainer = kieServices.getKieClasspathContainer();</programlisting>
    </example>

    <para><code>KieServices</code> is the interface from where it possible to access all the Kie
      building and runtime facilities:</para>

    <figure>
      <title>KieServices</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieServices.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In this way all the Java sources and the Kie resources are compiled and deployed into
    the KieContainer which makes its contents available for use at runtime.</para>
  </section>

  <section xml:id="theKmoduleXmlFile">
    <title>The kmodule.xml file</title>

    <para>As explained in the former section, the kmodule.xml file is the place where it is possible
    to declaratively configure the <code>KieBase</code>(s) and <code>KieSession</code>(s) that can be
    created from a KIE project.</para>

    <para>In particular a <code>KieBase</code> is a repository of all the application's knowledge definitions.
    It will contain rules, processes, functions, and type models. The <code>KieBase</code> itself does not contain
    data; instead, sessions are created from the <code>KieBase</code> into which data can be inserted and from
    which process instances may be started. Creating the <code>KieBase</code> can be heavy, whereas session
    creation is very light, so it is recommended that <code>KieBase</code> be cached where possible to allow
    for repeated session creation. However end-users usually shouldn't worry about it, because this caching
    mechanism is already automatically provided by the <code>KieContainer</code>.</para>

    <figure>
      <title>KieBase</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieBase.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Conversely the <code>KieSession</code> stores and executes on the runtime data.
    It is created from the <code>KieBase</code> or more easily can be created directly from the
    <code>KieContainer</code> if it has been defined in the kmodule.xml file</para>

    <figure>
      <title>KieSession</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieSession.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The kmodule.xml allows to define and configure one or more <code>KieBase</code>s and for each
    <code>KieBase</code> all the different <code>KieSession</code>s that can be created from it,
    as showed by the follwing example:</para>

    <example>
      <title>A sample kmodule.xml file</title>

      <programlisting language="xml">&lt;kmodule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://www.drools.org/xsd/kmodule"&gt;
  &lt;configuration&gt;
    &lt;property key="drools.evaluator.supersetOf" value="org.mycompany.SupersetOfEvaluatorDefinition"/&gt;
  &lt;/configuration&gt;
  &lt;kbase name="KBase1" default="true" eventProcessingMode="cloud" equalsBehavior="equality" declarativeAgenda="enabled" packages="org.domain.pkg1"&gt;
    &lt;ksession name="KSession2_1" type="stateful" default="true"/&gt;
    &lt;ksession name="KSession2_2" type="stateless" default="false" beliefSystem="jtms"/&gt;
  &lt;/kbase&gt;
  &lt;kbase name="KBase2" default="false" eventProcessingMode="stream" equalsBehavior="equality" declarativeAgenda="enabled" packages="org.domain.pkg2, org.domain.pkg3" includes="KBase1"&gt;
    &lt;ksession name="KSession3_1" type="stateful" default="false" clockType="realtime"&gt;
      &lt;fileLogger file="drools.log" threaded="true" interval="10"/&gt;
      &lt;workItemHandlers&gt;
        &lt;workItemHandler name="name" type="org.domain.WorkItemHandler"/&gt;
      &lt;/workItemHandlers&gt;
      &lt;listeners&gt;
        &lt;ruleRuntimeEventListener type="org.domain.RuleRuntimeListener"/&gt;
        &lt;agendaEventListener type="org.domain.FirstAgendaListener"/&gt;
        &lt;agendaEventListener type="org.domain.SecondAgendaListener"/&gt;
        &lt;processEventListener type="org.domain.ProcessListener"/&gt;
      &lt;/listeners&gt;
    &lt;/ksession&gt;
  &lt;/kbase&gt;
&lt;/kmodule&gt;</programlisting>
    </example>

    <para>Here the &lt;configuration&gt; tag contains a list of key-value pairs that are the optional properties
    used to configure the <code>KieBase</code>s building process. For instance this sample kmodule.xml file defines
    an additional custom operator named <code>supersetOf</code> and implemented by the
    <code>org.mycompany.SupersetOfEvaluatorDefinition</code> class.</para>

    <para>After this 2 <code>KieBase</code>s have been defined and it is possible to instance 2 different types of
    <code>KieSession</code>s from the first one, while only one from the second. A list of the attributes that
    can be defined on the kbase tag, together with their meaning and default values follows:</para>

    <table>
      <title>kbase Attributes</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Attribute name</entry>
            <entry align="center">Default value</entry>
            <entry align="center">Admitted values</entry>
            <entry align="center">Meaning</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>
            <entry>none</entry>
            <entry>any</entry>
            <entry>The name with which retrieve this KieBase from the KieContainer.
            This is the only mandatory attribute.</entry>
          </row>

          <row>
            <entry>includes</entry>
            <entry>none</entry>
            <entry>any comma separated list</entry>
            <entry>A comma separated list of other KieBases contained in this kmodule.
            The artifacts of all these KieBases will be also included in this one.</entry>
          </row>

          <row>
            <entry>packages</entry>
            <entry>all</entry>
            <entry>any comma separated list</entry>
            <entry>By default all the Drools artifacts under the resources folder,
            at any level, are included into the KieBase. This attribute allows to limit
            the artifacts that will be compiled in this KieBase to only the ones
            belonging to the list of packages.</entry>
          </row>

          <row>
            <entry>default</entry>
            <entry>false</entry>
            <entry>true, false</entry>
            <entry>Defines if this KieBase is the default one for this module, so
            it can be created from the KieContainer without passing any name to it.
            There can be at most one default KieBase in each module.</entry>
          </row>

          <row>
            <entry>equalsBehavior</entry>
            <entry>identity</entry>
            <entry>identity, equality</entry>
            <entry>Defines the behavior of Drools when a new fact is inserted into the
            Working Memory. With identity it always create a new FactHandle unless the same
            object isn't already present in the Working Memory, while with equality only if
            the newly inserted object is not equal (according to its equal method) to an already
            existing fact.</entry>
          </row>

          <row>
            <entry>eventProcessingMode</entry>
            <entry>cloud</entry>
            <entry>cloud, stream</entry>
            <entry>When compiled in cloud mode the KieBase treats events as normal facts, while
            in stream mode allow temporal reasoning on them.</entry>
          </row>

          <row>
            <entry>declarativeAgenda</entry>
            <entry>disabled</entry>
            <entry>disabled, enabled</entry>
            <entry>Defines if the Declarative Agenda is enabled or not.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Similarly all attributes of the ksession tag (except of course the name)
    have meaningful default. They are listed and described in the following table:</para>

    <table>
      <title>ksession Attributes</title>

      <tgroup cols="4">
        <thead>
          <row>
            <entry align="center">Attribute name</entry>
            <entry align="center">Default value</entry>
            <entry align="center">Admitted values</entry>
            <entry align="center">Meaning</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>
            <entry>none</entry>
            <entry>any</entry>
            <entry>Unique name of this KieSession. Used to fetch the KieSession from the KieContainer.
            This is the only mandatory attribute.</entry>
          </row>

          <row>
            <entry>type</entry>
            <entry>stateful</entry>
            <entry>stateful, stateless</entry>
            <entry>A stateful session allows to iteratively work with the Working Memory,
            while a stateless one is a one-off execution of a Working Memory with a provided data set.</entry>
          </row>

          <row>
            <entry>default</entry>
            <entry>false</entry>
            <entry>true, false</entry>
            <entry>Defines if this KieSession is the default one for this module, so
            it can be created from the KieContainer without passing any name to it.
            In each module there can be at most one default KieSession for each type.</entry>
          </row>

          <row>
            <entry>clockType</entry>
            <entry>realtime</entry>
            <entry>realtime, pseudo</entry>
            <entry>Defines if events timestamps are determined by the system clock or by
            a psuedo clock controlled by the application. This clock is specially useful for
            unit testing temporal rules.</entry>
          </row>

          <row>
            <entry>beliefSystem</entry>
            <entry>simple</entry>
            <entry>simple, jtms, defeasible</entry>
            <entry>Defines the type of belief system used by the KieSession.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>As outlined in the former kmodule.xml sample, it is also possible to declaratively
    create on each <code>KieSession</code> a file (or a console) logger, one or more
    <code>WorkItemHandler</code>s and some listeners that can be of 3 different types:
    ruleRuntimeEventListener, agendaEventListener and processEventListener</para>

    <para>Having defined a kmodule.xml like the one in the former sample, it is now possible
    to simply retrieve the KieBases and KieSessions from the KieContainer using their names.</para>

    <example>
      <title>Retriving KieBases and KieSessions from the KieContainer</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
KieContainer kContainer = kieServices.getKieClasspathContainer();

KieBase kBase1 = kContainer.getKieBase("KBase1");
KieSession kieSession1 = kContainer.newKieSession("KSession2_1");
StatelessKieSession kieSession2 = kContainer.newStatelessKieSession("KSession2_2");</programlisting>
    </example>

    <para>It has to be noted that since KSession2_1 and KSession2_2 are of 2 different types
    (the first is stateful, while the second is stateless) it is necessary to invoke 2 different methods on the
    <code>KieContainer</code> according to their declared type. If the type of the <code>KieSession</code>
    requested to the <code>KieContainer</code> doesn't correspond with the one declared in the
    kmodule.xml file the <code>KieContainer</code> will throw a <code>RuntimeException</code>.
    Also since a <code>KieBase</code> and a <code>KieSession</code> have been flagged as default
    is it possible to get them from the <code>KieContainer</code> without passing any name.</para>

    <example>
      <title>Retriving default KieBases and KieSessions from the KieContainer</title>

      <programlisting language="java">KieContainer kContainer = ...

KieBase kBase1 = kContainer.getKieBase(); // returns KBase1
KieSession kieSession1 = kContainer.newKieSession(); // returns KSession2_1</programlisting>
    </example>

    <para>Since a Kie project is also a Maven project the groupId, artifactId and version declared
    in the pom.xml file are used to generate a <code>ReleaseId</code> that uniquely identifies
    this project inside your application. This allows creation of a new KieContainer from the
    project by simply passing its <code>ReleaseId</code> to the <code>KieServices</code>.</para>

    <example>
      <title>Creating a KieContainer of an existing project by ReleaseId</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
ReleaseId releaseId = kieServices.newReleaseId( "org.acme", "myartifact", "1.0" );
KieContainer kieContainer = kieServices.newKieContainer( releaseId );</programlisting>
    </example>
  </section>

  <section xml:id="buildingWithMaven">
    <title>Building with Maven</title>
    <para>
      The KIE plugin for Maven ensures that artifact resources are validated and pre-compiled, it is recommended that this is used at all times. To use the plugin simply add it to the build
      section of the Maven pom.xml
     </para>
    
    <example>
      <title>Adding the KIE plugin to a Maven pom.xml</title>
      <programlisting language="XML">
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.kie&lt;/groupId&gt;
        &lt;artifactId&gt;kie-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;        
      </programlisting>
    </example>
    
    <para>Building a KIE module without the Maven plugin will copy all the resources, as is, into the resulting JAR.
      When that JAR is loaded by the runtime, it will attempt to build all the resources then.  If there are compilation
      issues it will return a null KieContainer. It also pushes the compilation overhead to the runtime. In general this
      is not recommended, and the Maven plugin should always be used. </para>
  </section>
  
  <section xml:id="definingAKieModuleProgrammatically">
    <title>Defining a KieModule programmatically</title>

    <para>It is also possible to define the <code>KieBase</code>s and <code>KieSession</code>s
    belonging to a KieModule programmatically instead of the declarative definition in the
    kmodule.xml file. The same programmatic API also allows in explicitly adding the file containing the
    Kie artifacts instead of automatically read them from the resources folder of your project.
    To do that it is necessary to create a <code>KieFileSystem</code>, a sort of virtual file
    system, and add all the resources contained in your project to it.</para>

    <figure>
      <title>KieFileSystem</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieFileSystem.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Like all other Kie core components you can obtain an instance of the <code>KieFileSystem</code> from
    the <code>KieServices</code>. The kmodule.xml configuration file must be added to the filesystem. This is a
    mandatory step. Kie also provides a convenient fluent API, implemented by the <code>KieModuleModel</code>,
      to programmatically create this file.</para>

    <figure>
      <title>KieModuleModel</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieModuleModel.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>To do this in practice it is necessary to create a <code>KieModuleModel</code> from the
    <code>KieServices</code>, configure it with the desired <code>KieBase</code>s and
    <code>KieSession</code>s, convert it in XML and add the XML to the <code>KieFileSystem</code>.
    This process is shown by the following example:</para>

    <example>
      <title>Creating a kmodule.xml programmatically and adding it to a KieFileSystem</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
KieModuleModel kieModuleModel = kieServices.newKieModuleModel();

KieBaseModel kieBaseModel1 = kieModuleModel.newKieBaseModel( "KBase1 ")
        .setDefault( true )
        .setEqualsBehavior( EqualityBehaviorOption.EQUALITY )
        .setEventProcessingMode( EventProcessingOption.STREAM );

KieSessionModel ksessionModel1 = kieBaseModel1.newKieSessionModel( "KSession1" )
        .setDefault( true )
        .setType( KieSessionModel.KieSessionType.STATEFUL )
        .setClockType( ClockTypeOption.get("realtime") );

KieFileSystem kfs = kieServices.newKieFileSystem();
kfs.writeKModuleXML(kieModuleModel.toXML());</programlisting>
    </example>

    <para>At this point it is also necessary to add to the <code>KieFileSystem</code>, through its
    fluent API, all others Kie artifacts composing your project. These artifacts have to be added
    in the same position of a corresponding usual Maven project.</para>

    <example>
      <title>Adding Kie artifacts to a KieFileSystem</title>

      <programlisting language="java">KieFileSystem kfs = ...
kfs.write( "src/main/resources/KBase1/ruleSet1.drl", stringContainingAValidDRL )
        .write( "src/main/resources/dtable.xls",
                kieServices.getResources().newInputStreamResource( dtableFileStream ) );</programlisting>
    </example>

    <para>This example shows that it is possible to add the Kie artifacts both as plain Strings and
    as <code>Resource</code>s. In the latter case the <code>Resource</code>s can be created by the
    <code>KieResources</code> factory, also provided by the <code>KieServices</code>. The
    <code>KieResources</code> provides many convenient factory methods to convert an <code>InputStream</code>,
    a <code>URL</code>, a <code>File</code>, or a <code>String</code> representing a path of your file
    system to a <code>Resource</code> that can be managed by the <code>KieFileSystem</code>.</para>

    <figure>
      <title>KieResources</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieResources.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Normally the type of a <code>Resource</code> can be inferred from the extension of the name
    used to add it to the <code>KieFileSystem</code>. However it also possible to not follow the Kie
    conventions about file extensions and explicitly assign a specific <code>ResourceType</code>
    to a <code>Resource</code> as shown below:</para>

    <example>
      <title>Creating and adding a Resource with an explicit type</title>

      <programlisting language="java">KieFileSystem kfs = ...
kfs.write( "src/main/resources/myDrl.txt",
           kieServices.getResources().newInputStreamResource( drlStream )
                      .setResourceType(ResourceType.DRL) );</programlisting>
    </example>

    <para>Add all the resources to the <code>KieFileSystem</code> and build it by passing the <code>KieFileSystem</code>
    to a <code>KieBuilder</code></para>

    <figure>
      <title>KieBuilder</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieBuilder.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>When the contents of a <code>KieFileSystem</code> are successfully built, the resulting <code>KieModule</code>
    is automatically added to the <code>KieRepository</code>.
    The <code>KieRepository</code> is a singleton acting as a repository for all the available <code>KieModule</code>s.</para>

    <figure>
      <title>KieRepository</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/BuildDeployUtilizeAndRun/KieRepository.png"
                     format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>After this it is possible to create through the <code>KieServices</code> a new
    <code>KieContainer</code> for that <code>KieModule</code> using its <code>ReleaseId</code>. However,
    since in this case the <code>KieFileSystem</code> doesn't contain any pom.xml file (it is possible to
    add one using the <code>KieFileSystem.writePomXML</code> method), Kie cannot determine the
    <code>ReleaseId</code> of the <code>KieModule</code> and assign to it a default one. This
    default <code>ReleaseId</code> can be obtained from the <code>KieRepository</code> and used
    to identify the <code>KieModule</code> inside the <code>KieRepository</code> itself.
    The following example shows this whole process.</para>

    <example>
      <title>Building the contents of a KieFileSystem and creating a KieContainer</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
KieFileSystem kfs = ...
kieServices.newKieBuilder( kfs ).buildAll();
KieContainer kieContainer = kieServices.newKieContainer(kieServices.getRepository().getDefaultReleaseId());</programlisting>
    </example>

    <para>At this point it is possible to get <code>KieBase</code>s and create new <code>KieSession</code>s
    from this <code>KieContainer</code> exactly in the same way as in the case of a <code>KieContainer</code>
    created directly from the classpath.</para>

    <para>It is a best practice to check the compilation results. The <code>KieBuilder</code>
    reports compilation results of 3 different severities: ERROR, WARNING and INFO. An ERROR
    indicates that the compilation of the project failed and in the case no <code>KieModule</code> is
    produced and nothing is added to the <code>KieRepository</code>. WARNING and INFO results
    can be ignored, but are available for inspection.</para>

    <example>
      <title>Checking that a compilation didn't produce any error</title>

      <programlisting language="java">KieBuilder kieBuilder = kieServices.newKieBuilder( kfs ).buildAll();
assertEquals( 0, kieBuilder.getResults().getMessages( Message.Level.ERROR ).size() );</programlisting>
    </example>
  </section>

  <section xml:id="changingTheDefaultBuildResultSeverity">
    <title>Changing the Default Build Result Severity</title>

    <para>In some cases, it is possible to change the default severity of a
    type of build result. For instance, when a new rule with the same name
    of an existing rule is added to a package, the default behavior is to
    replace the old rule by the new rule and report it as an INFO. This is
    probably ideal for most use cases, but in some deployments the user
    might want to prevent the rule update and report it as an error.</para>

    <para>Changing the default severity for a result type, configured
    like any other option in Drools, can be done by API
    calls, system properties or configuration files. As of this version,
    Drools supports configurable result severity for rule updates and function
    updates. To configure it using system properties or configuration files,
    the user has to use the following properties:</para>

    <example>
      <title>Setting the severity using properties</title>

      <programlisting>// sets the severity of rule updates
drools.kbuilder.severity.duplicateRule = &lt;INFO|WARNING|ERROR&gt;
// sets the severity of function updates
drools.kbuilder.severity.duplicateFunction = &lt;INFO|WARNING|ERROR&gt;</programlisting>
    </example>
  </section>
</section>

