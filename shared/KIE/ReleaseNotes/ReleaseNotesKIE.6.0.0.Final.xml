<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="../../" xml:id="kie.ReleaseNotesKIE.6.0.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>New and Noteworthy in KIE API 6.0.0</title>
  <section>
    <title>New KIE name</title>
    <para>KIE is the new umbrella name used to group together our related projects; as the family continues to grow. KIE
      is also used for the generic parts of unified API; such as building, deploying and loading. This replaces the
      droolsjbpm and knowledge keywords that would have been used before. </para>
    <figure>
      <title>KIE Anatomy</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/kie/Overview/kie.png"/>
        </imageobject>
      </mediaobject>
    </figure>    
  </section>
  <section>
    <title>Maven aligned projects and modules and Maven Deployment</title>
    <para>One of the biggest complaints during the 5.x series was the lack of defined methodology for deployment. The
      mechanism used by Drools and jBPM was very flexible, but it was too flexible. A big focus for 6.0 was streamlining
      the build, deploy and loading (utilization) aspects of the system. Building and deploying activities are now aligned
      with Maven and Maven repositories. The utilization for loading rules and processess is now convention and configuration oriented,
      instead of programmatic, with sane defaults to minimise the configuration.</para>
    <para>Projects can be built with Maven and installed to the local M2_REPO or remote Maven repositories. Maven is
      then used to declare and build the classpath of dependencies, for KIE to access.</para>
  </section>
  <section>
    <title>Configuration and convention based projects</title>
    <para>The 'kmodule.xml' provides declarative configuration for KIE projects. Conventions and defaults are used to
      reduce the amount of configuration needed. </para>
    <example>
      <title>Declare KieBases and KieSessions</title>
      <programlisting language="xml">&lt;kmodule xmlns="http://www.drools.org/xsd/kmodule"&gt;
  &lt;kbase name="kbase1" packages="org.mypackages"&gt;
    &lt;ksession name="ksession1"/&gt;
  &lt;/kbase&gt;
&lt;/kmodule&gt;</programlisting>
    </example>
    <example>
      <title>Utilize the KieSession</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieContainer kContainer = ks.getKieClasspathContainer();

KieSession kSession = kContainer.newKieSession("ksession1");
kSession.insert(new Message("Dave", "Hello, HAL. Do you read me, HAL?"));
kSession.fireAllRules();</programlisting>
    </example>
  </section>
  <section>
    <title>KieBase Inclusion</title>
    <para>It is possible to include all the KIE artifacts belonging to a KieBase into a second KieBase. This means that
      the second KieBase, in addition to all the rules, function and processes directly defined into it,  will also contain the
      ones created in the included KieBase. This inclusion can be done declaratively in the kmodule.xml file</para>
    <example>
      <title>Including a KieBase into another declaratively</title>
      <programlisting language="xml">&lt;kmodule xmlns="http://www.drools.org/xsd/kmodule"&gt;
  &lt;kbase name="kbase2" includes="kbase1"&gt;
    &lt;ksession name="ksession2"/&gt;
  &lt;/kbase&gt;
&lt;/kmodule&gt;</programlisting>
    </example>
    <para>or programmatically using the <code>KieModuleModel</code>.</para>
    <example>
      <title>Including a KieBase into another programmatically</title>
      <programlisting language="java">KieModuleModel kmodule = KieServices.Factory.get().newKieModuleModel();
KieBaseModel kieBaseModel1 = kmodule.newKieBaseModel("KBase2").addInclude("KBase1");</programlisting>
    </example>
  </section>
  <section>
    <title>KieModules, KieContainer and KIE-CI</title>
    <para>Any Maven produced JAR with a 'kmodule.xml' in it is considered a KieModule. This can be loaded from the
      classpath or dynamically at runtime from a Resource location. If the kie-ci dependency is on the classpath it
      embeds Maven and all resolving is done automatically using Maven and can access local or remote repositories.
      Settings.xml is obeyed for Maven configuration.</para>
    <para>The KieContainer provides a runtime to utilize the KieModule, versioning is built in throughout, via Maven.
      Kie-ci will create a classpath dynamically from all the Maven declared dependencies for the artifact being loaded.
      Maven LATEST, SNAPSHOT, RELEASE and version ranges are supported.</para>
    <example xmlns:ns2="http://www.w3.org/1998/Math/MathML">
      <title>Utilize and Run - Java</title>
      <programlisting language="JAVA">KieServices ks = KieServices.Factory.get();
KieContainer kContainer = ks.newKieContainer(
        ks.newReleaseId("org.mygroup", "myartefact", "1.0") );

KieSession kSession = kContainer.newKieSession("ksession1");
kSession.insert(new Message("Dave", "Hello, HAL. Do you read me, HAL?"));
kSession.fireAllRules();</programlisting>
    </example>
    <para>KieContainers can be dynamically updated to a specific version, and resolved through Maven if KIE-CI is on the
      classpath. For stateful KieSessions the existing sessions are incrementally updated.</para>
    <example xmlns:ns2="http://www.w3.org/1998/Math/MathML">
      <title>Dynamically Update - Java</title>
      <programlisting language="JAVA">KieContainer kContainer.updateToVersion(
                ks.newReleaseId("org.mygroup", "myartefact", "1.1") );</programlisting>
    </example>
  </section>

  <section>
    <title>KieScanner</title>

    <para>The <code>KieScanner</code> is a Maven-oriented replacement of the KnowledgeAgent
    present in Drools 5. It continuously monitors your Maven repository
    to check if a new release of a Kie project has been installed and if so, deploys it in
    the <code>KieContainer</code> wrapping that project. The use of the <code>KieScanner</code>
    requires kie-ci.jar to be on the classpath.</para>

    <para>A <code>KieScanner</code> can be registered on a <code>KieContainer</code>
    as in the following example.</para>

    <example>
      <title>Registering and starting a KieScanner on a KieContainer</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
ReleaseId releaseId = kieServices.newReleaseId( "org.acme", "myartifact", "1.0-SNAPSHOT" );
KieContainer kContainer = kieServices.newKieContainer( releaseId );
KieScanner kScanner = kieServices.newKieScanner( kContainer );

// Start the KieScanner polling the Maven repository every 10 seconds
kScanner.start( 10000L );</programlisting>
    </example>

    <para>In this example the <code>KieScanner</code> is configured to run with a fixed
    time interval, but it is also possible to run it on demand by invoking the
    <code>scanNow()</code> method on it. If the <code>KieScanner</code> finds, in the
    Maven repository, an updated version of the Kie project used by that <code>KieContainer</code>
    it automatically downloads the new version and triggers an incremental build of the new
    project. From this moment all the new <code>KieBase</code>s and <code>KieSession</code>s
    created from that <code>KieContainer</code> will use the new project version.</para>
  </section>

  <section>
    <title>Hierarchical ClassLoader</title>
    <para>The CompositeClassLoader is no longer used; as it was a constant source of performance problems and bugs.
      Traditional hierarchical classloaders are now used. The root classloader is at the KieContext level, with
      one child ClassLoader per namespace. This makes it cleaner to add and remove rules, but there can now be no
      referencing between namespaces in DRL files; i.e. functions can only be used by the namespaces that declared them.
      The recommendation is to use static Java methods in your project, which is visible to all namespaces; but those
      cannot (like other classes on the root KieContainer ClassLoader) be dynamically updated.</para>
  </section>
  <section>
    <title>Legacy API Adapter</title>
    <para>The 5.x API for building and running with Drools and jBPM is still available through Maven dependency
      "knowledge-api-legacy5-adapter". Because the nature of deployment has significantly changed in 6.0, it was not
      possible to provide an adapter bridge for the KnowledgeAgent. If any other methods are missing or problematic,
      please open a JIRA, and we'll fix for 6.1</para>
  </section>
  <section>
    <title>KIE Documentation</title>
    <para> While a lot of new documentation has been added for working with the new KIE API, the entire documentation
      has not yet been brought up to date. For this reason there will be continued references to old terminologies.
      Apologies in advance, and thank you for your patience. We hope those in the community will work with us to get the
      documentation updated throughout, for 6.1</para>
  </section>
</section>
