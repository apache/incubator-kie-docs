<?xml version="1.0" encoding="UTF-8"?><section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="remote.additional" xml:base="../" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
  <title>Additional Information</title>
  <section xml:id="_rest_serialization_jaxb_or_json">
    <title>REST Serialization: JAXB or JSON</title>
    <simpara>Except for the <link linkend="remote.rest.execute">Execute calls</link>, all other REST calls described
      below can use either JAXB or JSON.</simpara>
    <simpara>All REST calls, unless otherwise specified, use JAXB serialization.</simpara>
    <simpara>When using JSON, make sure to add the JSON media type (<literal>"application/json"</literal>) to the
      <literal>ACCEPT</literal> header of your REST call.</simpara>
  </section>
  <section xml:id="remote.serialization.user.classes">
    <title>Sending and receiving user class instances</title>
    <simpara>Sometimes, users may wish to pass instances of their own classes as parameters to
      commands sent in a REST or Webservice request or JMS message. In order to do this, there are a
      number of requirements.</simpara>
    <itemizedlist>
      <listitem>
        <simpara>The user-defined class satisfy the following in order to be property serialized
          and deserialized:</simpara>
        <itemizedlist>
          <listitem>
            <simpara>It should be possible to serialize and deserialize the user-defined class using JAXB.  For
              simple custom classes, this might be available out-of-the-box, but for more complex types, this
              might mean the classes need to be correctly annotated with JAXB annotations, including the
              following:</simpara>
            <itemizedlist>
              <listitem>
                <simpara>The user-defined class must be annotated with a <literal>javax.xml.bind.annotation.XmlRootElement</literal>
                  annotation with a non-empty <literal>name</literal> value</simpara>
              </listitem>
              <listitem>
                <simpara>All fields or getter/setter methods must be annotated with a
                  <literal>javax.xml.bind.annotation.XmlElement</literal> or <literal>javax.xml.bind.annotation.XmlAttribute</literal> annotations.</simpara>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <simpara>Furthermore, the following usage of JAXB annotations is recommended:</simpara>
            <itemizedlist>
              <listitem>
                <simpara>Annotate the user-defined class with a <literal>javax.xml.bind.annotation.XmlAccessorType</literal> annotation
                  specifying that fields should be used, (<literal>javax.xml.bind.annotation.XmlAccessType.FIELD</literal>). This
                  also means that you should annotate the fields (instead of the getter or setter methods)
                  with <literal>@XmlElement</literal> or <literal>@XmlAttribute</literal> annotations.</simpara>
              </listitem>
              <listitem>
                <simpara>Fields annotated with <literal>@XmlElement</literal> or <literal>@XmlAttribute</literal> annotations should also be annotated with
                  <literal>javax.xml.bind.annotation.XmlSchemaType</literal> annotations specifying the type of the field, even
                  if the fields contain primitive values.</simpara>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <simpara>Use objects to store primitive values. For example, use the <literal>java.lang.Integer</literal> class for
              storing an integer value, and not the <literal>int</literal> class. This way it will always be obvious if the
              field is storing a value.</simpara>
          </listitem>
          <listitem>
            <simpara>The user-defined class definition must implement a no-arg constructor.</simpara>
          </listitem>
          <listitem>
            <simpara>Any fields in the user-defined class must either be object primitives (such as a <literal>Long</literal> or
              <literal>String</literal>) or otherwise be objects that satisfy the same requiremends in this list (correct
              usage of JAXB annotations and a no-arg constructor).</simpara>
          </listitem>
          <listitem>
            <simpara>The class definition must be included in the deployment jar (kjar) of the deployment that the
              command (request) is sent to.</simpara>
          </listitem>
          <listitem>
            <simpara>The sender must pass the deployment id in the header of the request. This property is necessary
              to able to load the proper classes from the deployment itself before deserializing the message
              on the server side.</simpara>
            <itemizedlist>
              <listitem>
                <simpara>For REST requests, this means that the "Kie-Deployment-Id" header property
                  must be set.</simpara>
              </listitem>
              <listitem>
                <simpara>For JMS messages, the <literal>deploymentId</literal> string property on the JMS text message must be set.</simpara>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <note>
      <title>Retrieving process variables</title>
      <simpara>While <emphasis>submitting</emphasis> an instance of a user-defined class is possible via both the JMS and REST API,
        <emphasis>retrieving</emphasis> an instance of the process variable is only possible via the REST API.</simpara>
    </note>
  </section>
  <section xml:id="_including_the_deployment_id">
    <title>Including the deployment id</title>
    <simpara>When interacting with the Remote API, users may want to pass instances of their own classes as parameters
      to certain operations. As mThis will only be possible if the KJar for a deployment includes these classes.</simpara>
    <simpara>REST calls that involve the <literal>TaskService</literal> (e.g. that start with <literal>/task</literal>..), often do not
      contain any information about the associated deployment. In that case, an extra query parameter will have to be
      added to the REST call so that the server can find the appropriate deployment with the class (definition) and
      correctly deserialize the information passed with the call.</simpara>
    <simpara>For these REST calls which do not contain the deployment id, youâ€™ll need to add the following parameter:</simpara>
    <table frame="all" rowsep="1" colsep="1">
      <title>Deployment id query parameter</title>
      <tgroup cols="2">
        <colspec colname="col_1" colwidth="*"/>
        <colspec colname="col_2" colwidth="*"/>
        <thead>
          <row>
            <entry align="left" valign="top">Parameter name</entry>
            <entry align="left" valign="top">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry align="left" valign="top">
              <simpara>deploymentId</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Value (must match the regex <literal>[a-zA-Z0-9-:\.]+</literal>) specifies the deployment which contains
                the user-defined class(es) needed to correctly deserialze information passed in the call</simpara>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section xml:id="_rest_pagination">
    <title>REST Pagination</title>
    <simpara>Some of the REST calls below return lists of information. The results of these operations can be
      <emphasis>paginated</emphasis>, which means that the lists can be split up and returned according to the parameters sent by the user.</simpara>
    <simpara>For example, if the REST call parameters indicate that <emphasis>page 2</emphasis> with <emphasis>page size 10</emphasis> should
      be returned for the results, then results 10 to (and including) 19 will be returned.</simpara>
    <simpara>The first page is always page 1 (as opposed to page "0").</simpara>
    <table frame="all" rowsep="1" colsep="1">
      <title>Pagination query parameter syntax</title>
      <tgroup cols="2">
        <colspec colname="col_1" colwidth="*"/>
        <colspec colname="col_2" colwidth="*"/>
        <thead>
          <row>
            <entry align="left" valign="top">Parameter name</entry>
            <entry align="left" valign="top">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry align="left" valign="top">
              <simpara>page</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>The page number requested. The default value is 1.</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>p</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Synonym for the above <literal>page</literal> parameter.</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>pageSize</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>The number of elements per page to return. The default value is 10.</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>s</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Synonym for the above <literal>pageSize</literal> parameter.</simpara>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <simpara>If both a "long" pagination parameter and its synonym are used, then only the value from the "long" variant is used. For
      example, if the <literal>page</literal> is given with a value of 11 and the <literal>p</literal> parameter is given with a value of 37, then the value of the
      <literal>page</literal> parameter, <emphasis>11</emphasis> , will be used and the <literal>p</literal> parameter will be ignored.</simpara>
    <simpara>For the following operations, pagination is <emphasis>always</emphasis> used. See above for the default values used.</simpara>
    <table frame="all" rowsep="1" colsep="1">
      <title>REST operations using pagination</title>
      <tgroup cols="2">
        <colspec colname="col_1" colwidth="*"/>
        <colspec colname="col_2" colwidth="*"/>
        <thead>
          <row>
            <entry align="left" valign="top">REST call URL</entry>
            <entry align="left" valign="top">Short Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/instance</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>ProcessInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/instance/{procInstid}</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>ProcessInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/instance/{procInstId}/child</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>ProcessInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/instance/{procInstId}/node</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>NodeInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/instance/{procInstId}/node/{nodeId}</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>NodeInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/instance/{procInstId}/variable</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>VariableInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/instance/{procInstId}/variable/{varId}</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>VariableInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/variable/{variableId}</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>VariableInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/variable/{variableId}/instances</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>ProcessInstance</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/variable/{variableId}/value/{value}</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>ProcessInstance</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/variable/{variableId}/value/{value}/instances</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>ProcessInstance</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/history/process/{procDefId}</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>ProcessInstanceLog</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/task/query</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a list of <literal>TaskSummaryImpl</literal> instances</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/query/runtime/task</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a <literal>JaxbQueryTaskResult</literal> instance</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>
                <literal>/query/runtime/process</literal>
              </simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Returns a <literal>JaxbQueryProcessInstanceResult</literal> instance</simpara>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section xml:id="_rest_map_query_parameters">
    <title>REST Map query parameters</title>
    <simpara>If youâ€™re triggering an operation with a REST API call that would normally (e.g. when interacting the same operation on a
      local <literal>KieSession</literal> or <literal>TaskService</literal> instance) take an instance of a <literal>java.util.Map</literal> as one of its parameters,
      you can submit key-value pairs to the operation to simulate this behaviour by passing a query parameter whose name starts
      with <literal>map_</literal>.</simpara>
    <example>
      <title>Query parameter examples</title>
      <simpara>If you pass the query parameter <literal>map_kEy=vAlue</literal> in a REST call, then the
        <literal>Map</literal> thatâ€™s passed to the actual underlying <literal>KieSession</literal> or <literal>TaskService</literal>
        operation will contain this (<literal>String, String</literal>) key value pair: <literal>"kEy" â‡’ "vAlue"</literal>.
        You could pass this parameter like so:</simpara>
      <screen>http://localhost:8080/kie-wb/rest/runtime/myproject/process/wonka.factory.loompa.hire/start?map_kEy=vAlue</screen>
      <simpara>Map query parameters also use the object query parameter syntax described
        below, so the following query parameter, <literal>map_total=5000</literal> will be translated
        into a key-value pair in a map where the key is the String "total" and the
        value is a Long with the value of 5000. For example:</simpara>
      <screen>http://localhost:8080/kie-wb/rest/runtime/myproject/process/wonka.factory.oompa.chocolate/start?map_total=5000`</screen>
    </example>
    <simpara>The following operations take query map parameters:</simpara>
    <itemizedlist>
      <listitem>
        <simpara>
          <literal>/runtime/{deploymentId}/process/{processDefId}/start</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>/runtime/{deploymentId}/workitem/{processItemId}/complete</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>/runtime/{deploymentId}/withvars/process/{processDefId}/start</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>/task/{taskId}/complete</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>/task/{taskId}/fail</literal>
        </simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="_rest_number_query_parameters">
    <title>REST Number query parameters</title>
    <simpara>While REST calls obviously only take strings as query parameters, using the following
      notation for query parameters will mean that the string is translated into a different type
      of object when the value of the string is used in the actual operation:</simpara>
    <table frame="all" rowsep="1" colsep="1">
      <title>Number query parameter syntax</title>
      <tgroup cols="2">
        <colspec colname="col_1" colwidth="*"/>
        <colspec colname="col_2" colwidth="*"/>
        <thead>
          <row>
            <entry align="left" valign="top">Regex syntax</entry>
            <entry align="left" valign="top">Type</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry align="left" valign="top">
              <simpara>\d+</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Long</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>\d+i</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Integer</simpara>
            </entry>
          </row>
          <row>
            <entry align="left" valign="top">
              <simpara>\d+l</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Long</simpara>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section xml:id="_runtime_strategies">
    <title>Runtime strategies</title>
    <simpara>The remote API calls allow access to the underlying deployments, regardless of whether these
      deployments use the <literal>Singleton</literal>, <literal>Per-Process-Instance</literal> or <literal>Per-Request</literal> strategies.</simpara>
    <simpara>While thereâ€™s enough information in the URL in order to access deployments that use the
      <literal>Singleton</literal> , or <literal>Per-Request</literal> strategies, thatâ€™s not always the case with the
      <literal>Per-Process-Instance</literal> runtimes because the remote API operation will need the process instance id
      in order to identify the deployment.</simpara>
    <simpara>Therefore, for REST calls for which the URL does not contain the process instance id, youâ€™ll need
      to add the following parameter:</simpara>
    <table frame="all" rowsep="1" colsep="1">
      <title>Per-Process-Instance runtime query parameter</title>
      <tgroup cols="2">
        <colspec colname="col_1" colwidth="*"/>
        <colspec colname="col_2" colwidth="*"/>
        <thead>
          <row>
            <entry align="left" valign="top">Parameter name</entry>
            <entry align="left" valign="top">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry align="left" valign="top">
              <simpara>runtimeProcInstId</simpara>
            </entry>
            <entry align="left" valign="top">
              <simpara>Value (must match the regex <literal>[0-9]+</literal>) specifies the process instance id
                that identifies the underlying <literal>Per-Process-Instance</literal> deployment
                Will have no effect if the underlying deployment uses the <literal>Singleton</literal>
                or <literal>Per-Request</literal> strategy</simpara>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</section>
