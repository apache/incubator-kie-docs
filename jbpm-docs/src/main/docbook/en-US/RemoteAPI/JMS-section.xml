<?xml version="1.0" encoding="UTF-8"?><section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="remote.jms" xml:base="../" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
  <title>JMS</title>
  <simpara>The Java Message Service (JMS) is an API that allows Java Enterprise components to
    communicate with each other asynchronously and reliably.</simpara>
  <simpara>Operations on the runtime engine and tasks can be done via the JMS API exposed by the jBPM
    console and KIE workbench. However, it’s not possible to manage deployments or the knowledge
    base via this JMS API.</simpara>
  <simpara>Unlike the REST API, it is possible to send a batch of commands to the JMS API that will all be processed in one request
    after which the responses to the commands will be collected and return in one response message.</simpara>
  <section xml:id="_jms_queue_setup">
    <title>JMS Queue setup</title>
    <simpara>When the Workbench is deployed on the JBoss AS or EAP server, it automatically creates 3
      queues:</simpara>
    <itemizedlist>
      <listitem>
        <simpara>
          <literal>jms/queue/KIE.SESSION</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>jms/queue/KIE.TASK</literal>
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          <literal>jms/queue/KIE.RESPONSE</literal>
        </simpara>
      </listitem>
    </itemizedlist>
    <simpara>The <literal>KIE.SESSION</literal> and <literal>KIE.TASK</literal> queues should be used to send request messages to the JMS API.
      Command response messages will be then placed on the <literal>KIE.RESPONSE</literal> queues. Command request messages
      that involve starting and managing business processes should be sent to the <literal>KIE.SESSION</literal> and
      command request messages that involve managing human tasks, should be sent to the <literal>KIE.TASK</literal> queue.</simpara>
    <simpara>Although there are 2 different input queues, <literal>KIE.SESSION</literal> and <literal>KIE.TASK</literal>, this is only in order to
      provide multiple input queues so as to optimize processing: command request messages will be
      processed in the same manner regardless of which queue they’re sent to.  However, in some cases,
      users may send many more requests involving human tasks than requests involving business processes,
      but then not want the processing of business process-related request messages to be delayed by the
      human task messages. By sending the appropriate command request messages to the appropriate queues,
      this problem can be avoided.</simpara>
    <simpara>The term "<emphasis>command request message</emphasis>" used above refers to a JMS text message that contains a
      serialized <literal>JaxbCommandsRequest</literal> object. At the moment, only XML serialization (as opposed to, JSON
      or protobuf, for example) is supported.</simpara>
  </section>
  <section xml:id="_using_the_remote_java_api">
    <title>Using the remote Java API</title>
    <simpara>While it is possible to interact with a BPMS or KIE workbench server instance by sending and
      processing JMS messages that you create yourself, <emphasis>it will always be easier to use the remote Java
        API</emphasis> that’s supplied by the <literal>kie-services-client</literal> jar.</simpara>
    <simpara>For more information about how to use the remote Java API to interact with the JMS API of a server
      instance, see the &lt;link linkend='remote.java.api.jms'&gt;Remote Java API&lt;/link&gt; section.</simpara>
    <section xml:id="_serialization_issues">
      <title>Serialization issues</title>
      <simpara>The JMS API accepts <literal>TextMessage</literal> instances that contain serialized <literal>JaxbCommandsRequest</literal> objects.
        These <literal>JaxbCommandsRequest</literal> instances can be filled with multiple command objects. In this way,
        it’s possible to send a batch of commands for processing to the JMS API.</simpara>
      <simpara>When users wish to include their own classes with requests, there a number of requirements that
        must be met for the user-defined classes. For more information about these requirements, see the
        <link linkend="remote.serialization.user.classes">Sending and receiving user class instances</link> section in the
        remote API additional documentation section.</simpara>
    </section>
  </section>
  <section xml:id="_example_jms_usage">
    <title>Example JMS usage</title>
    <simpara>The following is a rather long example that shows how to use the JMS API. The numbers ("callouts")
      along the side of the example refer to notes below that explain particular parts of the example.
      It’s supplied for those advanced users that do not wish to use the jBPM Remote Java API.</simpara>
    <simpara>The jBPM Remote Java API, described here, will otherwise take care of all of the logic shown below.</simpara>
    <programlisting language="java" linenumbering="unnumbered">package org.kie.remote.client.documentation.jms;
      
      import static org.kie.services.client.serialization.SerializationConstants.DEPLOYMENT_ID_PROPERTY_NAME;
      import static org.kie.services.client.serialization.SerializationConstants.SERIALIZATION_TYPE_PROPERTY_NAME;
      import static org.kie.services.shared.ServicesVersion.VERSION;
      
      import java.util.Collections;
      import java.util.List;
      import java.util.Set;
      import java.util.UUID;
      
      import javax.jms.Connection;
      import javax.jms.ConnectionFactory;
      import javax.jms.JMSException;
      import javax.jms.Message;
      import javax.jms.MessageConsumer;
      import javax.jms.MessageProducer;
      import javax.jms.Queue;
      import javax.jms.Session;
      import javax.jms.TextMessage;
      import javax.naming.InitialContext;
      import javax.naming.NamingException;
      
      import org.kie.api.command.Command;  <co xml:id="CO4-1"/>
      import org.kie.api.runtime.process.ProcessInstance;
      import org.kie.api.task.model.TaskSummary;
      import org.kie.remote.client.api.RemoteRuntimeEngineFactory;  <co xml:id="CO4-2"/>
      import org.kie.remote.client.api.exception.MissingRequiredInfoException;
      import org.kie.remote.client.api.exception.RemoteApiException;
      import org.kie.remote.client.api.exception.RemoteCommunicationException;
      import org.kie.remote.client.jaxb.ClientJaxbSerializationProvider;
      import org.kie.remote.client.jaxb.JaxbCommandsRequest;
      import org.kie.remote.client.jaxb.JaxbCommandsResponse;
      import org.kie.remote.jaxb.gen.AuditCommand; <co xml:id="CO4-3"/>
      import org.kie.remote.jaxb.gen.GetTaskAssignedAsPotentialOwnerCommand;
      import org.kie.remote.jaxb.gen.StartProcessCommand;
      import org.kie.remote.jaxb.gen.TaskCommand;
      import org.kie.services.client.serialization.JaxbSerializationProvider;
      import org.kie.services.client.serialization.SerializationException;
      import org.kie.services.client.serialization.SerializationProvider;
      import org.kie.services.client.serialization.jaxb.impl.JaxbCommandResponse;
      import org.kie.services.client.serialization.jaxb.rest.JaxbExceptionResponse;
      import org.slf4j.Logger;
      import org.slf4j.LoggerFactory;
      
      public class SendJmsExample {
      
      protected static final Logger logger = LoggerFactory.getLogger(SendJmsExample.class);
      
      public void sendCommandsViaJms( String user, String password, String connectionUser, String connectionPassword,
      String deploymentId, String processId, String hostName ) {
      
      /**
      * JMS setup
      */
      // Get JNDI context from server
      InitialContext context = RemoteRuntimeEngineFactory.getRemoteJbossInitialContext(hostName, connectionUser, connectionPassword);
      
      // Create JMS connection
      ConnectionFactory connectionFactory;
      try {
      connectionFactory = (ConnectionFactory) context.lookup("jms/RemoteConnectionFactory");
      } catch( NamingException ne ) {
      throw new RuntimeException("Unable to lookup JMS connection factory.", ne);
      }
      
      // Setup queues
      Queue sessionQueue, taskQueue, sendQueue, responseQueue;
      try {
      sendQueue = sessionQueue = (Queue) context.lookup("jms/queue/KIE.SESSION");
      taskQueue = (Queue) context.lookup("jms/queue/KIE.TASK");
      responseQueue = (Queue) context.lookup("jms/queue/KIE.RESPONSE");
      } catch( NamingException ne ) {
      throw new RuntimeException("Unable to lookup send or response queue", ne);
      }
      
      /**
      * Command preparation
      */
      StartProcessCommand startProcCmd = new StartProcessCommand();
      startProcCmd.setProcessId(processId);
      
      /**
      * Send command via JMS and receive response
      */
      SerializationProvider serializationProvider = ClientJaxbSerializationProvider.newInstance();
      ProcessInstance procInst = (ProcessInstance) sendJmsCommand(startProcCmd,
      connectionUser, connectionPassword,
      user, password, deploymentId, null,
      connectionFactory, sendQueue, responseQueue,
      serializationProvider, Collections.EMPTY_SET, JaxbSerializationProvider.JMS_SERIALIZATION_TYPE,
      5 * 1000);
      
      /**
      * Command preparation
      */
      GetTaskAssignedAsPotentialOwnerCommand gtaapoCmd = new GetTaskAssignedAsPotentialOwnerCommand();
      gtaapoCmd.setUserId(user);
      
      // Send command request
      Long processInstanceId = null; // needed if you're doing an operation on a PER_PROCESS_INSTANCE deployment
      
      /**
      * Send command via JMS and receive response
      */
      @SuppressWarnings("unchecked")
      List&lt;TaskSummary&gt; taskSumList = (List&lt;TaskSummary&gt;) sendJmsCommand(gtaapoCmd,
      connectionUser, connectionPassword,
      user, password, deploymentId, processInstanceId,
      connectionFactory, sendQueue, responseQueue,
      serializationProvider, Collections.EMPTY_SET, JaxbSerializationProvider.JMS_SERIALIZATION_TYPE,
      5 * 1000);
      
      long taskId = taskSumList.get(0).getId();
      }
      
      // @formatter:off
      public static Object sendJmsCommand( Command command,
      String connUser, String connPassword,
      String userName, String password, String deploymentId, Long processInstanceId,
      ConnectionFactory factory, Queue sendQueue, Queue responseQueue,
      SerializationProvider serializationProvider, Set&lt;Class&lt;?&gt;&gt; extraJaxbClasses, int serializationType,
      long timeoutInMillisecs ) {
      // @formatter:on
      
      if( deploymentId == null &amp;&amp; !(command instanceof TaskCommand || command instanceof AuditCommand) ) {
      throw new MissingRequiredInfoException("A deployment id is required when sending commands involving the KieSession.");
      }
      JaxbCommandsRequest req; <co xml:id="CO4-4"/>
      if( command instanceof AuditCommand ) {
      req = new JaxbCommandsRequest(command);
      } else {
      req = new JaxbCommandsRequest(deploymentId, command);
      }
      
      req.setProcessInstanceId(processInstanceId);
      req.setUser(userName);
      req.setVersion(VERSION);
      
      Connection connection = null;
      Session session = null;
      JaxbCommandsResponse cmdResponse = null;
      String corrId = UUID.randomUUID().toString();
      String selector = "JMSCorrelationID = '" + corrId + "'";
      try {
      
      // setup
      MessageProducer producer;
      MessageConsumer consumer;
      try {
      if( password != null ) {
      connection = factory.createConnection(connUser, connPassword);
      } else {
      connection = factory.createConnection();
      }
      session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
      
      producer = session.createProducer(sendQueue);
      consumer = session.createConsumer(responseQueue, selector);
      
      connection.start();
      } catch( JMSException jmse ) {
      throw new RemoteCommunicationException("Unable to setup a JMS connection.", jmse);
      }
      
      // Create msg
      TextMessage textMsg; <co xml:id="CO4-5"/>
      try {
      
      // serialize request
      String xmlStr = serializationProvider.serialize(req); <co xml:id="CO4-6"/>
      textMsg = session.createTextMessage(xmlStr);
      
      // set properties
      // 1. corr id
      textMsg.setJMSCorrelationID(corrId);
      // 2. serialization info
      textMsg.setIntProperty(SERIALIZATION_TYPE_PROPERTY_NAME, serializationType);
      if( extraJaxbClasses != null &amp;&amp; !extraJaxbClasses.isEmpty() ) {
      if( deploymentId == null ) {
      throw new MissingRequiredInfoException(
      "Deserialization of parameter classes requires a deployment id, which has not been configured.");
      }
      textMsg.setStringProperty(DEPLOYMENT_ID_PROPERTY_NAME, deploymentId);
      }
      // 3. user/pass for task operations
      boolean isTaskCommand = (command instanceof TaskCommand);
      if( isTaskCommand ) {
      if( userName == null ) {
      throw new RemoteCommunicationException(
      "A user name is required when sending task operation requests via JMS");
      }
      if( password == null ) {
      throw new RemoteCommunicationException(
      "A password is required when sending task operation requests via JMS");
      }
      textMsg.setStringProperty("username", userName);
      textMsg.setStringProperty("password", password);
      }
      // 4. process instance id
      } catch( JMSException jmse ) {
      throw new RemoteCommunicationException("Unable to create and fill a JMS message.", jmse);
      } catch( SerializationException se ) {
      throw new RemoteCommunicationException("Unable to deserialze JMS message.", se.getCause());
      }
      
      // send
      try {
      producer.send(textMsg);
      } catch( JMSException jmse ) {
      throw new RemoteCommunicationException("Unable to send a JMS message.", jmse);
      }
      
      // receive
      Message response;
      try {
      response = consumer.receive(timeoutInMillisecs);
      } catch( JMSException jmse ) {
      throw new RemoteCommunicationException("Unable to receive or retrieve the JMS response.", jmse);
      }
      
      if( response == null ) {
      logger.warn("Response is empty");
      return null;
      }
      // extract response
      assert response != null: "Response is empty.";
      try {
      String xmlStr = ((TextMessage) response).getText();
      cmdResponse = (JaxbCommandsResponse) serializationProvider.deserialize(xmlStr); <co xml:id="CO4-7"/>
      } catch( JMSException jmse ) {
      throw new RemoteCommunicationException("Unable to extract " + JaxbCommandsResponse.class.getSimpleName()
      + " instance from JMS response.", jmse);
      } catch( SerializationException se ) {
      throw new RemoteCommunicationException("Unable to extract " + JaxbCommandsResponse.class.getSimpleName()
      + " instance from JMS response.", se.getCause());
      }
      assert cmdResponse != null: "Jaxb Cmd Response was null!";
      } finally {
      if( connection != null ) {
      try {
      connection.close();
      if( session != null ) {
      session.close();
      }
      } catch( JMSException jmse ) {
      logger.warn("Unable to close connection or session!", jmse);
      }
      }
      }
      
      String version = cmdResponse.getVersion();
      if( version == null ) {
      version = "pre-6.0.3";
      }
      if( !version.equals(VERSION) ) {
      logger.info("Response received from server version [{}] while client is version [{}]! This may cause problems.",
      version, VERSION);
      }
      
      List&lt;JaxbCommandResponse&lt;?&gt;&gt; responses = cmdResponse.getResponses();
      if( responses.size() &gt; 0 ) {
      JaxbCommandResponse&lt;?&gt; response = responses.get(0);
      if( response instanceof JaxbExceptionResponse ) {
      JaxbExceptionResponse exceptionResponse = (JaxbExceptionResponse) response;
      throw new RemoteApiException(exceptionResponse.getMessage());
      } else {
      return response.getResult();
      }
      } else {
      assert responses.size() == 0: "There should only be 1 response, not " + responses.size() + ", returned by a command!";
      return null;
      }
      }
      }</programlisting>
    <calloutlist>
      <callout arearefs="CO4-1 CO4-2 CO4-3">
        <para>These classes can all be found in the <literal>kie-api</literal>, <literal>kie-services-client</literal> and <literal>kie-services-jaxb</literal> JARs.
          For this example, the only dependency needed is <literal>org.kie.remote:kie-remote-client</literal>, which transitively depends on both the
          <literal>org.kie:kie-api</literal> and <literal>org.kie.remote:kie-remote-jaxb</literal> artifacts.</para>
      </callout>
      <callout arearefs="CO4-4">
        <para>The <literal>JaxbCommandsRequest</literal> instance is the "holder" object in which you can place all of the commands
          you want to execute in a particular request. By using the <literal>JaxbCommandsRequest.getCommands()</literal> method, you
          can retrieve the list of commands in order to add more commands to the request.
          A deployment id is required for command request messages that deal with business processes. Command request messages
          that only contain human task-related commands do not require a deployment id.</para>
      </callout>
      <callout arearefs="CO4-5">
        <para>Note that the JMS message sent to the remote JMS API <emphasis>must</emphasis> be constructed as follows:</para>
        <itemizedlist>
          <listitem>
            <simpara>It must be a JMS text message (<literal>javax.jms.TextMessage</literal>).</simpara>
          </listitem>
          <listitem>
            <simpara>It must contain a serialized instance of a <literal>JaxbCommandsRequest</literal>, added to the message as a UTF string</simpara>
          </listitem>
          <listitem>
            <simpara>It must have a filled JMS Correlation ID property.</simpara>
          </listitem>
          <listitem>
            <simpara>It must have an int property with the name of "serialization" set to an acceptable value (only 0 at the moment).</simpara>
          </listitem>
        </itemizedlist>
      </callout>
      <callout arearefs="CO4-6 CO4-7">
        <para>The same serialization mechanism used to serialize the request message will be used to serialize the response
          message.</para>
      </callout>
    </calloutlist>
  </section>
</section>
