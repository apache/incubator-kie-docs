<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Audit Log</title>
<para>In many cases it will be useful (if not necessary) to store information
    <emphasis>about</emphasis> the execution of process instances, so that 
    this information can be used afterwards. For example, sometimes we 
    want to verify which actions have been executed for a particular process 
    instance, or in general, we want to be able to monitor and analyze 
    the efficiency of a particular process.</para>
    
    <para>However, storing history information in the runtime database 
    can result in the database rapidly increasing in size, not to mention 
    the fact that monitoring and analysis queries might influence the performance 
    of your runtime engine. This is why process execution history information 
    can be stored separately.</para>

    <para>This history log of execution information is created based on 
    events that the process engine generates during execution. This is
    possible because the jBPM runtime engine provides a generic mechanism 
    to listen to events. The necessary information can easily be extracted 
    from these events and then persisted to a database. Filters can also be 
    used to limit the scope of the logged information.</para>

    <section>
      <title>The jBPM Audit data model</title>

      <para>The jbpm-audit module contains an event listener that stores
      process-related information in a database using JPA.
      The data model itself contains three entities, one for process instance 
      information, one for node instance information, and one for (process) 
      variable instance information.</para>
     
      <!-- width && scalefit for PDFs -->
      <figure>
        <title>jBPM Audit data model</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-7-Persistence/bam_schema.png" format="PNG"
                       align="center" width="100%" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>
 
      <para>The <code>ProcessInstanceLog</code> table contains the basic
      log information about a process instance.</para>

      <table>
        <title>ProcessInstanceLog</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry>Field</entry>
            <entry>Description</entry>
            <entry>Nullable</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>id</code></entry>
            <entry>The primary key and id of the log entity</entry>
            <entry>NOT NULL</entry>
          </row>
          <row>
            <entry><code>duration</code></entry>
            <entry>Actual duration of this process instance since its start date</entry>
          </row>
          <row>
            <entry><code>end_date</code></entry>
            <entry>When applicable, the end date of the process instance</entry>
          </row>
          <row>
            <entry><code>externalId</code></entry>
            <entry>Optional external identifier used to correlate to some elements - e.g. deployment id</entry>
          </row>
          <row>
            <entry><code>user_identity</code></entry>
            <entry>Optional identifier of the user who started the process instance</entry>
          </row>
          <row>
            <entry><code>outcome</code></entry>
            <entry>The outcome of the process instance, for instance error code in case
              of process instance was finished with error event</entry>
          </row>
          <row>
            <entry><code>parentProcessInstanceId</code></entry>
            <entry>The process instance id of the parent process instance if any</entry>
          </row>
          <row>
            <entry><code>processid</code></entry>
            <entry>The id of the process</entry>
          </row>
          <row>
            <entry><code>processinstanceid</code></entry>
            <entry>The process instance id</entry>
            <entry>NOT NULL</entry>
          </row>
          <row>
            <entry><code>processname</code></entry>
            <entry>The name of the process</entry>
          </row>
          <row>
            <entry><code>processversion</code></entry>
            <entry>The version of the process</entry>
          </row>
          <row>
            <entry><code>start_date</code></entry>
            <entry>The start date of the process instance</entry>
          </row>
          <row>
            <entry><code>status</code></entry>
            <entry>The status of process instance that maps to process instance state</entry>
          </row>
        </tbody>
        </tgroup>
      </table>

      <para>The <code>NodeInstanceLog</code> table contains more information about which 
      nodes were actually executed inside each process instance. Whenever a node instance 
      is entered from one of its incoming connections or is exited through one of its outgoing
      connections, that information is stored in this table.</para>

      <table>
        <title>NodeInstanceLog</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry>Field</entry>
            <entry>Description</entry>
            <entry>Nullable</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>id</code></entry>
            <entry>The primary key and id of the log entity</entry>
            <entry>NOT NULL</entry>
          </row>
          <row>
            <entry><code>connection</code></entry>
            <entry>Actual identifier of the sequence flow that led to this node instance</entry>
          </row>
          <row>
            <entry><code>log_date</code></entry>
            <entry>The date of the event</entry>
          </row>
          <row>
            <entry><code>externalId</code></entry>
            <entry>Optional external identifier used to correlate to some elements - e.g. deployment id</entry>
          </row>
          <row>
            <entry><code>nodeid</code></entry>
            <entry>The node id of the corresponding node in the process definition</entry>
          </row>
          <row>
            <entry><code>nodeinstanceid</code></entry>
            <entry>The node instance id</entry>
          </row>
          <row>
            <entry><code>nodename</code></entry>
            <entry>The name of the node</entry>
          </row>
          <row>
            <entry><code>nodetype</code></entry>
            <entry>The type of the node</entry>
          </row>
          <row>
            <entry><code>processid</code></entry>
            <entry>The id of the process that the process instance is executing</entry>
          </row>
          <row>
            <entry><code>processinstanceid</code></entry>
            <entry>The process instance id</entry>
            <entry>NOT NULL</entry>
          </row>
          <row>
            <entry><code>type</code></entry>
            <entry>The type of the event (0 = enter, 1 = exit)</entry>
            <entry>NOT NULL</entry>
          </row>
          <row>
            <entry><code>workItemId</code></entry>
            <entry>Optional - only for certain node types - The identifier of work item</entry>
          </row>
        </tbody>
        </tgroup>
      </table>

      <para>The <code>VariableInstanceLog</code> table contains information about changes 
      in variable instances. The default is to only generate log entries when (after) a variable
      changes. It's also possible to log entries before the variable (value) changes.</para>

      <table>
        <title>VariableInstanceLog</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry>Field</entry>
            <entry>Description</entry>
            <entry>Nullable</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><code>id</code></entry>
            <entry>The primary key and id of the log entity</entry>
            <entry>NOT NULL</entry>
          </row>
          <row>
            <entry><code>externalId</code></entry>
            <entry>Optional external identifier used to correlate to some elements - e.g. deployment id</entry>
          </row>
          <row>
            <entry><code>log_date</code></entry>
            <entry>The date of the event</entry>
          </row>
          <row>
            <entry><code>processid</code></entry>
            <entry>The id of the process that the process instance is executing</entry>
          </row>
          <row>
            <entry><code>processinstanceid</code></entry>
            <entry>The process instance id</entry>
            <entry>NOT NULL</entry>
          </row>
          <row>
            <entry><code>oldvalue</code></entry>
            <entry>The previous value of the variable at the time that the log is made</entry>
          </row>
          <row>
            <entry><code>value</code></entry>
            <entry>The value of the variable at the time that the log is made</entry>
          </row>
          <row>
            <entry><code>variableid</code></entry>
            <entry>The variable id in the process definition</entry> 
          </row>
          <row>
            <entry><code>variableinstanceid</code></entry>
            <entry>The id of the variable instance</entry>
          </row>
        </tbody>
        </tgroup>
      </table>
        
    </section>

    <section>
      <title>Storing Process Events in a Database</title>

      <para>To log process history information in a database like this, you
      need to register the logger on your session like
      this:</para>

      <programlisting language="java">
EntityManagerFactory emf = ...;
StatefulKnowledgeSession ksession = ...;
AbstractAuditLogger auditLogger = AuditLoggerFactory.newJPAInstance(emf);
ksession.addProcessEventListener(auditLogger);

// invoke methods one your session here

      </programlisting>

      <para>To specify the database where the information should be stored,
      modify the file <filename>persistence.xml</filename> file to include
      the audit log classes as well (ProcessInstanceLog, NodeInstanceLog and
      VariableInstanceLog), as shown below.</para>
      
    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;


&lt;persistence
  version="2.0"
  xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd
  http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
  xmlns="http://java.sun.com/xml/ns/persistence"
  xmlns:orm="http://java.sun.com/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance&gt;

  &lt;persistence-unit name="org.jbpm.persistence.jpa" transaction-type="JTA"&gt;
    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
    &lt;jta-data-source&gt;jdbc/jbpm-ds&lt;/jta-data-source&gt;
    &lt;mapping-file&gt;META-INF/JBPMorm.xml&lt;/mapping-file&gt;
    &lt;class&gt;org.drools.persistence.info.SessionInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.processinstance.ProcessInstanceInfo&lt;/class&gt;
    &lt;class&gt;org.drools.persistence.info.WorkItemInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationKeyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationPropertyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.runtime.manager.impl.jpa.ContextMappingInfo&lt;/class&gt;

    &lt;class&gt;org.jbpm.process.audit.ProcessInstanceLog&lt;/class&gt;
    &lt;class&gt;org.jbpm.process.audit.NodeInstanceLog&lt;/class&gt;
    &lt;class&gt;org.jbpm.process.audit.VariableInstanceLog&lt;/class&gt;

    &lt;properties&gt;
      &lt;property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/&gt;
      &lt;property name="hibernate.max_fetch_depth" value="3"/&gt;
      &lt;property name="hibernate.hbm2ddl.auto" value="update"/&gt;
      &lt;property name="hibernate.show_sql" value="true"/&gt;
      &lt;property name="hibernate.transaction.jta.platform"
      value="org.hibernate.service.jta.platform.internal.BitronixJtaPlatform"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;
    </programlisting>

      <para>All this information can easily be queried and used in a lot of
      different use cases, ranging from creating a history log for one
      specific process instance to analyzing the performance of all instances
      of a specific process.</para>
      
      <para>This audit log should only be considered a default implementation.
      We don't know what information you need to store for analysis afterwards,
      and for performance reasons it is recommended to only store the relevant
      data.  Depending on your use cases, you might define your own data model
      for storing the information you need, and use the process event listeners
      to extract that information.</para>
    </section>

    <section>
      <title>Storing Process Events in a JMS queue for further processing</title>

      <para>
        Process events are stored in the database synchronously and within the same transaction as actual process instance
        execution. That obviously takes some time especially in highly loaded systems and might have some impact on
        the database when both history log and runtime data are kept in the same database.
        To provide an alternative option for storing process events, a JMS based logger has been provided. It can be
        configured to submit messages to JMS queue instead of directly persisting them in the database. It can be configured
        to be transactional as well to avoid issues with inconsistent data in case of process engine transaction is
        rolled back.
      </para>
      <programlisting language="java">
ConnectionFactory factory = ...;
Queue queue = ...;
StatefulKnowledgeSession ksession = ...;
Map&lt;String, Object&gt; jmsProps = new HashMap&lt;String, Object&gt;();
jmsProps.put("jbpm.audit.jms.transacted", true);
jmsProps.put("jbpm.audit.jms.connection.factory", factory);
jmsProps.put("jbpm.audit.jms.queue", queue);
AbstractAuditLogger auditLogger = AuditLoggerFactory.newInstance(Type.JMS, session, jmsProps);
ksession.addProcessEventListener(auditLogger);

// invoke methods one your session here

      </programlisting>
      <para>
        This is just one of possible ways to configure JMS audit logger, see javadocs for AuditLoggerFactory for more details.
      </para>
    </section>
  <section>
    <title>Variables auditing</title>
    <para>Process and task variables are stored in autdit tables by default although there are
      stored in simplest possible way - by creating string representation of the variable -
      variable.toString(). In many cases this is enough as even for custom classes used as variables
      users can implement custom toString() method that produces expected "view" of the variable. </para>
    <para>Though this might not cover all needs, especially when there is a need for efficient
      queries by variables (both task and process). Let's take as an example a Person object that
      has following structure:</para>
    <para>
      <programlisting>public class Person implements Serializable{

    private static final long serialVersionUID = -5172443495317321032L;
    private String name;
    private int age;   
    
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public int getAge() {
        return age;
    }
    
    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "Person [name=" + name + ", age=" + age + "]";
    }        
}
</programlisting>
    </para>
    <para>while at first look this seems to be sufficient as the toString() methods provide human
      readable format it does not make it easy to be searched by. As searching through strings like
      "Person [name="john", age="34"] to find people with age 34 would make data base query very
      inefficient.</para>
    <para>To solve the problem variable audit has been based on VariableIndexers that are
      responsible for extracting relevant parts of the variable that will be stored in audit log.
      <programlisting>
/**
 * Variable indexer that allows to transform variable instance into other representation (usually string)
 * to be able to use it for queries.
 *
 * @param &lt;V> type of the object that will represent indexed variable
 */
public interface VariableIndexer&lt;V> {

    /**
     * Tests if given variable shall be indexed by this indexer
     * 
     * NOTE: only one indexer can be used for given variable
     * 
     * @param variable variable to be indexed
     * @return true if variable should be indexed with this indexer
     */
    boolean accept(Object variable);
    
    /**
     * Performs index/transform operation of the variable. Result of this operation can be
     * either single value or list of values to support complex type separation.
     * For example when variable is of type Person that has name, address phone indexer could 
     * build three entries out of it to represent individual fields:
     * person = person.name
     * address = person.address.street
     * phone = person.phone
     * that will allow more advanced queries to be used to find relevant entries.
     * @param name name of the variable
     * @param variable actual variable value 
     * @return
     */
    List&lt;V> index(String name, Object variable);
}
</programlisting></para>
    <para>By default (indexer that takes the toString()) will prodce single audit entry for single
      variable, so it's one to one relationship. But that's not the only option. Indexers (as can be
      seen in the interface) returns list of objects that are the outcome of single variable
      indexation. To make our person queries more efficient we could build custom indexer that would
      take Person instance and index it into separate audit entries one representing name and the
      other representing age.
      <programlisting>
public class PersonTaskVariablesIndexer implements TaskVariableIndexer {

    @Override
    public boolean accept(Object variable) {
        if (variable instanceof Person) {
            return true;
        }
        return false;
    }

    @Override
    public List&lt;TaskVariable> index(String name, Object variable) {
        
        Person person = (Person) variable;
        List&lt;TaskVariable> indexed = new ArrayList&lt;TaskVariable>();
        
        TaskVariableImpl personNameVar = new TaskVariableImpl();
        personNameVar.setName("person.name");
        personNameVar.setValue(person.getName());
        
        indexed.add(personNameVar);
        
        TaskVariableImpl personAgeVar = new TaskVariableImpl();
        personAgeVar.setName("person.age");
        personAgeVar.setValue(person.getAge()+"");
        
        indexed.add(personAgeVar);
        
        return indexed;
    }

}
</programlisting></para>
    <para>That indexer will then be used to index Person class only and rest of variables will be
      indexed with default (toString()) indexer. Now when we want to find process instances or tasks
      that have person with age 34 we simple refer to it as<itemizedlist>
        <listitem>
          <para>variable name: person.age</para>
        </listitem>
        <listitem>
          <para>variable value: 34</para>
        </listitem>
      </itemizedlist></para>
    <para>there is not even need to use like based queries so data base can optimize the query and
      make it efficient even with big set of data. </para>
    <para><emphasis role="bold">Building and registering custom indexers</emphasis></para>
    <para>Indexers are supported for both process and task variables. though they are supported by
      different interfaces as they do produce different type of objects representing audit view of
      the variable. Following are the interfaces to be implemented to build custom indexers:<itemizedlist>
        <listitem>
          <para>process variables: org.kie.internal.process.ProcessVariableIndexer</para>
        </listitem>
        <listitem>
          <para>task variables: org.kie.internal.task.api.TaskVariableIndexer</para>
        </listitem>
      </itemizedlist></para>
    <para>Implementation is rather simple, just two methods to be implemented<itemizedlist>
        <listitem>
          <para>accept - indicates what types are handled by given indexer - note that only one
            indexer can index given variable - so the first that accepts it will perform the
            work</para>
        </listitem>
        <listitem>
          <para>index - actually does the work to index variables depending on custom
            requirements</para>
        </listitem>
      </itemizedlist></para>
    <para>Once the implementation is done, it should be packaged as jar file and following file
      needs to be included:<itemizedlist>
        <listitem>
          <para>for process variables:
            META-INF/services/org.kie.internal.process.ProcessVariableIndexer with list of FQCN that
            represent the process variable indexers (single class name per line in that file)</para>
        </listitem>
        <listitem>
          <para>for task variables: META-INF/services/org.kie.internal.task.api.TaskVariableIndexer
            with list of FQCN that represent the task variable indexers (single class name per line
            in that file)</para>
        </listitem>
      </itemizedlist></para>
    <para>Indexers are discovered by ServiceLoader mechanism and thus the META-INF/services files
      need. All found indexers will be examined whenever process or task variable is about to be
      indexed. Only the default (toString() based) indexer is not discovered but added explicitly as
      last indexer to allow custom ones to take the precedence over it.</para>
  </section>    
</section>
