<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuration</title>
   <para>By default, the engine does not save runtime data persistently.  This
    means you can use the engine completely without persistence (so not even
    requiring an in memory database) if necessary, for example for performance
    reasons, or when you would like to manage persistence yourself.  It is, however,
    possible to configure the engine to do use persistence by configuring it to do so.
    This usually requires adding the necessary dependencies, configuring a datasource
    and creating the engine with persistence configured.</para>
    
    <section>
      <title>Adding dependencies</title>

    <para>You need to make sure the necessary dependencies are available in the classpath
    of your application if you want to user persistence.  By default,
    persistence is based on the Java Persistence API (JPA) and can
    thus work with several persistence mechanisms.  We are using Hibernate by
    default.</para>

    <para>If you're using the Eclipse IDE and the jBPM Eclipse plugin, you should make sure
    the necessary JARs are added to your jBPM runtime directory.  You don't really need to do
    anything (as the necessary dependencies should already be there) if you are using the jBPM
    runtime that is configured by default when using the jBPM installer, or if you downloaded
    and unzipped the jBPM runtime artifact (from the downloads) and pointed the jBPM plugin to
    that directory.</para>
    
    <para>If you would like to manually add the necessary dependencies to your project, first of all,
    you need the JAR file <filename>jbpm-persistence-jpa.jar</filename>,
    as that contains code for saving the runtime state whenever necessary.
    Next, you also need various other dependencies, depending on the
    persistence solution and database you are using.  For the default
    combination with Hibernate as the JPA persistence provider and using an H2
    in-memory database and Bitronix for JTA-based transaction management, the
    following list of additional dependencies is needed:
      <itemizedlist>
        <listitem>jbpm-persistence-jpa (org.jbpm)</listitem>
        <listitem>drools-persistence-jpa (org.drools)</listitem>
        <listitem>persistence-api (javax.persistence)</listitem>
        <listitem>hibernate-entitymanager (org.hibernate)</listitem>
        <listitem>hibernate-annotations (org.hibernate)</listitem>
        <listitem>hibernate-commons-annotations (org.hibernate)</listitem>
        <listitem>hibernate-core (org.hibernate)</listitem>
        <listitem>commons-collections (commons-collections)</listitem>
        <listitem>dom4j (dom4j)</listitem>
        <listitem>jta (javax.transaction)</listitem>
        <listitem>btm (org.codehaus.btm)</listitem>
        <listitem>javassist (javassist)</listitem>
        <listitem>slf4j-api (org.slf4j)</listitem>
        <listitem>slf4j-jdk14 (org.slf4j)</listitem>
        <listitem>h2 (com.h2database)</listitem>
        <listitem>jbpm-test (org.jbpm) for testing only, do not include it in the actual application</listitem>
      </itemizedlist>
    </para>
    
    </section>
    
    <section>
      <title>Manually configuring the engine to use persistence</title>
    
    <para>You can use the <code>JPAKnowledgeService</code> to create your knowledge session.  This
    is slightly more complex, but gives you full access to the underlying configurations.  You can create
    a new knowledge session using <code>JPAKnowledgeService</code> based on a knowledge base, a
    knowledge session configuration (if necessary) and an environment.  The environment 
    needs to contain a reference to your Entity Manager Factory.  For example:</para>

    <programlisting language="java">
// create the entity manager factory and register it in the environment
EntityManagerFactory emf =
    Persistence.createEntityManagerFactory( "org.jbpm.persistence.jpa" );
Environment env = KnowledgeBaseFactory.newEnvironment();
env.set( EnvironmentName.ENTITY_MANAGER_FACTORY, emf );

// create a new knowledge session that uses JPA to store the runtime state
StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );
int sessionId = ksession.getId();

// invoke methods on your method here
ksession.startProcess( "MyProcess" );
ksession.dispose();</programlisting>

    <para>You can also use the <code>JPAKnowledgeService</code> to recreate
    a session based on a specific session id:</para>

    <programlisting language="java">
// recreate the session from database using the sessionId
ksession = JPAKnowledgeService.loadStatefulKnowledgeSession(sessionId, kbase, null, env );</programlisting>


    <para>Note that we only save the minimal state that is needed to continue
    execution of the process instance at some later point.  This means, for example, that
    it does not contain information about already executed nodes if that information
    is no longer relevant, or that process instances that have been completed or
    aborted are removed from the database.  If you want to search for history-related
    information, you should use the history log, as explained later.</para>

    <para>You need to add a persistence configuration to your classpath to 
    configure JPA to use Hibernate and the H2 database (or your own preference), called
    <filename>persistence.xml</filename> in the META-INF directory, as shown below.
    For more details on how to change this for your own configuration, we refer to
    the JPA and Hibernate documentation for more information.</para>

    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;persistence
      version="2.0"
      xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd
      http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
      xmlns="http://java.sun.com/xml/ns/persistence"
      xmlns:orm="http://java.sun.com/xml/ns/persistence/orm"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

  &lt;persistence-unit name="org.jbpm.persistence.jpa" transaction-type="JTA"&gt;
    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;
    &lt;jta-data-source&gt;jdbc/jbpm-ds&lt;/jta-data-source&gt;
    &lt;mapping-file&gt;META-INF/JBPMorm.xml&lt;/mapping-file&gt;
    &lt;class&gt;org.drools.persistence.info.SessionInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.processinstance.ProcessInstanceInfo&lt;/class&gt;
    &lt;class&gt;org.drools.persistence.info.WorkItemInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationKeyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.persistence.correlation.CorrelationPropertyInfo&lt;/class&gt;
    &lt;class&gt;org.jbpm.runtime.manager.impl.jpa.ContextMappingInfo&lt;/class&gt;

    &lt;properties&gt;
      &lt;property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/&gt;
      &lt;property name="hibernate.max_fetch_depth" value="3"/&gt;
      &lt;property name="hibernate.hbm2ddl.auto" value="update"/&gt;
      &lt;property name="hibernate.show_sql" value="true"/&gt;
      &lt;property name="hibernate.transaction.jta.platform"
                value="org.hibernate.service.jta.platform.internal.BitronixJtaPlatform"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;
    </programlisting>

    <para>This configuration file refers to a data source called "jdbc/jbpm-ds".
    If you run your application in an application server (like for example JBoss AS),
    these containers typically allow you to easily set up data sources using some
    configuration (like for example dropping a datasource configuration file in the
    deploy directory).  Please refer to your application server documentation to know
    how to do this.</para>
     
    <para>For example, if you're deploying to JBoss Application Server v5.x, you can 
    create a datasource by dropping a configuration file in the deploy directory, 
    for example:</para>
    
    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;datasources&gt;
  &lt;local-tx-datasource&gt;
    &lt;jndi-name&gt;jdbc/jbpm-ds&lt;/jndi-name&gt;
    &lt;connection-url&gt;jdbc:h2:tcp://localhost/~/test&lt;/connection-url&gt;
    &lt;driver-class&gt;org.h2.jdbcx.JdbcDataSource&lt;/driver-class&gt;
    &lt;user-name&gt;sa&lt;/user-name&gt;
    &lt;password&gt;&lt;/password&gt;
  &lt;/local-tx-datasource&gt;
&lt;/datasources&gt;</programlisting>

    <para>If you are however executing in a simple Java environment, you can use the 
    <code>JBPMHelper</code> class to do this for you (see below for tests only) or the following code
    fragment could be used to set up a data source (where we are using the H2 in-memory 
    database in combination with Bitronix in this case).</para>

    <programlisting language="java">
PoolingDataSource ds = new PoolingDataSource();
ds.setUniqueName("jdbc/jbpm-ds");
ds.setClassName("bitronix.tm.resource.jdbc.lrc.LrcXADataSource");
ds.setMaxPoolSize(3);
ds.setAllowLocalTransactions(true);
ds.getDriverProperties().put("user", "sa");
ds.getDriverProperties().put("password", "sasa");
ds.getDriverProperties().put("URL", "jdbc:h2:mem:jbpm-db");
ds.getDriverProperties().put("driverClassName", "org.h2.Driver");
ds.init();</programlisting>

    </section>

    <section>
      <title>Configuring the engine to use persistence using <code>JBPMHelper</code> - for tests only</title>

      <para>You need to configure the jBPM engine to use persistence, usually simply by using
        the appropriate constructor when creating your session.  There are various ways to create
        a session (as we have tried to make this as easy as possible for you and have several
        utility classes for you, depending for example if you are trying to write a process JUnit
        test).</para>

      <para>The easiest way to do this is to use the <code>jbpm-test</code> module that allows you to easily
        create and test your processes.  The <code>JBPMHelper</code> class has a method to create a session,
        and uses a configuration file to configure this session, like whether you want to use persistence,
        the datasource to use, etc.  The helper class will then do all the setup and configuration
        for you.</para>

      <para>To configure persistence, create a <filename>jBPM.properties</filename> file and configure the following properties
        (note that the example below are the default properties, using an H2 in-memory database with persistence
        enabled, if you are fine with all of these properties, you don't need to add new properties file, as it
        will then use these properties by default):</para>

      <programlisting>
# for creating a datasource
persistence.datasource.name=jdbc/jbpm-ds
persistence.datasource.user=sa
persistence.datasource.password=
persistence.datasource.url=jdbc:h2:tcp://localhost/~/jbpm-db
persistence.datasource.driverClassName=org.h2.Driver

# for configuring persistence of the session
persistence.enabled=true
persistence.persistenceunit.name=org.jbpm.persistence.jpa
persistence.persistenceunit.dialect=org.hibernate.dialect.H2Dialect

# for configuring the human task service
taskservice.enabled=true
taskservice.datasource.name=org.jbpm.task
taskservice.usergroupcallback=org.jbpm.services.task.identity.JBossUserGroupCallbackImpl
taskservice.usergroupmapping=classpath:/usergroups.properties
      </programlisting>

      <para>If you want to use persistence, you must make sure that the datasource (that you specified
        in the <filename>jBPM.properties</filename> file) is initialized correctly.  This means that the database itself must
        be up and running, and the datasource should be registered using the correct name.  If you would like
        to use an H2 in-memory database (which is usually very easy to do some testing), you can use the
        <code>JBPMHelper</code> class to start up this database, using:</para>

      <programlisting language="java">
JBPMHelper.startH2Server();
      </programlisting>

      <para>To register the datasource (this is something you always need to do, even if you're not using H2
        as your database, check below for more options on how to configure your datasource), use:</para>

      <programlisting language="java">
JBPMHelper.setupDataSource();
      </programlisting>

      <para>Next, you can use the <code>JBPMHelper</code> class to create your session (after creating your knowledge base,
        which is identical to the case when you are not using persistence):</para>

      <programlisting language="java">
StatefulKnowledgeSession ksession = JBPMHelper.newStatefulKnowledgeSession(kbase);
      </programlisting>

      <para>Once you have done that, you can just call methods on this ksession (like <code>startProcess</code>)
        and the engine will persist all runtime state in the created datasource.</para>

      <para>You can also use the <code>JBPMHelper</code> class to recreate your session (by restoring its state
        from the database, by passing in the session id (that you can retrieve using <code>ksession.getId()</code>)):</para>

      <programlisting language="java">
StatefulKnowledgeSession ksession = JBPMHelper.loadStatefulKnowledgeSession(kbase, sessionId);
      </programlisting>

    </section>
  
</section>
