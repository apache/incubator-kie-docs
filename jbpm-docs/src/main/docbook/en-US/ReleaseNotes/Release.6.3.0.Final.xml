<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd" xml:base="./../" xml:id="jBPMReleaseNotes630" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>New and Noteworthy in jBPM 6.3.0</title>
  <para>The following features were added to jBPM 6.3.</para>
  
  <section>
    <title>Process engine extensions</title>
    <itemizedlist>
      <listitem>
        <para>JavaScript as script language</para>
        <para>You can now use JavaScript as dialect in scripts (script task and on-entry and on-exit scripts) and for
        constraints (for example on gateways).  Same as with the Java and MVEL dialect, you have direct access to variables,
        globals and to the kcontext variable (giving you access to the ProcessContext).</para>
        <para>For example, you can write something like:
          <programlisting>kcontext.setVariable('surname', "tester");
var text = 'Hello ';
print(text + kcontext.getVariable('name') + '\n');
try {
  somethingInvalid;
} catch(err) {
  print(err + '\n');
}</programlisting>
        </para>
      </listitem>
    </itemizedlist>
    <itemizedlist>
      <listitem>
        <para>Async continuation </para>
        <para>Async continuation simplifies usage of asynchronous processing of process activities.
          Simply marking process activity as async will instruct the engine to complete current
          processing (including committing transaction) before entering that activity. This in turn
          will allow more control over what is executed in sequence and improve overall managebility
          of process execution. <link
            xlink:href="http://mswiderski.blogspot.com/2015/04/asynchronous-continuation-in-jbpm-63.html"
            >Here</link> you can read an article describing this in details.</para>
      </listitem>
      <listitem>
        <para>Signal scopes</para>
        <para>Version 6.3 comes with improved support for signaling process instances. Based on
          concepts of singals defined in BPMN2 jBPM provides additional characteristic to them - the
          scope. Scope defines how to propagate the signal:</para>
        <para>
          <itemizedlist>
            <listitem>
              <para>process instance scope - signals only elements within the same process instance,
                other process isntances won't be affected</para>
            </listitem>
            <listitem>
              <para>default (ksession) scope - signals all elements that are waiting for given
                signal and are known to running ksession</para>
            </listitem>
            <listitem>
              <para>project scope - signals all components within given project (that means managed
                by the same instance of runtime manager)</para>
            </listitem>
            <listitem>
              <para>external scope - pluggable scope that allow to customize signal propagation -
                jBPM 6.3 comes with JMS based implementation which is enabled in workbench
                (receiving part)</para>
            </listitem>
          </itemizedlist>
        </para>
        <para>More about the improved signaling can be found in <link
            xlink:href="http://mswiderski.blogspot.com/2015/09/improved-signaling-in-jbpm-63.html"
            >this article</link>.</para>
      </listitem>
      <listitem>
        <para>Improved search capabilities when using jbpm services (RuntimeDataService) that
          allows</para>
        <para>
          <itemizedlist>
            <listitem>
              <para>search by correlation key</para>
            </listitem>
            <listitem>
              <para>search by process variable name</para>
            </listitem>
            <listitem>
              <para>search by process variable name and value</para>
            </listitem>
          </itemizedlist>
        </para>
      </listitem>
      <listitem>
        <para>Throw async signals</para>
        <para>If there are several process instances from different process definitions, all of them
          waiting the same signal and only one of these process instances throws a RuntimeException
          all others not related will not move forward as well, because they are executed
          sequentially in the same transaction. That creates heavy dependency between unrelated
          process instances. Asynchronous throw event solves the problem by individually signaling
          each process instance in background.</para>
      </listitem>
    </itemizedlist>
  </section>
  
  <section>
    <title>Case management API</title>
    <para>The core process engine has always contained the flexibility to model adaptive and flexible processes.
    These kinds of features are typically also required in the context of case management. To simplify picking up some
    of these more advanced features, we created a (wrapper) API that exposes some of these features in a simple API.  Note
    that this API simply relies on other existing features / API and can easily be extended.  The API and implementation
    is added as part of a new jbpm-case-mgmt module.</para>    
    <itemizedlist>
      <listitem>
        <para>Process instance description</para>
        <para>Each case can have a unique name, specific to that case.</para>
      </listitem>
      <listitem>
        <para>Case roles</para>
        <para>A case can keep track of who is participating by using case roles.  These roles can be defined as part of
        the case definition (by giving them a name and (optionally) a cardinality).  Case roles could also be defined
        dynamically (at runtime).  For active case instances, specific users can be assigned to roles.</para>
      </listitem>
      <listitem>
        <para>Ad-hoc cases</para>
        <para>One can start a new case without even having a case definition.  Whatever happens inside this case is
        completely determined at runtime.</para>
      </listitem>
      <listitem>
        <para>Case file</para>
        <para>A case can contain any kind of data, from simple key-value pairs to custom data objects or documents.</para>
      </listitem>
      <listitem>
        <para>Ad-hoc tasks</para>
        <para>Using the ad-hoc constructs available in BPMN2, one can model optional process fragments, where only
        at runtime it is decided which of these fragments should be executed (and how many times). This could be driven
        by end users (selecting optional fragments for execution) or automatically (for example by rules that trigger certain
        fragments under certain conditions, or whenever triggered by external services).</para>
      </listitem>
      <listitem>
        <para>Dynamic tasks</para>
        <para>It is possible to add new tasks dynamically, even if they weren't defined upfront (in the case definition).
        This includes human tasks, service tasks and other processes.</para>
      </listitem>
      <listitem>
        <para>Milestones</para>
        <para>You can define milestones as part of the case definition (or even dynamically) and keep track of which 
        milestones were reach for specific case instances.</para>
      </listitem>
    </itemizedlist>    
  </section>
  
    <section>
    <title>Remote API</title>
    <para>The remote REST API for accessing the workbench received the following extensions:</para>
    <itemizedlist>
      <listitem>
        <para>Process instance image</para>
        <para>Through the remote REST API you can now retrieve an image that represents the status of a particular process instance, 
          annotated on the process diagram. This will generate the same image as you could already see in the workbench by looking 
          at the process instance diagram, i.e. active nodes will be marked with a red border and completed nodes have a gray background. 
          This is generated based on the SVG of the process diagram, which can automatically be generated by designer whenever 
          saving a process. </para>
        <note>A new <code>SVGImageProcessor</code> has been used to add the necessary annotations based on the audit log data. 
          Note that this processor (in the <code>jbpm-process-svg</code> module) could be extended to support more advanced 
          visualizations.</note>
        <para>This feature is unfortunately not active by default! In order to activate this feature, it is necessary to follow the 
          following steps:</para>
        <orderedlist>
          <listitem><simpara>Open the <code>org.kie.workbench.KIEWebapp/profiles/jbpm.xml</code> file in the kie-wb war.</simpara></listitem>
          <listitem><simpara>Towards the top of this <code>jbpm.xml</code> file, you'll see the following xml element: </simpara>
            <programlisting><![CDATA[<storesvgonsave enabled="false"/>]]></programlisting>
          <simpara>Change the <code>false</code> value here to <emphasis role="bold"><code>true</code></emphasis>.</simpara></listitem>
          <listitem><simpara>(Re)Deploy the war</simpara></listitem>
        </orderedlist>
        <para>Furthermore, only process definitions that have been opened in the designer <emphasis>after this modification</emphasis> 
          will be available via the REST operations described below. However, providing process images by default via REST (without having to 
          turn on an option or open the process definition in designer) is on the roadmap.</para>
        <para>2 new REST operation URLs have been made available to provide the image: <itemizedlist>
            <listitem>
              <para>The following URL provides an image of the process definition: <programlisting>{server}/jbpm-console/rest/runtime/{deploymentId}/process/{processDefId}/image</programlisting> The <code>deploymentId</code> URL parameter corresponds to the deployment id, while the <code>processDefId</code> parameter corresponds to the process (definition) id. </para>
            </listitem>
            <listitem>
              <para>The following URL provides an image of the process definition, with the active nodes marked to correspond to the process instance URL parameter passed: <programlisting>{server}/jbpm-console/rest/runtime/{deploymentId}/process/{processDefId}/image/{procInstId}</programlisting> The <code>deploymentId</code> URL parameter corresponds to the deployment id, the <code>processDefId</code> parameter corresponds to the process (definition) id, and the <code>procInstId</code> URL parameter corresponds to the process instance id.</para>
            </listitem>
          </itemizedlist>
        </para>
      </listitem>
    </itemizedlist>    
  </section>
  <section>
    <title>OSGi</title>
    <para>The remote clients - kie-remote-client for accessing the workbench
    embedded in the workbench and kie-server-client for the separate (unified)
    execution server - are now also available as an OSGi feature.</para>
  </section>
  
  <section>
    <title>jBPM Designer Data I/O Editor</title>
    <para>jBPM Designer includes a new dialog for editing data inputs and outputs on activities in
      Business Processes. The dialog combines the functions of the dialogs in previous versions of
      jBPM Designer for editing data inputs and outputs, and for defining assignments between data
      inputs/outputs and process variables. The dialog allows the user to:<itemizedlist>
        <listitem>
          <para>create and edit data inputs and data outputs on activities</para>
        </listitem>
        <listitem>
          <para>define assignments from process variables or constants to data inputs, and from data
            outputs to process variables</para>
        </listitem>
      </itemizedlist></para>
    <para>The dialog is accessed by editing the Assignments property for activities which have this
      property, such as User Tasks, or by editing the DataInputAssociations or
      DataOutputAssociations property for activities which have one of these properties. The dialog
      is also available by clicking on a new button associated with those activities for which it is
      relevant:</para>
    <figure>
      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Designer/DataIOEditorButton.png"
              format="PNG"/>
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>
    
  </section>
  <section>
    <title>jBPM executor</title>
    <para>jBPM executor has been significantly enhanced in version 6.3 where the biggest improvement
      was to provide support for JMS based notification mechanism to improve performance for
      immediate job execution. Instead of always relying on poll based mechanism, in case of
      immediate job request the executor is notified via JMS. Though it still provides same set of
      capabilities:</para>
    <itemizedlist>
      <listitem>
        <para>retry mechanism</para>
      </listitem>
      <listitem>
        <para>error handling</para>
      </listitem>
      <listitem>
        <para>search capabilities to look through job requests</para>
      </listitem>
    </itemizedlist>
    <para>Retry mechanism was static in prior versions, which means that the retry happened directly
      with next execution cycle. That made it rather low in terms of usage as in case there was a
      temporary problem e.g. network issue, system not available. It has been improved as well and
      allows configurable retry delay to be specified on each job individually. This delay can be
      given as time expressions that will be calculated from current time stamp. Retry delay can be
      given as: </para>
    <para><itemizedlist>
        <listitem>
          <para>single time expression - 5m or 2h</para>
        </listitem>
        <listitem>
          <para>comma separated list of time expressions that should be used for subsequent retries
            - 10s,10m,1h,1d</para>
        </listitem>
      </itemizedlist> In case number of retry delays is smaller than number of retries it will use
      last available value from the list of retry delays. Which for single value means it will
      always be the same value.</para>
    <para>More information about executor enhancements can be found in these two articles: <link
        xlink:href="http://mswiderski.blogspot.com/2015/08/shift-gears-with-jbpm-executor.html"
        >Shift gears with jBPM executor </link>and <link
        xlink:href="http://mswiderski.blogspot.com/2015/08/asynchronous-processing-with-jbpm-63.html"
        >Asynchronous processing</link></para>
  </section>
  <section>
    <title>Unified KIE Execution Server</title>
    <para>jBPM 6.3 brings in fully featured Unified KIE Execution Server that is based on successful
      KIE Execution Server that was released with 6.2 and covered rules use case. In 6.3 this
      execution server has ben enhanced and now support for rules and process (including user tasks
      and asynchronous jobs). It provides lightweight mechanism for executing your business assets.
      Number of environments can be built with with it:</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>single execution server (similar to workbench)</para>
        </listitem>
        <listitem>
          <para>execution server per kjar</para>
        </listitem>
        <listitem>
          <para>execution server per domain knowledge (set of kjars)</para>
        </listitem>
        <listitem>
          <para>and more...</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>It is prepared to run on almost any container where tested configuration include
      following:</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>JBoss EAP 6.4</para>
        </listitem>
        <listitem>
          <para>Wildfly 8.1 and 8.2</para>
        </listitem>
        <listitem>
          <para>Tomcat 7 and 8</para>
        </listitem>
        <listitem>
          <para>WebSphere 8.5.5.x</para>
        </listitem>
        <listitem>
          <para>Weblogic 12c</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>To get started with KIE Execution Server look at <link
        xlink:href="http://mswiderski.blogspot.com/2015/09/unified-kie-execution-server-part-1.html"
        >this blog series</link> that provides KIE Execution Server introduction.</para>
  </section>
  <section>
    <title>Process and Task Lists UI Improvements</title>
    <para>The process and task lists screens are now backed up by the Dashbuilder's DataSet APIs and data providers. This enable 
    these runtime screens to retrieve the data in a much more efficient way and enable the users to apply more advanced filters.</para>
    <para>
      The initial version for creating filters is provided with jBPM 6.3.0.Final and it will be extended and polished in future versions.
    </para>
     <figure>
      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Console/tasks-dynamic-filter.png"
              format="PNG"/>
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>
    <para>A new button to restore the default filters if needed is provided.</para>
    <para>New filters can be created using the + button. This enable users to have custom filters. There is one filter per tab.</para>
    <figure>
      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Console/new-filter.png"
              format="PNG"/>
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>
    <para>Users can create as many custom filters as they want. These filters will be stored in the user preferences.
    </para>
    <figure>
      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Console/custom-filters.png"
              format="PNG" maxwidth="700"/>
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>
    <para>
      The process instance list now provides domain specific columns to be added in custom filters. 
        When the user creates a custom filter for a specific process definition the process variables are enabled as columns, to the process instance list.
        This feature wil be added to the task list as well in future versions.
    </para>
    <note>Only Process Variables with values will be listed in the column picker inside the custom filter tab.</note>
    <figure>
      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Console/process_instance_evaluation.png"
              format="PNG" maxwidth="700"/>
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>
  </section>
  
</section>
