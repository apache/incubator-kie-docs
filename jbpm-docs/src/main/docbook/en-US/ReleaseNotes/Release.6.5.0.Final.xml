<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd" xml:base="./../" xml:id="jBPMReleaseNotes650" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>New and Noteworthy in jBPM 6.5.0</title>
  <para>The following features were added to jBPM 6.5</para>

  <section>
    <title>Process instance migration</title>
    <para>jbpm services module has been extended with admin capability to allow basic process
      instance migration. Service primary targets migration of process instance:</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>between deployments (kjars)</para>
        </listitem>
        <listitem>
          <para>between process definitions</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>Optionally it allows to perform node mapping of active node instances within process
      instance.</para>
  </section>
  <section>
    <title>Kie Server client - fire and forget and async response handling (JMS)</title>
    <para>Kie Server client has been enhanced to support various response handlers for JMS based
      integration. By default it stays as in previous version (request reply interaction pattern)
      but allows to select another one that might fit better for some uses cases:</para>
    <para>
      <itemizedlist>
        <listitem>
          <para>fire and forget - essentially means there won’t be any response</para>
        </listitem>
        <listitem>
          <para>asynchronous with callback - response to the message will be delivered
            asynchronously to given callback</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  <section>
    <title>Task variables support in TaskLifeCycleEventListener</title>
    <para>6.5 comes with enhancement for accessing task variables (both input and output) from
      within task event listener. Once there is a need to get hold of task variables in the listener
      it’s enough to
      call:<programlisting>@Override
public void beforeTaskStartedEvent(TaskEvent event) {

 Task task = event.getTask();
 event.getTaskContext().loadTaskVariables(task);

 Map&lt;String, Object> inputVariables = task.getTaskInputVariables();
 Map&lt;String, Object> outputVariables = task.getTaskOutputVariables();


}</programlisting></para>
  </section>

</section>
