<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="jBPMTaskServiceAPI"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Task Service API</title>
       <para>
              The human task service exposes a Java API for managing the life cycle of tasks. This allows clients 
              to integrate (at a low level) with the human task service. Note that end users should probably not 
              interact with this low-level API directly, but use one of the more user-friendly task clients (see below) 
              instead. These clients offer a graphical user interface to request task lists, claim and complete tasks, 
              and manage tasks in general. The task clients listed below use the Java API to internally interact with 
              the human task service. Of course, the low-level API is also available so that developers can use it in 
              their code to interact with the human task service directly.
       </para>
       <para>
              A task service (interface org.kie.api.task.TaskService) offers the following methods (among others) for 
              managing the life cycle of human tasks:
       </para>
       <programlisting>
              ...
              
              void start( long taskId, String userId );

              void stop( long taskId, String userId );

              void release( long taskId, String userId );

              void suspend( long taskId, String userId );

              void resume( long taskId, String userId );

              void skip( long taskId, String userId );

              void delegate(long taskId, String userId, String targetUserId);

              void complete( long taskId, String userId, Map&lt;String, Object&gt; results );
              
              ...
              
       </programlisting>
       <para>
              If you take a look at the method signatures you will notice that almost all of these methods take the following arguments:
       </para>
       <itemizedlist>
              <listitem>
                     <para>
                     taskId: The id of the task that we are working with. This is usually extracted from the currently 
                     selected task in the user task list in the user interface.
                     </para>
              </listitem>
              <listitem>
                     <para>
                     userId: The id of the user that is executing the action. This is usually the id of the user that is logged in into the application.
                     </para>
              </listitem>
       </itemizedlist>
       <para>
              There is also an internal interface that you should check for more methods to interact with the Task Service, this interface is internal
              until it gets tested. Future version of the External (public) interface can include some of the methods proposed in the InternalTaskService
              interface. 
              If you want to make use of the methods provided by this interface you need to manually cast to InternalTaskService.
              One method that can be useful from this interface is getTaskContent():
       </para>
       <programlisting>
               Map&lt;String, Object&gt; getTaskContent( long taskId );
       </programlisting>
       <para>
              This method saves you from doing all the boiler plate of getting the ContentMarshallerContext to unmarshall the serialized version of the task content.
              If you only want to use the stable/public API's you can just copy what this method does: 
       </para>
       <programlisting>
              Task taskById = taskQueryService.getTaskInstanceById(taskId);
              Content contentById = taskContentService.getContentById(taskById.getTaskData().getDocumentContentId());
              ContentMarshallerContext context = getMarshallerContext(taskById);
              Object unmarshalledObject = ContentMarshallerHelper.unmarshall(contentById.getContent(), context.getEnvironment(), context.getClassloader());
              if (!(unmarshalledObject instanceof Map)) {
                  throw new IllegalStateException(" The Task Content Needs to be a Map in order to use this method and it was: "+unmarshalledObject.getClass());
      
              }
              Map&lt;String, Object&gt; content = (Map&lt;String, Object&gt;) unmarshalledObject;
              return content;
       </programlisting>
       <para>Because the content of the Task can be any Object, the previous method assume that you are storing a Map of objects to work. 
       If you are storing other than a Map you should do the correspondent checks. </para>
       <para/>
       <section>
              <title>Data model of task service</title>
              <para>Below is the data base model used by task service with all tables and their
                     relationship illustrated. </para>
              <para><inlinemediaobject>
                            <imageobject>
                                   <imagedata fileref="images/TaskService/task_schema.png"/>
                            </imageobject>
                     </inlinemediaobject></para>
       </section>
       
</section>
