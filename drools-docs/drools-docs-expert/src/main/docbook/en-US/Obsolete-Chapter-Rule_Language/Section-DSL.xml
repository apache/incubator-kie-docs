<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Domain Specific Languages</title>

  <para>As mentioned previously, <indexterm>
      <primary>Domain Specific Languages</primary>
    </indexterm>(or DSLs) are a way of extending the rule language to your
  problem domain. They are wired in to the rule language for you, and can make
  use of all the underlying rule language and engine features.</para>

  <para>DSLs are used both in the IDE, as well as the web based BRMS. Of
  course as rules are text, you can use them even without this tooling.</para>

  <section>
    <title>When to use a DSL</title>

    <para>DSLs can serve as a layer of separation between rule authoring (and
    rule authors) and the domain objects that the engine operates on. DSLs can
    also act as "templates" of conditions or actions that are used over and
    over in your rules, perhaps only with parameters changing each time. If
    your rules need to be read and validated by less technical folk, (such as
    Business Analysts) the DSLs are definitely for you. If the conditions or
    consequences of your rules follow similar patterns which you can express
    in a template. You wish to hide away your implementation details, and
    focus on the business rule. You want to provide a controlled means of
    editing rules based on pre-defined templates.</para>

    <para>DSLs have no impact on the rules at runtime, they are just a
    parse/compile time feature.</para>

    <para>Note that Drools 4 DSLs are quite different from Drools 2 XML based
    DSLs. It is still possible to do Drools 2 style XML languages - if you
    require this, then take a look at the Drools 4 XML rule language, and
    consider using XSLT to map from your XML language to the Drools 4 XML
    language.</para>
  </section>

  <section>
    <title>Editing and managing a DSL</title>

    <para>A DSL's configuration like most things is stored in plain text. If
    you use the IDE, you get a nice graphical editor (with some validation),
    but the format of the file is quite simple, and is basically a properties
    file.</para>

    <para>Note that since Drools 4.0, DSLs have become more powerful in
    allowing you to customise almost any part of the language, including
    keywords. Regular expressions can also be used to match words/sentences if
    needed (this is provided for enhanced localisation). However, not all
    features are supported by all the tools (although you can use them, the
    content assistance just may not be 100% accurate in certain cases).</para>

    <example>
      <title>Example <indexterm>
          <primary>DSL</primary>
        </indexterm> mapping</title>

      <programlisting>[when]This is {something}=Something(something=={something})</programlisting>
    </example>

    <para>Referring to the above example, the [when] refers to the scope of
    the expression: ie does it belong on the LHS or the RHS of a rule. The
    part after the [scope] is the expression that you use in the rule
    (typically a natural language expression, but it doesn't have to be). The
    part on the right of the "=" is the mapping into the rule language (of
    course the form of this depends on if you are talking about the RHS or the
    LHS - if its the LHS, then its the normal LHS syntax, if its the RHS then
    its fragments of Java code for instance).</para>

    <para>The parser will take the expression you specify, and extract the
    values that match where the {something} (named Tokens) appear in the
    input. The values that match the tokens are then interpolated with the
    corresponding {something} (named Tokens) on the right hand side of the
    mapping (the target expression that the rule engine actually uses).</para>

    <para>Note also that the "sentences" above can be regular expressions.
    This means the parser will match the sentence fragements that match the
    expressions. This means you can use (for instance) the '?' to indicate the
    character before it is optional (think of each sentence as a regular
    expression pattern - this means if you want to use regex characters - you
    will need to escape them with a '\' of course.</para>

    <para>It is important to note that the DSL expressions are processed one
    line at a time. This means that in the above example, all the text after
    "This is " to the end of the line will be included as the value for
    "{something}" when it is interpolated into the target string. This may not
    be exactly what you want, as you may want to "chain" together different
    DSL expressions to generate a target expression. The best way around this
    is to make sure that the {tokens} are enclosed with characters or words.
    This means that the parser will scan along the sentence, and pluck out the
    value BETWEEN the characters (in the example below they are
    double-quotes). Note that the characters that surround the token are not
    included in when interpolating, just the contents between them (rather
    then all the way to the end of the line, as would otherwise be the
    case).</para>

    <para>As a rule of thumb, use quotes for textual data that a rule editor
    may want to enter. You can also wrap words around the {tokens} to make
    sure you enclose the data you want to capture (see other example).</para>

    <example>
      <title>Example with quotes</title>

      <programlisting>[when]This is "{something}" and "{another}"=Something(something=="{something}", another=="{another}")
[when]This is {also} valid=Another(something=="{also}")</programlisting>
    </example>

    <para>It is a good idea to try and avoid punctuation in your DSL
    expressions where possible, other then quotes and the like - keep it
    simple and things will be easier. Using a DSL can make debugging slightly
    harder when you are first building rules, but it can make the maintenance
    easier (and of course the readability of the rules).</para>

    <para>The "{" and "}" characters should only be used on the left hand side
    of the mapping (the expression) to mark tokens. On the right hand side you
    can use "{" and "}" on their own if needed - such as</para>
    <programlisting>if (foo) \{
    doSomething();\ }</programlisting>
    <para>as well as with the token names as shown
    above.</para>
    <para>PLEASE NOTE that if you want curly braces to appear literally as curly braces, then escape them with a backslack (\). Otherwise it may think it is a token to be replaced.
  </para>
    <para>Don't forget that if you are capturing strings from users, you will
    also need the quotes on the right hand side of the mapping, just like a
    normal rule, as the result of the mapping must be a valid expression in
    the rule language.</para>

    <example>
      <title>Some more examples</title>

      <programlisting>#This is a comment to be ignored.
[when]There is a Person with name of "{name}"=Person(name=="{name}")
[when]Person is at least {age} years old and lives in "{location}"=Person(age &gt; {age}, location=="{location}")
[then]Log "{message}"=System.out.println("{message}");
[when]And = and</programlisting>
    </example>

    <para>Referring to the above examples, this would render the following
    input as shown below:</para>
    <example>
        <title>Some examples as processed</title>

        <programlisting>There is a Person with name of "kitty" ---&gt; Person(name="kitty")
Person is at least 42 years old and lives in "atlanta" ---&gt; Person(age &gt; 42, location="atlanta")
Log "boo" ---&gt; System.out.println("boo");
There is a Person with name of "bob" and Person is at least 30 years old and lives in "atlanta" 
          ---&gt; Person(name="kitty") and Person(age &gt; 30, location="atlanta")</programlisting>
      </example>
  </section>

  <section>
    <title>Using a DSL in your rules</title>

    <para>A good way to get started if you are new to Rules (and DSLs) is just
    write the rules as you normally would against your object model. You can
    unit test as you go (like a good agile citizen!). Once you feel
    comfortable, you can look at extracting a domain language to express what
    you are doing in the rules. Note that once you have started using the
    "expander" keyword, you will get errors if the parser does not recognize
    expressions you have in there - you need to move everything to the DSL. As
    a way around this, you can prefix each line with "&gt;" and it will tell
    the parser to take that line literally, and not try and expand it (this is
    handy also if you are debugging why something isn't working).</para>

    <para>Also, it is better to rename the extension of your rules file from
    ".drl" to ".dslr" when you start using DSLs, as that will allow the IDE to
    correctly recognize and work with your rules file.</para>

    <para>As you work through building up your DSL, you will find that the DSL
    configuration stabilizes pretty quickly, and that as you add new rules and
    edit rules you are reusing the same DSL expressions over and over. The aim
    is to make things as fluent as possible.</para>

    <para>To use the DSL when you want to compile and run the rules, you will
    need to pass the DSL configuration source along with the rule source.</para>
    <programlisting>PackageBuilder builder = new PackageBuilder();
builder.addPackageFromDrl( source, dsl );
//source is a reader for the rule source, dsl is a reader for the DSL configuration
</programlisting>
    <para>You will also need to specify the expander by name in the
    rule source file:</para>
    <programlisting>expander your-expander.dsl
</programlisting>
    <para>Typically you keep the DSL in the same directory as the rule,
    but this is not required if you are using the above API (you only need to
    pass a reader). Otherwise everything is just the same.</para>

    <para>You can chain DSL expressions together on one line, as long as it is
    clear to the parser what the {tokens} are (otherwise you risk reading in
    too much text until the end of the line). The DSL expressions are
    processed according to the mapping file, top to bottom in order. You can
    also have the resulting rule expressions span lines - this means that you
    can do things like:</para>

    <example>
	    <title>Chaining DSL Expressions</title>
      <programlisting>There is a person called Bob who is happy
  Or
There is a person called Mike who is sad
</programlisting>
    </example>

    <para>Of course this assumes that "Or" is mapped to the "or" conditional
    element (which is a sensible thing to do).</para>
  </section>

  <section>
    <title>Adding constraints to facts</title>

    <para>A common requirement when writing rule conditions is to be able to
    add many constraints to fact declarations. A fact may have many (dozens)
    of fields, all of which could be used or not used at various times. To
    come up with every combination as separate DSL statements would in many
    cases not be feasible.</para>

    <para>The DSL facility allows you to achieve this however, with a simple
    convention. If your DSL expression starts with a "-", then it will be
    assumed to be a field constraint, which will be added to the declaration
    that is above it (one per line).</para>

    <para>This is easier to explain with an example. Lets take look at Cheese
    class, with the following fields: type, price, age, country. We can
    express some LHS condition in normal DRL like the following</para>
    <programlisting>Cheese(age &lt; 5, price == 20, type=="stilton", country=="ch")</programlisting>
    <para>If you know ahead of time that you will use all the fields, all the time,
    it is easy to do a mapping using the above techniques. However, chances
    are that you will have many fields, and many combinations. If this is the
    case, you can setup your mappings like so:</para>
    <programlisting>[when]There is a Cheese with=Cheese()
[when]- age is less than {age}=age&lt;{age}
[when]- type is '{type}'=type=='{type}'
[when]- country equal to '{country}'=country=='{country}'</programlisting>

    <para><emphasis role="bold">IMPORTANT:</emphasis> It is NOT possible to
    use the "-" feature after an <emphasis role="bold">accumulate</emphasis>
    statement to add constraints to the accumulate pattern. This limitation
    will be removed in the future.</para>

    <para>You can then write rules with conditions like the following:
    <programlisting>There is a Cheese with
        - age is less than 42
        - type is 'stilton'</programlisting> The parser will pick up the "-"
    lines (they have to be on their own line) and add them as constraints to
    the declaration above. So in this specific case, using the above mappings,
    is the equivalent to doing (in DRL): <programlisting>Cheese(age&lt;42, type=='stilton')</programlisting>
    The parser will do all the work for you, meaning you just define mappings
    for individual constraints, and can combine them how you like (if you are
    using context assistant, if you press "-" followed by CTRL+space it will
    conveniently provide you with a filtered list of field constraints to
    choose from.</para>

    <para>To take this further, after alter the DSL to have
    [when][org.drools.Cheese]- age is less than {age} ... (and similar to all
    the items in the example above).</para>

    <para>The extra [org.drools.Cheese] indicates that the sentence only
    applies for the main constraint sentence above it (in this case "There is
    a Cheese with"). For example, if you have a class called "Cheese" - then
    if you are adding contraints to the rule (by typing "-" and waiting for
    content assistance) then it will know that only items marked as having an
    object-scope of "com.yourcompany.Something" are valid, and suggest only
    them. This is entirely optional (you can leave out that section if needed
    - OR it can be left blank).</para>
  </section>

  <section>
    <title>How it works</title>

    <para>DSLs kick in when the rule is parsed. The DSL configuration is read
    and supplied to the parser, so the parser can "expand" the DSL expressions
    into the real rule language expressions.</para>

    <para>When the parser is processing the rules, it will check if an
    "expander" representing a DSL is enabled, if it is, it will try to expand
    the expression based on the context of where it is the rule. If an
    expression can not be expanded, then an error will be added to the
    results, and the line number recorded (this insures against typos when
    editing the rules with a DSL). At present, the DSL expander is fairly
    space sensitive, but this will be made more tolerant in future releases
    (including tolerance for a wide range of punctuation).</para>

    <para>The expansion itself works by trying to match a line against the
    expression in the DSL configuration. The values that correspond to the
    token place holders are stored in a map based on the name of the token,
    and then interpolated to the target mapping. The values that match the
    token placeholders are extracted by either searching until the end of the
    line, or until a character or word after the token place holder is
    matched. The "{" and "}" are not included in the values that are
    extracted, they are only used to demarcate the tokens - you should not use
    these characters in the DSL expression (but you can in the target).</para>
  </section>

  <section>
    <title>Creating a DSL from scratch</title>

    <para>DSLs can be aid with capturing rules if the rules are well known,
    just not in any technically usable format (ie. sitting around in people
    brains). Until we are able to have those little sockets in our necks like
    in the Matrix, our means of getting stuff into computers is still the old
    fashioned way.</para>

    <para>Rules engines require an object or a data model to operate on - in many
    cases you may know this up front. In other cases the model will be
    discovered with the rules. In any case, rules generally work better with
    simpler flatter object models. In some cases, this may mean having a rule
    object model which is a subset of the main applications model (perhaps
    mapped from it). Object models can often have complex relationships and
    hierarchies in them - for rules you will want to simplify and flatten the
    model where possible, and let the rule engine infer relationships (as it
    provides future flexibility). As stated previously, DSLs can have an
    advantage of providing some insulation between the object model and the
    rule language.</para>

    <para>Coming up with a DSL is a collaborative approach for both technical
    and domain experts. Historically there was a role called "knowledge
    engineer" which is someone skilled in both the rule technology, and in
    capturing rules. Over a short period of time, your DSL should stabilize,
    which means that changes to rules are done entirely using the DSL. A
    suggested approach if you are starting from scratch is the following
    workflow: <itemizedlist>
        <listitem>
          <para>Capture rules as loose "if then" statements - this is really
          to get an idea of size and complexity (possibly in a text
          document).</para>
        </listitem>

        <listitem>
          <para>Look for recurring statements in the rules captured. Also look
          for the rule objects/fields (and match them up with what may already
          be known of the object model).</para>
        </listitem>

        <listitem>
          <para>Create a new DSL, and start adding statements from the above
          steps. Provide the "holes" for data to be edited (as many statements
          will be similar, with only some data changing).</para>
        </listitem>

        <listitem>
          <para>Use the above DSL, and try to write the rules just like that
          appear in the "if then" statements from the first and second steps.
          Iterate this process until patterns appear and things stabilize. At
          this stage, you are not so worried about the rule language
          underneath, just the DSL.</para>
        </listitem>

        <listitem>
          <para>At this stage you will need to look at the Objects, and the
          Fields that are needed for the rules, reconcile this with the
          datamodel so far.</para>
        </listitem>

        <listitem>
          <para>Map the DSL statements to the rule language, based on the
          object model. Then repeat the process. Obviously this is best done
          in small steps, to make sure that things are on the right
          track.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section>
    <title>Scope and keywords</title>

    <para>If you are editing the DSL with the GUI, or as text, you will notice
    there is a [scope] item at the start of each mapping line. This indicates
    if the sentence/word applies to the LHS, RHS or is a keyword. Valid values
    for this are [condition], [consequence] and [keyword] (with [when] and
    [then] being the same as [condition] and [consequence] respectively). When
    [keyword] is used, it means you can map any keyword of the language like
    "rule" or "end" to something else. Generally this is only used when you
    want to have a non English rule language (and you would ideally map it to
    a single word).</para>
  </section>

  <section>
    <title>DSLs in the BRMS and IDE</title>

    <para>You can use DSLs in the BRMS in both guided editor rules, and
    textual rules that use a dsl. (In fact, the same applies to the
    IDE).</para>

    <para>In the guided editor - the DSLs generally have to be simpler - what
    you are doing is defining little "forms" to capture data from users in
    text fields (ie as you pick a DSL expression - it will add an item to the
    GUI which only allows you enter data in the {token} parts of a DSL
    expression). You can not use sophisticated regular expressions to match
    text. However, in textual rules (which have a .dslr extension in the IDE)
    you are free to use the full power as needed.</para>

    <para>In the BRMS - when you build a package the DSLs are already included
    and all the work is done for you. In the IDE (or in any IDE) - you will
    either need to use the drools-ant task, or otherwise use the code shown in
    sections above.</para>
  </section>
</section>
