<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Function</title>

  <figure>
    <title>function</title>

    <mediaobject>
      <imageobject>
	      <imagedata align="center" fileref="images/Chapter-Rule_Language/function.png" format="PNG" role="" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Functions are a way to put semantic code in your rule source file, as
  opposed to in normal Java classes. They can't do anything more than what you
  can do with helper classes. (In fact, the compiler generates the helper class
  for you behind the scenes.) The main advantage of using functions in a rule
  is that you can keep the logic all in one place, and you can change the
  functions as needed (which can be a good or a bad thing). Functions are most
  useful for invoking actions on the consequence (<kw>then</kw>) part of a rule,
  especially if that particular action is used over and over again, perhaps
  with only differing parameters for each rule.</para>

  <para>A typical function declaration looks like:</para>

  <programlisting>function String hello(String name) {
    return "Hello "+name+"!";
}
</programlisting>

  <para>Note that the <kw>function</kw> keyword is used, even though its not really
  part of Java. Parameters to the function are defined as for a method, and
  you don't have to have parameters if they are not needed. The return type
  is defined just like in a regular method.</para>

  <para>Alternatively, you could use a static method in a helper class,
  e.g., <code>Foo.hello()</code>. Drools supports the use of
  function imports, so all you would need to do is:</para>

  <programlisting>import function my.package.Foo.hello</programlisting>

  <para>Irrespective of the way the function is defined or imported, you
  use a function by calling it by its name, in the consequence or inside
  a semantic code block. Example:</para>

  <programlisting>rule "using a static function"
when 
    eval( true )
then
    System.out.println( hello( "Bob" ) );
end
</programlisting>
</section>
