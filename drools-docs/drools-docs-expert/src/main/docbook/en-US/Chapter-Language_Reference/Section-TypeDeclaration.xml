<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Type Declaration</title>

  <figure>
    <title>meta_data</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Rule_Language/meta_data.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <figure>
    <title>type_declaration</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Rule_Language/type_declaration.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>Type declarations have two main goals in the rules engine: to allow
  the declaration of new types, and to allow the declaration of metadata for
  types.</para>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Declaring new types:</emphasis> Drools works
      out of the box with plain POJOs as facts. Although, sometimes the users
      may want to define the model directly to the rules engine, without
      worrying to create their models in a lower level language like Java. At
      other times, there is a domain model already built, but eventually the
      user wants or needs to complement this model with additional entities
      that are used mainly during the reasoning process.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Declaring metadata:</emphasis> facts may
      have meta information associated to them. Examples of meta information
      include any kind of data that is not represented by the fact attributes
      and are consistent among all instances of that fact type. This meta
      information may be queried at runtime by the engine and used in the
      reasoning process.</para>
    </listitem>
  </itemizedlist>

  <section>
    <title>Declaring New Types</title>

    <para>To declare a new type, all you need to do is use the keyword
    <emphasis role="bold">declare</emphasis>, followed by the list of fields
    and the keyword <emphasis role="bold">end</emphasis>.</para>

    <example>
      <title>declaring a new fact type: Address</title>

      <programlisting><emphasis role="bold">declare</emphasis> Address
   number : int
   streetName : String
   city : String
<emphasis role="bold">end</emphasis>
</programlisting>
    </example>

    <para>The previous example declares a new fact type called
    <emphasis>Address</emphasis>. This fact type will have 3 attributes:
    <emphasis>number</emphasis>, <emphasis>streetName</emphasis> and
    <emphasis>city</emphasis>. Each attribute has a type that can be any valid
    Java type, including any other class created by the user or even other
    fact types previously declared.</para>

    <para>For instance, we may want to declare another fact type
    <emphasis>Person</emphasis>:</para>

    <para><example>
        <title>declaring a new fact type: Person</title>

        <programlisting><emphasis role="bold">declare</emphasis> Person
    name : String
    dateOfBirth : java.util.Date
    address : Address
<emphasis role="bold">end</emphasis>
</programlisting>
      </example>As we can see on the previous example,
    <emphasis>dateOfBirth</emphasis> is of type <code>java.util.Date</code>,
    from the Java API, while <emphasis>address</emphasis> is of the previously
    defined fact type Address.</para>

    <para>You may avoid having to write the fully qualified name of a class
    every time you write it by using the <emphasis
    role="bold">import</emphasis> clause, previously discussed.</para>

    <para><example>
        <title>avoiding the need to use fully qualified class names by using
        import</title>

        <programlisting><emphasis role="bold">import</emphasis> java.util.Date

<emphasis role="bold">declare</emphasis> Person
    name : String
    dateOfBirth : Date
    address : Address
<emphasis role="bold">end</emphasis></programlisting>
      </example></para>

    <para>When you declare a new fact type, Drools will, at compile time,
    generate bytecode implementing a POJO that represents the fact type. The
    generated Java class will be a one-to-one Java Bean mapping of the type
    definition. So, for the previous example, the generated Java class would
    be:</para>

    <para><example>
        <title>generated Java class for the previous Person fact type
        declaration</title>

        <programlisting><emphasis role="bold">public</emphasis> <emphasis
            role="bold">class</emphasis> Person implements Serializable {
    <emphasis role="bold">private</emphasis> String name;
    <emphasis role="bold">private</emphasis> java.util.Date dateOfBirth;
    <emphasis role="bold">private</emphasis> Address address;

    // getters and setters
    // equals/hashCode
    // toString
}
</programlisting>
      </example>Since it is a simple POJO, the generated class can be used
    transparently in the rules, like any other fact.</para>

    <para><example>
        <title>using the declared types in rules</title>

        <programlisting><emphasis role="bold">rule</emphasis> "Using a declared Type"
<emphasis role="bold">when</emphasis> 
    $p : Person( name == "Bob" )
<emphasis role="bold">then</emphasis>
    System.out.println( "The name of the person is "+ )
    <emphasis>// lets insert Mark, that is Bob's mate</emphasis>
    Person mark = new Person();
    mark.setName("Mark");
    insert( mark );
<emphasis role="bold">end</emphasis>
</programlisting>
      </example></para>
  </section>

  <section>
    <title>Declaring Metadata</title>

    <para>Metadata may be assigned to several different constructions in
    Drools, like fact types, fact attributes and rules. Drools uses the
    <emphasis role="bold">@</emphasis> symbol to introduce metadata, and it
    always uses the form:</para>

    <para><programlisting>@matadata_key( metadata_value )</programlisting>The
    parenthesis and the metadata_value are optional.</para>

    <para>For instance, if you want to declare a metadata attribute like
    <emphasis>author</emphasis>, whose value is <emphasis>Bob</emphasis>, you
    could simply write:</para>

    <example>
      <title>declaring an arbitrary metadata attribute</title>

      <programlisting>@author( Bob )</programlisting>
    </example>

    <para>Drools allows the declaration of any arbitrary metadata attribute,
    but some will have special meaning to the engine, while others are simply
    available for querying at runtime. Drools allows the declaration of
    metadata both for fact types and for fact attributes. Any metadata that is
    declared before the fields of a fact type are assigned to the fact type,
    while metadata declared after an attribute are assigned to the attribute
    in particular.</para>

    <example>
      <title>declaring metadata attributes for fact types and
      attributes</title>

      <programlisting><emphasis role="bold">import</emphasis> java.util.Date

<emphasis role="bold">declare</emphasis> Person
    <emphasis>@author</emphasis>( Bob )
    <emphasis>@dateOfCreation</emphasis>( 01-Feb-2009 )

    name : String <emphasis>@key @maxLength</emphasis>( 30 )
    dateOfBirth : Date 
    address : Address
<emphasis role="bold">end</emphasis></programlisting>
    </example>

    <para>In the previous example, there are two metadata declared for the
    fact type (<emphasis>@author</emphasis> and
    <emphasis>@dateOfCreation</emphasis>), and two more defined for the name
    attribute (<emphasis>@key</emphasis> and <emphasis>@maxLength</emphasis>).
    Please note that the <emphasis>@key</emphasis> metadata has no value, and
    so the parenthesis and the value were omitted.</para>
  </section>

  <section>
    <title>Declaring Metadata for Existing Types</title>

    <para>Drools allows the declaration of metadata attributes for existing
    types in the same way as when declaring metadata attributes for new fact
    types. The only difference is that there are no fields in that
    declaration.</para>

    <para>For instance, if there is a class org.drools.examples.Person, and
    one wants to declare metadata for it, just write the following
    code:</para>

    <example>
      <title>declaring metadata for an existing type</title>

      <programlisting><emphasis role="bold">import</emphasis> org.drools.examples.Person

<emphasis role="bold">declare</emphasis> Person
    <emphasis>@author</emphasis>( Bob )
    <emphasis>@dateOfCreation</emphasis>( 01-Feb-2009 )
<emphasis role="bold">end</emphasis>
</programlisting>
    </example>

    <para>Instead of using the import, it is also possible to reference the
    class by its fully qualified name, but since the class will also be
    referenced in the rules, usually it is shorter to add the import and use
    the short class name everywhere.</para>

    <example>
      <title>declaring metadata using the fully qualified class name</title>

      <programlisting><emphasis role="bold">declare</emphasis> org.drools.examples.Person
    <emphasis>@author</emphasis>( Bob )
    <emphasis>@dateOfCreation</emphasis>( 01-Feb-2009 )
<emphasis role="bold">end</emphasis></programlisting>
    </example>
  </section>

  <section>
    <title>Accessing Declared Types from the Application Code</title>

    <para>Declared types are usually used inside rules files, while Java
    models are used when sharing the model between rules and applications.
    Although, sometimes, the application may need to access and handle facts
    from the declared types, specially when the application is wrapping the
    rules engine and providing higher level, domain specific, user interfaces
    for rules management.</para>

    <para>In such cases, the generated classes can be handled as usual with
    the Java Reflection APIs, but as we know, that usually requires a lot of
    work for small results. This way, Drools provides a simplified API for the
    most common fact handling the application may want to do.</para>

    <para>The first important thing to realize is that a declared fact will
    belong to the package where it was declared. So, for instance, in the
    example below, <emphasis>Person</emphasis> will belong to the
    <emphasis>org.drools.examples</emphasis> package, and so the generated
    class fully qualified name will be:
    <emphasis>org.drools.examples.Person</emphasis>.</para>

    <example>
      <title>declaring a type in the org.drools.examples package</title>

      <programlisting><emphasis role="bold">package</emphasis> org.drools.examples

<emphasis role="bold">import</emphasis> java.util.Date

<emphasis role="bold">declare</emphasis> Person
    name : String
    dateOfBirth : Date
    address : Address
<emphasis role="bold">end</emphasis></programlisting>
    </example>

    <para>Declared types, as discussed previously, are generated at knowledge
    base compilation time, i.e., the application will only have access to them
    at application run time. As so, these classes are not available for direct
    reference from the application.</para>

    <para>Drools then provides an interface through which the users can handle
    declared types from the application code:
    org.drools.definition.type.FactType. Through this interface, the user can
    instantiate, read and write fields in the declared fact types.</para>

    <example>
      <title>handling declared fact types through the API</title>

      <programlisting>// get a reference to a knowledge base with a declared type:
KnowledgeBase kbase = ...

// get the declared FactType
FactType personType = kbase.getFactType( "org.drools.examples",
                                         "Person" );

// handle the type as necessary:
// create instances:
Object bob = personType.newInstance();

// set attributes values
personType.set( bob,
                "name",
                "Bob" );
personType.set( bob,
                "age",
                42 );

// insert fact into a session
StatefulKnowledgeSession ksession = ...
ksession.insert( bob );
ksession.fireAllRules();

// read attributes
String name = personType.get( bob, "name" );
int age = personType.get( bob, "age" );

</programlisting>
    </example>

    <para>The API also includes other helpful methods, like setting all the
    attributes at once, reading values from a Map, or read all attributes at
    once, populating a Map.</para>

    <para>Although the API is similar to Java reflection (yet much simpler to
    use), it does not use reflection underneath, relying in much more
    performant bytecode generated accessors.</para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>
  </section>
</section>
