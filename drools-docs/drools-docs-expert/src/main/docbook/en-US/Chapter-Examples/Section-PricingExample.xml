<?xml version="1.0" encoding="UTF-8"?>
	<section version="5.0" xmlns="http://docbook.org/ns/docbook"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns:xi="http://www.w3.org/2001/XInclude"
                    xmlns:svg="http://www.w3.org/2000/svg"
                    xmlns:m="http://www.w3.org/1998/Math/MathML"
                    xmlns:html="http://www.w3.org/1999/xhtml"
                    xmlns:db="http://docbook.org/ns/docbook" xml:base="../../">

		<title>Pricing Rule Decision Table Example</title>

		<para>The Pricing Rule decision table demonstrates the use of a decision table in a spreadsheet (XLS format) in calculating the retail cost of an insurance policy. The purpose of the set of rules provided is to calculate a base price, and an additional discount for a car driver applying for a specific policy. The drivers age, history and the policy type all contribute to what the basic premium is, and an additional chunk of rules deals with refining this with a subtractive percentage discount.</para>

		<programlisting><emphasis role="bold">Name:</emphasis> Example Policy Pricing
<emphasis role="bold">Main class:</emphasis> org.drools.examples.PricingRuleDTExample
<emphasis role="bold">Type:</emphasis> java application
<emphasis role="bold">Rules file:</emphasis> ExamplePolicyPricing.xls
<emphasis role="bold">Objective:</emphasis> demonstrate spreadsheet based decision tables.    </programlisting>

		<section>
			<title>Executing the example</title>

			<para>Open the PricingRuleDTExample.java and execute it as a Java application. It should produce the following console output:</para>

			<programlisting>Cheapest possible
BASE PRICE IS: 120
DISCOUNT IS: 20     </programlisting>

			<para>The code to the execute the example is very similar to the other examples. The rules are loaded, the facts inserted and a stateless session is used. What is different is how the rules are added:</para>

			<programlisting>DecisionTableConfiguration dtableconfiguration = KnowledgeBuilderFactory.newDecisionTableConfiguration();
        dtableconfiguration.setInputType( DecisionTableInputType.XLS );

        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();

        kbuilder.add( ResourceFactory.newClassPathResource( "ExamplePolicyPricing.xls", getClass() ),
                              ResourceType.DTABLE,
                              dtableconfiguration );
</programlisting>

			<para>Note the use of the DecisionTableConfiguration class. It is what takes the DecisionTableInputType.XLS as input type. If you use the BRMS, all this is of course taken care of for you.</para>

			<para>There are 2 facts used in this example, Driver, and Policy. Both are used with their default values. The Driver is 30 years old, has had no prior claims and currently has a risk profile of LOW. The Policy being applied for is COMPREHENSIVE, and the policy has not yet been approved.</para>
		</section>
		
		<section>
			<title>The decision table</title>

			<para>In this decision table, each row is a rule, and each column is a condition or an action.</para>

			<figure>
				<title>Decision table configuration</title>

				<mediaobject>
					<imageobject>
						<imagedata width="100%"
                     fileref="images/Chapter-Examples/PricingExample/DT_Config.png" />
					</imageobject>
				</mediaobject>
			</figure>

			<para>Referring to the above, we have the RuleSet declaration, which provides the package name. There are also other optional items you can have here, such as Variables for global variables, and Imports for importing classes. In this case, the namespace of the rules is the same as the fact classes we are using, so we can omit it.</para>

			<para>Moving further down, we can see the RuleTable declaration. The name after this (Pricing bracket) is used as the prefix for all the generated rules. Below that, we have CONDITION or ACTION - this indicates the purpose of the column (ie does it form part of the condition, or an action of a rule that will be generated).</para>

			<para>You can see there is a Driver which is spanned across 3 cells, this means the template expressions below it apply to that fact. So we look at the drivers age range (which uses $1 and $2 with comma separated values), locationRiskProfile, and priorClaims in the respective columns. In the action columns, we are setting the policy base price, and then logging a message.</para>

			<figure>
				<title>Base price calculation</title>

				<mediaobject>
					<imageobject>
						<imagedata width="100%"
                     fileref="images/Chapter-Examples/PricingExample/DT_Table1.png" />
					</imageobject>
				</mediaobject>
			</figure>

			<para>Referring to the above, we can see there are broad category brackets (indicated by the comment in the left most column). As we know the details of our driver and their policy, we can tell (with a bit of thought) that they should match row number 18, as they have no prior accidents, and are 30 years old. This gives us a base price of 120.</para>

			<figure>
				<title>Discount calculation</title>

				<mediaobject>
					<imageobject>
						<imagedata width="100%"
                     fileref="images/Chapter-Examples/PricingExample/DT_Table2.png" />
					</imageobject>
				</mediaobject>
			</figure>

			<para>Referring to the above, we are seeing if there is any discount we can give our driver. Based on the Age bracket, number of priot claims, and the policy type, a discount is provided. In our case, the drive is 3, with no priors, and they are applying for COMPREHENSIVE, this means we can give a discount of 20%. Note that this is actually a separate table, but in the same worksheet. This different templates apply.</para>

			<para>It is important to note that decision tables generate rules, this means they aren't simply top down logic, but more a means to capture data that generate rules (this is a subtle difference that confuses some people). The evaluation of the rules is not "top down" necessarily, all the normal indexing and mechanics of the rule engine still apply.</para>
		</section>
	</section>	
