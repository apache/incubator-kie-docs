<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns:xi="http://www.w3.org/2001/XInclude"
                    xmlns:svg="http://www.w3.org/2000/svg"
                    xmlns:m="http://www.w3.org/1998/Math/MathML"
                    xmlns:html="http://www.w3.org/1999/xhtml"
                    xmlns:db="http://docbook.org/ns/docbook" xml:base="../../">
  <title>Testing</title>

  <para>In recent years, practices such as Test Driven Development have become
  increasingly mainstream, as the value and quality that these techniques
  bring to software development has been realized. In a sense, rules are code
  (although at a high level), and a lot of the same principles apply.</para>

  <para>You can provide tests as a means to specify rule behavior before
  rules are even written. Further to this, tests are even more important in
  environments where rules change frequently. Tests can provide a baseline of
  confidence that the rule changes are consistent with what is specified in
  the tests. Of course, the rules may change in such a way as the tests are
  now wrong (or perhaps new tests need to be written to cover the new rule
  behavior). As in TDD practices, tests should be run often, and in a rule
  driven environment, this means that they should be run every time the rules
  change (even though the software may be static).</para>

  <section>
    <title>Testing frameworks</title>

    <para>For developers, clearly JUnit (or TestNG) are popular tools for
    testing code, and these can also apply to rules. Keep in mind that rule
    changes may happen out of sync with code changes, so you should be
    prepared to keep these unit tests up to date with rules (may not be
    possible in all environments). Also, the best idea is to target testing
    some core features of the rule sets that are not as likely to change over
    time.</para>

    <para>Obviously, for rule tests, other non source code driven frameworks
    would be preferable to test rules in some environments. The following
    section outlines a rule testing component add on.</para>
  </section>

  <section>
    <title>FIT for Rules - a rule testing framework</title>

    <para>As a separate add-on, there is a testing framework available that is
    built on FIT (Framework for Integrated Testing). This allows rule test
    suites (functional) to be capture in Word documents, or Excel spreadsheets
    (in fact any tool that can save as HTML). It utilizes a tabular layout to
    capture input data, and make assertions over the rules of a rulesets
    execution for the given facts. As the tests are stored in documents, the
    scenarios and requirements can be (optionally) kept in the same
    documents, providing a single point of truth for rule behavior.</para>

    <para>Also, as the test documents are not code, they can be updated
    frequently, and kept with the rules, used to validate rule changes etc. As
    the input format is fairly simple to people familiar with the domain of
    the rules, it also facilitates "scenario testing" where different
    scenarios can be tried out with the rules - all external to the
    application that the rules are used in. These scenarios can then be kept
    as tests to increase confidence that a rule change is consistent with the
    users understanding.</para>

    <para>This testing framework is built on FIT and JSR-94, and is kept as a
    separate project to JBoss Rules. Due to it being built on FIT, it requires
    a different license (but is still open source). You can download and read
    more about this tool from this web page: <ulink
        url="http://fit-for-rules.sourceforge.net/">
        <citetitle>Fit for rules</citetitle>
      </ulink> http://fit-for-rules.sourceforge.net/</para>

    <para>The following screen captures show the fit for rules framework in
    action.</para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Deployment/Testing1.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Using Fit for rules, you capture test data, pass it to the rule
    engine and then verify the results (with documentation woven in with the
    test). It is expected that in future, the Drools Server tools will provide
    a similar integrated framework for testing (green means good ! red means a
    failure - with the expected values placed in the cell). Refer to
    http://fit.c2.com for more information on the FIT framework itself.</para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Deployment/Testing2.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>More information and downloads from <ulink
        url="http://fit-for-rules.sourceforge.net/">
        <citetitle>Here</citetitle>
      </ulink></para>
  </section>
</section>
