<?xml version="1.0" encoding="UTF-8"?>
<section  version="5.0" xmlns="http://docbook.org/ns/docbook"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns:xi="http://www.w3.org/2001/XInclude"
                    xmlns:svg="http://www.w3.org/2000/svg"
                    xmlns:m="http://www.w3.org/1998/Math/MathML"
                    xmlns:html="http://www.w3.org/1999/xhtml"
                    xmlns:db="http://docbook.org/ns/docbook" xml:base="../../">
  <title>Knowledge Representation</title>

  <!--section>
    <title>Production Rules</title>

    <para>A 
      <indexterm>
        <primary>Production Rule</primary>
      </indexterm>
    Production Rule (aka Rule) in Drools is a two part structure,
    with a Left Hand Side (LHS) and a Right Hand Side (RHS) which are
    alternately known as the "Head" and "Tail" respectively. Additionally a
    Rule may have the following attributes:</para>

    <itemizedlist>
      <listitem>
        <para>salience</para>
      </listitem>

      <listitem>
        <para>agenda-group</para>
      </listitem>

      <listitem>
        <para>auto-focus</para>
      </listitem>

      <listitem>
        <para>activation-group</para>
      </listitem>

      <listitem>
        <para>no-loop</para>
      </listitem>

      <listitem>
        <para>duration</para>
      </listitem>
    </itemizedlist>

    <programlisting>
      <![CDATA[
        rule "<name>" <attribute> <value>
        when <LHS>
        then <RHS>
        end
      ]]>
    </programlisting>

    <para>The LHS of a Rule consists of 
      <indexterm>
        <primary>Conditional Element</primary>
      </indexterm>
    Conditional Elements (CE) and Columns (aka - Patterns); to facilate the
    encoding of propositional and first order logic. The term 
      <indexterm>
        <primary>Column</primary>
      </indexterm>
    Column is used to indicate 
      <indexterm>
        <primary>Field Constraint</primary>
      </indexterm>
    Field Constraints on a Fact.</para>

    <para>Drools currently supports the follows CEs:</para>

    <itemizedlist>
      <listitem>
        <para>'and'</para>
      </listitem>

      <listitem>
        <para>'or',</para>
      </listitem>

      <listitem>
        <para>'not',</para>
      </listitem>

      <listitem>
        <para>'exists'</para>
      </listitem>
    </itemizedlist>

    <para>'forall' and 'accumulate' will be added shortly. 
    The following Field Constraints are allowed:</para>

    <itemizedlist>
      <listitem>
        <para>Literal Constraint</para>
      </listitem>

      <listitem>
        <para>Bound Variable Constraint</para>
      </listitem>

      <listitem>
        <para>Return Value</para>
      </listitem>

      <listitem>
        <para>Predicate</para>
      </listitem>
    </itemizedlist>

    <para>The Language Guide chapter provides more indepth information for
    each of these.</para>

    <para>As facts are asserted and modified in the Working Memory, the rules engine
    matches the facts against the LHS conditions, when all the conditions of a rules
    LHS are met and true that rule plus those match facts are activated. When a Rule is
    activated it is placed onto the Agenda for potential execution, where the
    actions of RHS, called the 
      <indexterm>
        <primary>Consequence</primary>
      </indexterm>
    Consequence, are executed. The LHS and the RHS is analogous to:</para>
    
    <programlisting>
      <![CDATA[
    if (<LHS>) {
      <RHS>
    }
      ]]>
    </programlisting>

    <para>However 'if' is considered procedural in that it is one part of a
    possible execution flow - if this.... else if.... else ..... Rules use
    'when' to more semantically recognise that the rule will activate when,
    and only when, its LHS is matched.</para>

    <para>Rules are associated with a namespace via the
    <literal>package</literal> keyword; other Rule Engines may call this a
    <indexterm>
        <primary>Rule Set</primary>
    </indexterm>
    Rule Set. A Package declares imports, global variables, functions and rules.</para>

    <programlisting>
<![CDATA[
package com.sample

import java.util.List
import com.sample.Cheese

global List cheeses

function void exampleFunction(Cheese cheese) {
    System.out.println( cheese );
}

rule “A Cheesey Rule”
    when
        cheese : Cheese( type == "stilton" )
    then
        exampleFunction( cheese );
        cheeses.add( cheese );
end
]]>
    </programlisting>

    <para>The following example shows a LHS with a single Column that has a
    single 
    <indexterm>
      <primary>Literal Field Constraint</primary>
    </indexterm>
    Literal Field Constraint used with a Cheese Fact:</para>

    <programlisting>
<![CDATA[
rule "Cheddar Cheese"
when
    Cheese( type == "cheddar" )
then
    System.out.println( "cheddar" );
end
  ]]>
    </programlisting>

    <para>The example above is analogous to :</para>

    <programlisting>
<![CDATA[
public void cheddarCheese(Cheese cheese) {
  if ( cheese.getType().equals("cheddar") {
      System.out.println( "cheddar" );
  }
}
]]>
    </programlisting>

    <para>Rules are a complete de-coupling of data from the logic. Rules cannot
    be called directly as they are not methods or functions instead Rules fire
    in response to changes in Working Memory's data. Rules are also fully
    declarative in that they describe "what" not "how" like imperative
    languages such as Java.</para>
  </section-->

  <section>
    <title>First Order Logic</title>

    <para>Rules are written using First Order Logic, or predicate logic, which
    extends Propositional Logic. <ulink
    url="http://en.wikipedia.org/wiki/Emil_Leon_Post">Emil Leon Post</ulink>
    was the first to develop an inference based system using symbols to
    express logic - as a consequence of this he was able to prove that any
    logical system (including mathematics) could be expressed with such a
    system.</para>

    <para>A proposition is a statement that can be classified as true or
    false. If the truth can be determined from statement alone it is said to
    be a "closed statement". In programming terms this is an expression that
    does not reference any variables:</para>

    <para>10 == 2 * 5</para>

    <para>Expressions that evaluate against one or more variables, the facts,
    are "open statements", in that we cannot determine whether the statement
    is true until we have a variable instance to evaluate against:</para>

    <para>Person.sex == "male"</para>

    <para>With SQL if we look at the conclusion's action as simply returning
    the matched fact to the user:</para>

    <para>select * from People where People.sex == "male"</para>

    <para>For any rows, which represent our facts, that are returned we have
    inferred that those facts are male people. The following diagram shows how
    the above SQL statement and People table can be represented in terms of an
    Inference Engine.</para>

    <figure>
      <title>SQL as a simplistic Inference Engine</title>

      <mediaobject>
        <imageobject>
		<imagedata align="center" fileref="images/Chapter-Rule_Engine/Male_People.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>So in Java we can say that a simple proposition is of the form
    'variable' 'operator' 'value' - where we often refer to 'value' as being a
    literal value - a proposition can be thought as a field constraint.
    Further to this proposition can be combined with conjunctive and
    disjunctive connectives, which is the logic theorists way of saying
    '&amp;&amp;' and '||'. The following shows two open propositional
    statements connected together with a single disjunctive connective.</para>

    <programlisting>
      
      person.getEyeColor().equals("blue") || person.getEyeColor().equals("green") 
      
    </programlisting>

    <para>This can be expressed using a disjunctive Conditional Element
    connective - which actually results in the generation of two rules, to
    represent the two possible logic outcomes.</para>

    <programlisting>
      
      Person( eyeColour == "blue" ) || Person( eyeColor == "green" )
      
    </programlisting>

    <para>Disjunctive field constraints connectives could also be used and
    would not result in multiple rule generation.</para>

    <programlisting>
      
      Person( eyeColour == "blue"||"green" )
      
    </programlisting>

    <para>Propositional Logic is not Turing complete, limiting the problems
    you can define, because it cannot express criteria for the structure of
    data. First Order Logic (FOL), or Predicate Logic, extends Propositional
    Logic with two new quantifier concepts to allow expressions defining
    structure - specifically universal and existential quantifiers. Universal
    quantifiers allow you to check that something is true for everything;
    normally supported by the 'forall' conditional element. Existential
    quantifiers check for the existence of something, in that it occurs at
    least once - this is supported with 'not' and 'exists' conditional
    elements.</para>

    <para>Imagine we have two classes - Student and Module. Module represents
    each of the courses the Student attended for that semester, referenced by
    the List collection. At the end of the semester each Module has a score.
    If the Student has a Module score below 40 then they will fail that
    semester - the existential quantifier can be used used with the "less than
    40" open proposition to check for the existence of a Module that is true
    for the specified criteria.</para>

    <programlisting>
    
    public class Student {
    private String name;
    private List modules;

    ...
    }
       
    </programlisting>

    <programlisting>
    
    public class Module {
    private String name;
    private String studentName;
    private int score;
     ...
    }
    </programlisting>

    <para>Java is Turing complete in that you can write code, among other
    things, to iterate data structures to check for existence. The following
    should return a List of students who have failed the semester.</para>

    <programlisting>
    
    List failedStudents = new ArrayList();
    
    for ( Iterator studentIter = students.iterator(); studentIter.hasNext();) {
        Student student = ( Student ) studentIter.next();
        for ( Iterator it = student.getModules.iterator(); it.hasNext(); ) {
            Module module = ( Module ) it.next();
            if ( module.getScore() &lt; 40  ) {
                failedStudents.add( student ) ;
                break;
            }
        }
    }
    
    </programlisting>

    <para>Early SQL implementations were not Turing complete as they did not
    provide quantifiers to access the structure of data. Modern SQL engines do
    allow nesting of SQL, which can be combined with keywords like 'exists'
    and 'in'. The following show SQL and a Rule to return a set of Students
    who have failed the semester.</para>

    <programlisting>

select
    * 
from 
    Students s 
where exists (  
    select 
        * 
    from 
        Modules m 
    where 
        m.student_name = s.name and 
        m.score &lt; 40 
)

    </programlisting>

    <para></para>

    <programlisting>

    rule "Failed_Students"
    when
        exists( $student : Student() &amp;&amp; Module( student == $student, score &lt; 40 ) )
    
    </programlisting>

    <para></para>
  </section>
</section>
