<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
  <title>Deploying</title>

  <section>
    <title>KnowledgePackage and Knowledge Definitions</title>

    <para>The KnowledgePackage is a collection of Knowledge Definitions, such
    as rules and processes, and is created by the KnowledgeBuilder, as seen in
    The "Building" chapter. KnowledgePackages are self contained and
    serializable and currently form the basic deployment unit.</para>

    <figure>
      <title>KnowledgePackage</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/KnowledgePackage.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>KnowledgePackages are added to the KnowledgeBase. However a
    KnowledgePackage instance cannot be re-used once it's added to the
    KnowledgeBase, if you need to add it to another KnowledgeBase try
    serialising it first and using the "cloned" result. We hope to fix this
    limitation in future versions of Drools.</para>
  </section>

  <section>
    <title>KnowledgeBase</title>

    <para>The KnowlegeBase is a repository of all the application's knowledge
    definitions. It may contain rules, processes, functions, type models. The
    KnowledgeBase itself does not contain instance data, known as facts,
    instead sessions are created from the KnowledgeBase in which data can be
    inserted and process instances started. Creating the KnowlegeBase can be
    heavy, where as session creation is very light, so it is recommended that
    KnowleBase's be cached where possible to allow for repeated session
    creation.</para>

    <figure>
      <title>KnowledgeBase</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/KnowledgeBase.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The KnowledgeBase is also serializable and some people may prefer to
    build and then store the KnowledgeBase, treating it also as a unit of
    deployment, instead of the KnowledgePackages.</para>

    <para>The KnowlegeBase is created using the KnowledgeBaseFactory.</para>

    <figure>
      <title>KnowledgeBaseFactory</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/KnowledgeBaseFactory.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A KnowledgeBase can be created using the default
    configuration.</para>

    <example>
      <title>Creating a new KnowledgeBuilder</title>

      <programlisting>KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();</programlisting>
    </example>

    <para>If a custom ClassLoader was used with the KnowledgeBuilder to
    resolve types not in the default ClassLoader, then that must also be set
    on the KnowledgeBuilder. The technique for this is the same as with the
    KnowledgeBuilder.</para>

    <example>
      <title>Creating a new KnowledgeBase with a custom ClassLoader</title>

      <programlisting>KnowledgeBaseConfiguration kbaseConf = KnowledgeBaseFactory.createKnowledgeBaseConfiguration( null, cl );
KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase( kbaseConf );</programlisting>
    </example>
  </section>

  <section>
    <title>In Process Building and Deployment</title>

    <para>This is the simplest form of deployment and both compiles the
    knowledge definitions and adds them to the KnowledgeBase in the same JVM.
    This approach requires both drools-core and drools-compiler on the
    classpath.</para>

    <example>
      <title>Add KnowledgePackages to a KnowledgeBase</title>

      <programlisting>Collection&lt;KnowledgePackage&gt; kpkgs = kbuilder.getKnowledgePackages();

KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
kbase.addKnowledgePackages( kpkgs );</programlisting>
    </example>

    <para>Note the addKnowledgePackages( kpkgs ) method can be called
    iteratively to add additional knowledge.</para>
  </section>

  <section>
    <title>Out of Process Building and Deployment</title>

    <para>Both the KnowledgeBase and the KnowledgePackage are units of
    deployment and serializable. This means you can have one machine do any
    necessary building, which requires drools-compiler, and have another
    machine act as the runtime and only requiring drools-core.</para>

    <para>While serialization is standard Java here is an example of how one
    machine might write out the deployment unit and how another machine might
    read in and use that deployment unit.</para>

    <example>
      <title>Writting the KnowledgePackage to an OutputStream</title>

      <programlisting>ObjectOutputStream out = new ObjectOutputStream( new FileOutputStream( fileName ) );
out.writeObject( kpkgs );
out.close();
</programlisting>
    </example>

    <example>
      <title>Reading the KnowledgePackage from an InputStream</title>

      <programlisting>ObjectInputStream in = new ObjectInputStream( new FileInputStream( fileName ) );
Collection&lt;KnowledgePackages&gt; kpkgs = in.readObject( ); // you could write an individual package or the Collection
in.close();

KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
kbase.addKnowledgePackages( kpkgs );
</programlisting>

      <para>The KnowledgeBase is also serializable and some people may prefer
      to build and then store the KnowledgeBase itself, instead of the
      KnowledgePackages.</para>

      <para>Drools Guvnor, our server side management system, uses this
      deployment approach. Where Guvnor will compile and publish serialized
      KnowledgePackages on a URL and then Drools can use the URL resource type
      to load it.</para>
    </example>
  </section>

  <section>
    <title>StatefulknowledgeSessions and KnowledgeBase modifications</title>

    <para>StatefulKnowledgeSesions will be discussed in more details in the
    Running section. The KnowledgeBase creates and returns
    StatefulKnowledgeSesions and it may optionally keep references to those.
    When KnowledgeBase modifications occur those modifications are applied
    against the data in the sessions. This reference is weak reference and it
    is also optional, which is controlled by a boolean flag.</para>
  </section>

  <section>
    <title>KnowledgeAgent</title>

    <para>The KnowlegeAgent provides automatic loading, caching and
    re-loading, of resources and is configured from a properties files. The
    KnowledgeAgent can update or rebuild this KnowlegeBase as the resources it
    uses are changed. The strategy for this is determined by the configuration
    given to the factory, but it is typically pull based using regular
    polling. We hope to add push based updates and rebuilds in future
    versions. The KnowledgeAgent will continously scan all the added
    resources, using a default polling of 60s, and if their last modified date
    is updated it will rebuild the cached KnowledgeBase using the new
    resources</para>

    <figure>
      <title>KnowledgeAgent</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/KnowledgeAgent.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The KnowlegeBuilder is created using the KnowledgeBuilderFactory.
    The agent must specify a name, which is used in the logging to associate
    the logging entry with the correct agent.</para>

    <example>
      <title>Creating the KnowledgeAgent</title>

      <programlisting>KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "MyAgent" );
</programlisting>
    </example>

    <figure>
      <title>KnowledgeAgentFactory</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/KnowledgeAgentFactory.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The Following example constructs an agent that will build a new
    KnowledgeBase from specified ChangeSet, see the Building section for more
    detail on the ChangeSet format. Note that the method can be called
    iteratively to add new resources overtime. At the moment the remove and
    modify elements of the ChangeSet XML do not work, but future versions will
    enable this which means for more control over those incremental changes.
    It will poll the resources added from in the ChangeSet every 60 seconds,
    which is the default, to see if they are updated. If changes found it will
    construct a new KnowledgeBase. If the change set specifies a resource that
    is a directory it's contents will be scanned for changes to.</para>

    <example>
      <title>Writting the KnowledgePackage to an OutputStream</title>

      <programlisting>KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "MyAgent" );
kagent.applyChangeSet( ResourceFactory.newUrlResource( url ) );
KnowledgeBase kbase = kagent.getKnowledgeBase();
</programlisting>
    </example>

    <para>Resource scanning is not on by default, it's a service and must be
    started, the same is for notification. This can be done via the
    ResourceFactory.</para>

    <example>
      <title>Starting the Scanning and Notification Services</title>

      <programlisting>ResourceFactory.getResourceChangeNotifierService().start();
ResourceFactory.getResourceChangeScannerService().start();
</programlisting>
    </example>

    <para>If you wish to change the default resource scanning period it must
    be done on the ResourceChangeNotifierService. This can be done as the
    configure(...) method which allows for the service to be reconfigured on
    demand.</para>

    <example>
      <title>Changing the Scanning intervals</title>

      <programlisting>ResourceChangeScannerConfiguration sconf = ResourceFactory.getResourceChangeScannerService().newResourceChangeScannerConfiguration();
sconf.setProperty( "drools.resource.scanner.interval",
                   "30" ); // set the disk scanning interval to 30s, default is 60s
ResourceFactory.getResourceChangeScannerService().configure( sconf );
</programlisting>
    </example>

    <para>KnowledgeAgents can take a empty KnowledgeBase or a populated one.
    If a populated KnowledgeBase is provided, the KnowledgeAgent will iterate
    KnowledgeBase and subscribe to the Resource that it finds. While it is
    possible for the KnowledgeBuilder to build all resources found in a
    directory, that information is lost by the KnowledgeBuilder so those
    directories will not be continuously scanned. Only directories specified
    as part of the applyChangeSet(Resource) method are monitored.</para>

    <para>One of the advantages of providing KnowledgeBase as the starting
    point is that you can provide it with a KnowledgeBaseConfiguration. When
    resources changes are detected and a new KnowledgeBase is instantiated, it
    will use the KnowledgeBaseConfiguration of the previous
    KnowledgeBase.</para>

    <example>
      <title>Using an existing KnowledgeBase</title>

      <programlisting>KnowledgeBaseConfiguration kbaseConf = KnowledgeBaseFactory.createKnowledgeBaseConfiguration( null, cl );
KnowledgeBase kbase KnowledgeBaseFactory.newKnowledgeBase( kbaseConf );
// populate kbase with resources here

KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "MyAgent",
                                                                  kbase );
KnowledgeBase kbase = kagent.getKnowledgeBase();
</programlisting>
    </example>

    <para>In the above example the getKnowledgeBase will return the same
    provided kbase instance until resource changes are detected and a new
    KnowledgeBase is built. When the new KnowledgeBase is built, it will be
    done with the KnowledgeBaseConfiguration that was provided to the previous
    KnowledgeBase.</para>

    <para>As mentioned previously a ChangeSet XML can specify a directory and
    all it's contents will be added. If this ChangeSet XML is used with the
    applyChangeSet method it will also add the directories to the scanning
    process. When scanning directories added files will be detected and added
    to the KnowledgeBase while remove files will be removed from the
    KnowledgeBase and modified files will act as usual forcing a build of a
    new KnowledgeBase using the latest version.</para>

    <example>
      <title>ChangeSet XML which adds a directories contents</title>

      <programlisting>&lt;change-set xmlns='http://drools.org/drools-5.0/change-set'
            xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
            xs:schemaLocation='http://drools.org/drools-5.0/change-set drools-change-set-5.0.xsd' &gt;
   &lt;add&gt;
      &lt;resource source='file:/projects/myproject/myrules' type='PKG' /&gt;
   &lt;/add&gt;
&lt;/change-set&gt;
</programlisting>
    </example>

    <para>Note if PKGs are the resource type the drools-compiler dependency is
    not needed as the KnowledgeAgent is able to handle those with just
    drools-core.</para>

    <para>The KnowledgeAgentConfiguration can be used to change some default
    behaviours, for instance you may want to load all the resources from a
    directory, but not continously scan that directory for changes.</para>

    <example>
      <title>Changing the Scanning intervals</title>

      <programlisting>KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();

KnowledgeAgentConfiguration kaconf = KnowledgeAgentFactory.newKnowledgeAgentConfiguration();
kaconf.setProperty( "drools.agent.scanDirectories",
                    "false" ); // we do not want to scan directories, just files
       
KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "test agent",
                                                                 kaconf );
</programlisting>
    </example>

    <para>Previously we mentioned Drools Guvnor and how it can build and
    publish serialized KnowledgePackages on a URL. As shown previous the
    ChangeSet XML can handle URLs and Packages, which forms an important
    deployment scenario for the KnowledgeAgent.</para>
  </section>
</section>
