<?xml version="1.0" encoding="UTF-8"?>
	<section version="5.0" xmlns="http://docbook.org/ns/docbook"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns:xi="http://www.w3.org/2001/XInclude"
                    xmlns:svg="http://www.w3.org/2000/svg"
                    xmlns:m="http://www.w3.org/1998/Math/MathML"
                    xmlns:html="http://www.w3.org/1999/xhtml"
                    xmlns:db="http://docbook.org/ns/docbook" xml:base="../../">
  <title>Overview</title>

  <note>
    <para><replaceable>(updated to Drools 4.0)</replaceable></para>
  </note>

  <para>Drools 4.0 has a "native" rule language that is non XML textual
  format. This format is very light in terms of punctuation, and supports
  natural and domain specific languages via "expanders" that allow the
  language to morph to your problem domain. This chapter is mostly concerted
  with the native rule format. The Diagrams used are known as "rail road"
  diagrams, and are basically flow charts for the language terms. For the
  technically very keen, you can also refer to "DRL.g" which is the Antlr3
  grammar for the rule language. If you use the Rule Workbench, a lot of the
  rule structure is done for you with content assistance, for example, type
  "ru" and press ctrl+space, and it will build the rule structure for
  you.</para>

  <section>
    <title>A rule file</title>

    <para>A rule file is typically a file with a .drl extension. In a drl file
    you can have multiple rules, queries and functions, as well as some
    resource declarations like imports, globals and attributes that are
    assigned and used by your rules and queries. However, you are also able to
    spread your rules across multiple rule files (in that case, the extension
    .rule is suggested, but not required) - spreading rules across files can
    help with managing large numbers of rules. A DRL file is simply a text
    file.</para>

    <para>The overall structure of a rule file is:</para>

    <example>
      <title>Rules file</title>

      <programlisting><emphasis role="bold">package </emphasis><replaceable>package-name</replaceable>

<replaceable>imports</replaceable>

<replaceable>globals</replaceable>

<replaceable>functions</replaceable>

<replaceable>queries</replaceable>

<replaceable>rules</replaceable>
</programlisting>
    </example>

    <para>The order in which the elements are declared is not important,
    except for the package name that, if declared, must be the first element
    in the rules file. All elements are optional, so you will use only those
    you need. We will discuss each of them in the following sections.</para>
  </section>

  <section>
    <title>What makes a rule</title>

    <para>For the inpatients, just as an early view, a rule has the following
    rough structure:<programlisting><emphasis role="bold">rule</emphasis> <replaceable>"name"</replaceable>
    <replaceable>attributes</replaceable>
    <emphasis role="bold">when</emphasis>
        <replaceable>LHS</replaceable>
    <emphasis role="bold">then</emphasis>
        <replaceable>RHS</replaceable>
<emphasis role="bold">end</emphasis>
</programlisting>Its really that simple. Mostly punctuation is not needed,
    even the double quotes for "name" are optional, as are newlines.
    Attributes are simple (always optional) hints to how the rule should
    behave. LHS is the conditional parts of the rule, which follows a certain
    syntax which is covered below. RHS is basically a block that allows
    dialect specific semantic code to be executed.</para>

    <para>It is important to note that white space is not important, EXCEPT in
    these case of domain specific languages, in which case each line is
    processed before the following line (and spaces may be significant to the
    domain language).</para>
  </section>

  <section>
    <title>Reserved words</title>

    <para>There are some reserved keywords that are used in the rule language.
    It is wise to avoid collisions with these words when naming your domain
    objects, properties, methods, functions and other elements that are used
    in the rule text. The parser is a bit smart and sometimes knows when a
    keyword is not being used as a keyword, but avoiding the use of them might
    prevent some headaches.</para>

    <para>The following is a list of keywords that must be avoided as
    identifiers when writing rules:</para>

    <itemizedlist>
      <listitem>
        <para>rule</para>
      </listitem>

      <listitem>
        <para>query</para>
      </listitem>

      <listitem>
        <para>when</para>
      </listitem>

      <listitem>
        <para>then</para>
      </listitem>

      <listitem>
        <para>end</para>
      </listitem>

      <listitem>
        <para>null</para>
      </listitem>

      <listitem>
        <para>and</para>
      </listitem>

      <listitem>
        <para>or</para>
      </listitem>

      <listitem>
        <para>not</para>
      </listitem>

      <listitem>
        <para>exists</para>
      </listitem>

      <listitem>
        <para>collect</para>
      </listitem>

      <listitem>
        <para>accumulate</para>
      </listitem>

      <listitem>
        <para>from</para>
      </listitem>

      <listitem>
        <para>forall</para>
      </listitem>

      <listitem>
        <para>true</para>
      </listitem>

      <listitem>
        <para>false</para>
      </listitem>

      <listitem>
        <para>eval</para>
      </listitem>
    </itemizedlist>

    <para>The following list are keywords that you should try and avoid in the
    rule contents if possible, but the parser usually will work fine, even if
    you use them for something else.</para>

    <itemizedlist>
      <listitem>
        <para>package</para>
      </listitem>

      <listitem>
        <para>function</para>
      </listitem>

      <listitem>
        <para>global</para>
      </listitem>

      <listitem>
        <para>import</para>
      </listitem>

      <listitem>
        <para>template</para>
      </listitem>

      <listitem>
        <para>attributes</para>
      </listitem>

      <listitem>
        <para>enabled</para>
      </listitem>

      <listitem>
        <para>salience</para>
      </listitem>

      <listitem>
        <para>duration</para>
      </listitem>

      <listitem>
        <para>init</para>
      </listitem>

      <listitem>
        <para>action</para>
      </listitem>

      <listitem>
        <para>reverse</para>
      </listitem>

      <listitem>
        <para>result</para>
      </listitem>

      <listitem>
        <para>contains</para>
      </listitem>

      <listitem>
        <para>excludes</para>
      </listitem>

      <listitem>
        <para>memberOf</para>
      </listitem>

      <listitem>
        <para>matches</para>
      </listitem>

      <listitem>
        <para>in</para>
      </listitem>

      <listitem>
        <para>date-effective</para>
      </listitem>

      <listitem>
        <para>date-expires</para>
      </listitem>

      <listitem>
        <para>no-loop</para>
      </listitem>

      <listitem>
        <para>auto-focus</para>
      </listitem>

      <listitem>
        <para>activation-group</para>
      </listitem>

      <listitem>
        <para>agenda-group</para>
      </listitem>

      <listitem>
        <para>dialect</para>
      </listitem>

      <listitem>
        <para>rule-flow-group</para>
      </listitem>
    </itemizedlist>

    <para>Of course, you can have words as part of a method name in camel
    case, like notSomething() - there are no issues with that scenario.</para>
  </section>
</section>
