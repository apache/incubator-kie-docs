<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Query</title>

  <figure>
    <title>query</title>

    <mediaobject>
      <imageobject>
	      <imagedata align="center" fileref="images/Chapter-Rule_Language/query.png" format="PNG" role="" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>A query contains the structure of the LHS of a rule only (you don't
  specify "when" or "then"). It is simply a way to query the working memory
  for facts that match the conditions stated. A query has an optional set of
  parameters, each of which can also be optionally typed. If type is not
  given then Object type is assumed. The engine will attempt to co-erce 
  the values as needed. Query names are global to the RuleBase, so do
  not add queries of the same name to different packages for the same Rule
  Base.</para>

  <para>To return the results use WorkingMemory.getQueryResults("name"),
  where "name" is the query's name.  This returns a list of query results,
  which allow you to to get to the objects that matched the query.</para>

  <para>The first example creates a simple query for all the people over
  the age of 30. The second one, using parameters, combines the age limit
  with a location.</para>

  <example>
    <title>Query People over the age of 30</title>

    <programlisting>query "people over the age of 30" 
    person : Person( age &gt; 30 )
end</programlisting>
  </example>

  <example>
    <title>Query People over the age of x, and who live in y</title>

    <programlisting>query "people over the age of x"  (int x, String y)
    person : Person( age &gt; x, location == y )
end</programlisting>
  </example>

  <para>We iterate over the returned QueryResults using a standard 'for' loop.
  Each element returns a QueryResult which we can use to access each of the
  columns in the Tuple. Those columns can be accessed by bound declaration name
  or index position.</para>

  <example>
    <title>Query People over the age of 30</title>

    <programlisting>QueryResults results = workingMemory.getQueryResults( "people over the age of 30" );
System.out.println( "we have " + results.size() + " people over the age  of 30" );

System.out.println( "These people are are over 30:" );

for ( Iterator it = results.iterator; it.hasNext(); ) {
    QueryResult result = ( QueryResult ) it.next();
    Person person = ( Person ) result.get( "person" );
    System.out.println( person.getName() + "\n" );
}</programlisting>
  </example>
</section>
