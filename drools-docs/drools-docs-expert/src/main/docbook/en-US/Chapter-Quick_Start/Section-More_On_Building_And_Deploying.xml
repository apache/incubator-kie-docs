<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">

   <title>More on building and deploying</title>


    <section>
      <title>KnowledgeBase by Configuration using Changesets</title>

      <para>So far, the programmatic API has been used to build a
      KnowledgeBase. Quite often it's more desirable to do this via
      configuration. To facilitate this, Drools supports the "changeset"
      feature. The file changeset.xml contains a list of resources, and it
      may also point recursively to another changeset.xml. Currently the 
      changeset has only a single "add" element, but support for remove 
      and modify will be added in the future, for more powerful incremental
      changes over time. Currently there is no XML schema for the changeset
      XML, but we hope to add one soon. A few examples will be
      shown to give you the gist of things. A resource approach is employed
      that uses a prefix to indicate the protocol. All the protocols provided
      by java.net.URL, such as "file" and "http" are supported, as well as an
      additional "classpath". Currently the type attribute must always be
      specified for a resource, as it is not inferred from the file name extension.
      Here is a
      simple example that points to a http location for some rules.</para>

      <programlisting> &lt;change-set xmlns='http://drools.org/drools-5.0/change-set'
             xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
             xs:schemaLocation='http://drools.org/drools-5.0/change-set drools-change-set-5.0.xsd' &gt;
   &lt;add&gt;
       &lt;resource source='http:org/domain/myrules.drl' type='DRL' /&gt;
   &lt;/add&gt;
 &lt;/change-set&gt;
</programlisting>

      <para>To use the above XML the code is almost identical as before,
      except we change the ResourceType to CHANGE_SET.</para>

      <programlisting>KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
kbuilder.add( ResourceFactory.newClasspathResource( "myChangeSet.xml", getClass() ),
              ResourceType.CHANGE_SET );
if ( kbuilder.hasErrors() ) {
    System.err.println( builder.getErrors().toString() );
}  </programlisting>

      <para>Changesets can include any number of resources, and they even support
      additional configuration information, which currently is only needed for
      decision tables. The example below is expanded to load the rules from a
      http URL location, and an Excel decision table from the classpath.</para>

      <programlisting> &lt;change-set xmlns='http://drools.org/drools-5.0/change-set'
             xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
             xs:schemaLocation='http://drools.org/drools-5.0/change-set.xsd' &gt;
   &lt;add&gt;
       &lt;resource source='http:org/domain/myrules.drl' type='DRL' /&gt;
       &lt;resource source='classpath:data/IntegrationExampleTest.xls' type="DTABLE"&gt;
           &lt;decisiontable-conf input-type="XLS" worksheet-name="Tables_2" /&gt;
       &lt;/resource&gt;
   &lt;/add&gt;
 &lt;/change-set&gt;
</programlisting>

      <para>It is also possible to specify a directory, to add the contents of
      that directory. It is expected that all the files are
      of the specified type, since type is not yet inferred from the file name
      extensions.</para>

      <programlisting> &lt;change-set xmlns='http://drools.org/drools-5.0/change-set'
             xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
             xs:schemaLocation='http://drools.org/drools-5.0/change-set.xsd' &gt;
   &lt;add&gt;
       &lt;resource source='file://myfolder/' type='DRL' /&gt;
   &lt;/add&gt;
 &lt;/change-set&gt;
</programlisting>
    </section>

    <section>
      <title>Knowledge Agent</title>

      <para>The KnowlegeAgent provides automatic loading, caching and
      re-loading of resources and is configured from a properties files. The
      KnowledgeAgent can update or rebuild this KnowlegeBase as the resources
      it uses are changed. The strategy for this is determined by the
      configuration given to the factory, but it is typically pull based using
      regular polling. We hope to add push based updates and rebuilds in
      future versions.</para>

      <programlisting>KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "MyAgent" );
kagent.applyChangeSet( ResourceFactory.newUrlResource( url ) );
KnowledgeBase kbase = kagent.getKnowledgeBase();</programlisting>

      <para>The KnowledgeAgent will continously scan all the added resources,
      using a default polling interval of 60s, and if their last modified date is
      updated it will rebuild the cached KnowledgeBase using the new
      resources. Note that the previous KnowledgeBase reference will still exist
      and you'll have to call getKnowledgeBase() to access the newly built
      KnowledgeBase. If a directory is specified as part of the change set,
      the entire contents of that directory will be scanned for
      changes.</para>
    </section>         
    
</section>
