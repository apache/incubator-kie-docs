<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Deploying</title>

  <section>
    <title>KieBase</title>

    <para>The <code>KieBase</code> is a repository of all the
    application's knowledge definitions. It will contain rules, processes,
    functions, and type models. The <code>KieBase</code> itself does not contain
    data; instead, sessions are created from the <code>KieBase</code>
    into which data can be inserted and from which process instances may be
    started. The <code>KieBase</code> can be obtained from the <code>KieContainer</code>
    containing the <code>KieModule</code> where the <code>KieBase</code> has been defined.</para>

    <figure>
      <title>KieBase</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/KieBase.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Sometimes, for instance in a OSGi environment, the <code>KieBase</code> needs to resolve
    types that are not in the default class loader. In this case it will be necessary to create a
    <code>KieBaseConfiguration</code> with an additional class loader and pass it to <code>KieContainer</code>
    when creating a new <code>KieBase</code> from it.</para>

    <example>
      <title>Creating a new KieBase with a custom ClassLoader</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
KieBaseConfiguration kbaseConf = kieServices.newKieBaseConfiguration( null, MyType.class.getClassLoader() );
KieBase kbase = kieContainer.newKieBase( kbaseConf );</programlisting>
    </example>
  </section>

  <section>
    <title>KieSessions and KieBase Modifications</title>

    <para>KieSessions will be discussed in more detail in
    section "Running". The <code>KieBase</code> creates and returns
    <code>KieSession</code> objects, and it may optionally keep
    references to those. When <code>KieBase</code> modifications occur
    those modifications are applied against the data in the sessions. This
    reference is a weak reference and it is also optional, which is controlled
    by a boolean flag.</para>
  </section>

  <section>
    <title>KieScanner</title>

    <para>The <code>KieScanner</code> allows to continueing monitoring your maven repository
    to check if a new release of a Kie project has been installed and if so deploying it in
    the <code>KieContainer</code> wrapping that project. The use of the requires <code>KieScanner</code>
    kie-ci.jar to be on the classpath.</para>

    <figure>
      <title>KieScanner</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/KieScanner.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In more detail a <code>KieScanner</code> can be registered on a <code>KieContainer</code>
    as in the following example.</para>

    <example>
      <title>Registering and starting a KieScanner on a KieContainer</title>

      <programlisting language="java">KieServices kieServices = KieServices.Factory.get();
ReleaseId releaseId = kieServices.newReleaseId( "org.acme", "myartifact", "1.0-SNAPSHOT" );
KieContainer kContainer = kieServices.newKieContainer( releaseId );
KieScanner kScanner = kieServices.newKieScanner( kContainer );

// Start the KieScanner polling the maven repository every 10 seconds
kScanner.start( 10000L );</programlisting>
    </example>

    <para>In this example the <code>KieScanner</code> is configured to run with a fixed
    time interval, but it is also possible to run it on demand by invoking the
    <code>scanNow()</code> method on it. If the <code>KieScanner</code> finds in the
    maven repository an updated version of the Kie project used by that <code>KieContainer</code>
    it automatically downloads the new version and triggers an incremental build of the new
    project. From this moment all the new <code>KieBase</code>s and <code>KieSession</code>s
    created from that <code>KieContainer</code> will use the new project version.</para>

  </section>
</section>
