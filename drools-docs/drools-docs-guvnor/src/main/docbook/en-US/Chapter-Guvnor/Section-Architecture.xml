<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Architecture</title>

  <para>This section covers the technical aspects of Guvnor (previously known
  as the Business Rules Management System or BRMS), it is not necessary to use
  this if you are integrating or an end user of the BRMS application. However,
  Drools is open source, so build instructions form part of the manual.</para>

  <para>You may want to build from source if you want to re-use components, or
  embed the application within another.</para>

  <figure>
    <title>Architectural diagram</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Guvnor/Architecture.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>The above diagram shows the major components of the system and how
  they integrate and are deployed. The User Guide has more details on the
  parts that are highly configurable (eg database).</para>

  <para>The BRMS is deployed as a war, which provides user interfaces over the
  web, and provides binary packages via URLs (or files). It utilized the
  JSR-170 standard for data storage (JCR). JBoss Seam is used as the component
  framework, and GWT is used as the widget toolkit for constructing the ajax
  based web user interface.</para>

  <section>
    <title>Building from source</title>

    <para>This section will go over the steps necessary to build various
    components. Mostly this is automated, but the manual process is described
    for thoroughness.</para>

    <section>
      <title>Modules</title>

      <para>There are 2 modules: drools-repository (back end) and
      drools-guvnor (front end and rules integration). The drools-guvnor
      module depends on the drools-repository module, as well as other
      components. Guvnor is part of the main build for all of Drools - when
      building Drools, Guvnor is built alongside it.</para>
    </section>

    <section>
      <title>Working with Maven 2</title>

      <para>Maven 2 is used as the build system. To get started, the WHOLE of
      the source tree for JBoss Rules will need to be checked out. This
      includes the other modules, and the top level lib and repository
      directories (which are needed by the build); as the BRMS build is part
      of the main drools build.</para>

      <para>Initially, go into the root of the jboss-rules checked out source
      tree, and run <command>mvn install</command> to install all the components for the inter
      project dependencies. If the build is broken (all care is taken for this
      eventuality not to occur), the flag -Dmaven.test.skip=true can be used
      to prevent failing unit tests from preventing the build.</para>

      <para>When wishing to build Guvnor, go into the drools-guvnor
      directory, and run <command>mvn package</command>. This will run the tests,
      and then build a deployable war. The only thing this will not do is
      rebuild the GWT front end (see the next section for details on that).
      Once the war file is in the target directory, the BRMS is ready to
      go.</para>
    </section>

    <section>
      <title>Working with GWT</title>

      <para>The GUI widgets for the web front end are developed with GWT
      (Google Web Toolkit). If there is a need to make changes to or build the
      GUI, GWT will need to be downloaded separately. Once GWT is downloaded,
      the <filename>build.properties</filename> file in the drools-guvnor
      directory to point to where GWT is installed. Once this is completed,
      the ant tasks can be used to build the GWT components, as well as launch
      GWT in debug/hosted mode if it is desired. If running the build, it will
      update the webapp directory in the project with the new
      <emphasis>compiled</emphasis> artifacts (GWT does not use JSP, only html
      and javascript at runtime).</para>
    </section>

    <section>
      <title>Debugging, Editing and running with Eclipse</title>

      <para>Each module has a ready to go and up to date eclipse project
      configuration, so they can merely be imported into the eclipse
      workspace. These projects are generated by Maven (<code>mvn
      eclipse:eclipse</code> to refresh them in case they are wrong or
      outdated). They have been manually modified to have project dependencies
      (this means the code can be stepped through when debugging).</para>

      <para>Some environment variables are required in eclipse (for Window:
      &gt;Preferences-&gt;Java-&gt;Build path-&gt;Classpath variables): the
      M2_REPO, as normal, to point to where Maven downloads shared
      dependencies. GWT_HOME should point to where you installed GWT. GWT_DEV
      must point to the platform specific "dev" jar that ships with the
      version of GWT you have.</para>

      <para>How to launch from Eclipse: unit tests can be launched, as normal
      (in which case only M2_REPO setup is needed, GWT does not need to be
      downloaded seperately), or it can be launched it in <emphasis>hosted
      mode</emphasis> using the GWT browser, which is great for debugging
      (from GUI to back end, the code can be stepped through, and changes made
      on the fly and simply hit refresh). There is a
      <filename>Guvnor.launch</filename> file in in the drools-guvnor
      directory. To launch Guvnor in debug mode, open the Run dialog
      (Run-&gt;Run), and then choose <emphasis>Guvnor</emphasis> from the list.
      Launching this will open a new window, with the BRMS in debug mode,
      ready to go</para>

      <para>Normally</para>

      <para>Downloading and debugging the BRMS with GWT is optional, so if
      there are no GUI issues being worked on then this step can be safely
      skipped.</para>
    </section>
  </section>

  <section>
    <title>Re-usable components</title>

    <para>The BRMS uses a service interface to separate the GUI from the back
    end functionality. In this case the back end both includes the asset
    repository (drools-repository and JCR) as well as the compiler specifics
    to deal with rules.</para>

    <para>The main interface is RepositoryService, which is implemented in
    ServiceImplementation. The GWT ajax front end talks to this interface (via
    the asynchrony callback mechanism that GWT uses). The seam configuration
    file is <filename>components.xml</filename> (consult Seam documentation,
    and the components.xml file for details).</para>

    <para>This service interface may be re-used by alternative components or
    front ends.</para>

    <para>The GWT user interface may be re-used, as it is GWT is only one html
    page: <filename>Guvnor.html</filename>. </para>

    <para>Normally Guvnor is intended to be deployed as its own war, however
    it can be combined with another application (with some care), but it is
    easier to keep it as a separate war. Deploying Guvnor by itself will also
    make it easier to upgrade to newer releases as they come out (and is
    recommended).</para>

    <para>The <filename>Guvnor.html</filename> file can be customized. For
    example to change logos or embed the BRMS in another page. Take a look at
    the <filename>Guvnor.html</filename> file for details.</para>
  </section>

  <section>
    <title>Versioning and Storage</title>

    <para>The User Guide, Admin Section covers configuration options in some
    detail, for database and filesystems.</para>

    <para>Versions of assets are stored in the database along with the
    data.</para>

    <para>When <emphasis>snapshots</emphasis> are created, copies are made of
    the entire package into a separate location in the JCR database.</para>

    <para>For those familiar with jcr and jackrabbit, the *.cnd files are in
    the source for the node type definitions as some wish to view these. In a
    nutshell, a package is a <emphasis>folder</emphasis> and each asset is a
    file: an asset can either be textual or have a binary attachment.</para>
  </section>

  <section>
    <title>Contributing</title>

    <para>As an open source project, contributions from the wider community
    are encouraged. In order to contribute consult the wiki and project home
    pages. A useful way to contribute is via logging issues or feature
    requests in JIRA. The JIRA link to use is:
    https://jira.jboss.org/jira/browse/GUVNOR</para>
  </section>
</section>
