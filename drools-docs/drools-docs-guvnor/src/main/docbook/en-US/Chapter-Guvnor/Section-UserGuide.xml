<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Quick start guide</title>

  <section>
    <title>Quick start guide</title>

    <para>If you are reading this, you must be the impatient type who wants to
    kick the tyres (and light the fires) and have a look around as soon as
    possible. This section will provide a quick end to end tour of the steps
    involved (but does not go through the concepts in detail). This assumes
    you have installed the repository correctly, and are able to access the
    main login screen.</para>

    <para>You can also consult the wiki:
    http://wiki.jboss.org/wiki/Wiki.jsp?page=RulesRepository for some
    tutorials and user tips (it IS a wiki, so you can even contribute your own
    tips and examples and even upload files if you desire !).</para>

    <figure>
      <title>Main feature areas of Guvnor</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/Features.png" format="PNG"
                     scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The above picture shows the main feature areas of Guvnor.</para>

    <itemizedlist>
      <listitem>
        <para>Info: This is the initial screen, with links to
        resources.</para>
      </listitem>

      <listitem>
        <para>Rules: This is the category and business user
        perspective.</para>
      </listitem>

      <listitem>
        <para>Package: This is where packages are configured and
        managed.</para>
      </listitem>

      <listitem>
        <para>Deployment: this is where deployment snapshots are
        managed.</para>
      </listitem>

      <listitem>
        <para>Admin: Administrative functions (categories, statuses, import
        and export)</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Supported browser platforms</title>

      <para>The supported server side platforms are mentioned in the
      installation guide. For browsers - the major ones are supported, this
      includes Firefox (1.5 and up), IE7 and up, Opera, Safari, Google Chrome
      etc. The preferred browser for most platforms is firefox, it is widely
      available and free, if you have any choice at all, Firefox is the
      preferred platform, followed by safari on mac. IE6 users can experience
      some poor perforamnce, and as this is a dangerously insecure browser IE7
      or a superior browser (such as Google Chrome, Firefox, Safari) is
      recommended.</para>
    </section>

    <section>
      <title>BRMS or Guvnor?</title>

      <para>In previous versions of Drools "BRMS" was often used to refer to
      the web interface to the drools management features. Nowadays we use
      BRMS to refer to the "whole package" - the runtime, the web tools and so
      on - but in some cases you can read "BRMS" as meaning the Guvnor web
      console and associated tools.</para>
    </section>

    <section>
      <title>Initial configuration</title>

      <para>Some initial setup is required the first time. The first time the
      server starts up, it will create an empty repository, then take the
      following steps:</para>

      <itemizedlist>
        <listitem>
          <para>Once deployed, go to "http://&lt;your
          server&gt;/drools-guvnor/" (This will show the initial info screen -
          or login screen depending on the configuration).</para>
        </listitem>

        <listitem>
          <para>If it is a brand new repository, you will want to go to
          "Admin", and choose "Manage Categories"</para>

          <para>(Add a few categories of your choosing, categories are only
          for classification, not for execution or anything else.)</para>
        </listitem>

        <listitem>
          <para>Rules need a fact model (object model) to work off, so next
          you will want to go to the Package management feature. From here you
          can click on the icon to create a new package (give it a meaningful
          name, with no spaces).</para>
        </listitem>

        <listitem>
          <para>To upload a model, use a jar which has the fact model (API)
          that you will be using in your rules and your code (go and make one
          now if you need to !). When you are in the model editor screen, you
          can upload a jar file, choose the package name from the list that
          you created in the previous step.</para>
        </listitem>

        <listitem>
          <para>Now edit your package configuration (you just created) to
          import the fact types you just uploaded (add import statements), and
          save the changes.</para>
        </listitem>

        <listitem>
          <para>At this point, the package is configured and ready to go (you
          generally won't have to go through that step very often).</para>

          <para>(Note that you can also import an existing drl package - it
          will store the rules in the repository as individual assets).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Writing some rules</title>

      <itemizedlist>
        <listitem>
          <para>Once you have at least one category and one package setup, you
          can author rules.</para>
        </listitem>

        <listitem>
          <para>There are multiple rule "formats", but from the BRMS point of
          view, they are all "assets".</para>
        </listitem>

        <listitem>
          <para>You create a rule by clicking the icon with the rules logo
          (the head), and from that you enter a name.</para>
        </listitem>

        <listitem>
          <para>You will also have to choose one category. Categories provide
          a way of viewing rules that is separate to packages (and you can
          make rules appear in multiple packages) - think of it like
          tagging.</para>
        </listitem>

        <listitem>
          <para>Chose the "Business rule (guided editor)" formats.</para>
        </listitem>

        <listitem>
          <para>This will open a rule modeler, which is a guided editor. You
          can add and edit conditions and actions based on the model that is
          in use in the current package. Also, any DSL sentence templates
          setup for the package will be available.</para>
        </listitem>

        <listitem>
          <para>When you are done with rule editing, you can check in the
          changes (save), or you can validate or "view source" (for the
          effective source).</para>
        </listitem>

        <listitem>
          <para>You can also add/remove categories from the rule editor, and
          other attributes such as documentation (if you aren't sure what to
          do, write a document in natural language describing the rule, and
          check it in, that can also serve as a template later)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Finding stuff</title>

      <para>In terms of navigating, you can either use the Rules feature,
      which shows things grouped by categories, or you can use the Package
      feature, and view by package (and rule type). If you know the name or
      part of the name of an asset, you can also use the "Quick find", start
      typing a rule name and it will return a list of matches as you type (so
      if you have a sensible naming scheme, it will make it very quick to find
      stuff).</para>
    </section>

    <section>
      <title>Deployment</title>

      <itemizedlist>
        <listitem>
          <para>After you have edited some rules in a package, you can click
          on the package feature, open the package that you wish, and build
          the whole package.</para>
        </listitem>

        <listitem>
          <para>If that succeeds, then you will be able to download a binary
          package file which can be deployed into a runtime system.</para>
        </listitem>

        <listitem>
          <para>You can also take a "snapshot" of a package for deployment.
          This freezes the package at that point in time, so any concurrent
          changes to not effect the package. It also makes the package
          available on a URL of the form: "http://&lt;your
          server&gt;/drools-guvnor/org.drools.guvnor.Guvnor/packages/&lt;packageName&gt;/&lt;snapshotName&gt;"
          (where you can use that URL and downloads will be covered in the
          section on deployment).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>BRMS concepts</title>

    <section>
      <title>Rules are assets</title>

      <para>As the BRMS can manage many different types of rules (and more),
      they are all classed as "assets". An asset is anything that can be
      stored as a version in the repository. This includes decision tables,
      models, DSLs and more. Sometimes the word "rule" will be used to really
      mean "asset" (ie the things you can do also apply to the other asset
      types). You can think of asset as a lot like a file in a folder. Assets
      are grouped together for viewing, or to make a package for deployment
      etc.</para>
    </section>

    <section>
      <title>Categorization</title>

      <figure>
        <title>Categories</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/CatZoom.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Categories allow rules (assets) to be labeled (or tagged) with any
      number of categories that you define. This means that you can then view
      a list of rules that match a specific category. Rules can belong to any
      number of categories. In the above diagram, you can see this can in
      effect create a folder/explorer like view of assets. The names can be
      anything you want, and are defined by the BRMS administrator (you can
      also remove/add new categories - you can only remove them if they are
      not currently in use).</para>

      <para>Generally categories are created with meaningful name that match
      the area of the business the rule applies to (if the rule applies to
      multiple areas, multiple categories can be attached). Categories can
      also be used to "tag" rules as part of their life-cycle, for example to
      mark as "Draft" or "For Review".</para>

      <figure>
        <title>Assets can have multiple categories</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/CatEdit.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The view above shows the category editor/viewer that is seen when
      you open an asset. In this example you can see the asset belongs to 2
      categories, with a "+" button to add additional items (use the trash can
      item to remove them). This means that when either category is used to
      show a list of assets, you will see that asset.</para>

      <para>In the above example, the first Category "Finance" is a "top
      level" category. The second one: "HR/Awards/QAS" is a still a single
      category, but its a nested category: Categories are hierarchical. This
      means there is a category called "HR", which contains a category
      "Awards" (it will in fact have more sub-categories of course), and
      "Awards" has a sub-category of QAS. The screen shows this as
      "HR/Awards/QAS" - its very much like a folder structure you would have
      on your hard disk (the notable exception is of course that rules can
      appear in multiple places).</para>

      <para>When you open an asset to view or edit, it will show a list of
      categories that it currently belongs to If you make a change (remove or
      add a category) you will need to save the asset - this will create a new
      item in the version history. Changing the categories of a rule has no
      effect on its execution.</para>

      <figure>
        <title>Creating categories</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/AdminCats.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above view shows the administration screen for setting up
      categories (there) are no categories in the system by default. As the
      categories can be hierarchical you chose the "parent" category that you
      want to create a sub-category for. From here categories can also be
      removed (but only if they are not in use by any current versions of
      assets).</para>

      <para>As a general rule, an asset should only belong to 1 or 2
      categories at a time. Categories are critical in cases where you have
      large numbers of rules. The hierarchies do not need to be too deep, but
      should be able to see how this can help you break down rules/assets into
      manageable chunks. Its ok if its not clear at first, you are free to
      change categories as you go.</para>
    </section>

    <section>
      <title>The asset editor</title>

      <figure>
        <title>The Asset editor view</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/AssetEditor.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above diagram shows the "asset editor" with some annotated
      areas. The asset editor is where all rule changes are made. Below is a
      list which describes the different parts of the editor.</para>

      <itemizedlist>
        <listitem>
          <para>A</para>

          <para>This is where the "editor widget" lives - exactly what form
          the editor takes depends on the asset or rule type.</para>
        </listitem>

        <listitem>
          <para>B</para>

          <para>This is the documentation area - a free text area where
          descriptions of the rule can live. It is encouraged to write a plain
          description in the rule here before editing.</para>
        </listitem>

        <listitem>
          <para>C</para>

          <para>These are the actions - for saving, archiving, changing status
          etc. Archiving is the equivalent of deleting an asset.</para>
        </listitem>

        <listitem>
          <para>D</para>

          <para>This has the asset name, as well as the list of categories
          that the asset belongs to.</para>
        </listitem>

        <listitem>
          <para>E</para>

          <para>This section contains read-only meta data, including when
          changes were made, and by whom.</para>

          <para>"Modified on:" - this is the last modified date.</para>

          <para>"By:" - who made the last change.</para>

          <para>"Note:" - this is the comment made when the asset was last
          updated (ie why a change was made)</para>

          <para>"Version:" - this is a number which is incremented by 1 each
          time a change is checked in (saved).</para>

          <para>"Created on:" - the date and time the asset was
          created.</para>

          <para>"Created by:" - this initial author of the asset.</para>

          <para>"Format:" - the short format name of the type of asset.</para>
        </listitem>

        <listitem>
          <para>F</para>

          <para>This shows what package the asset belong to (you can also
          change it from here).</para>
        </listitem>

        <listitem>
          <para>G</para>

          <para>This is some more (optional) meta data (taken from the Dublin
          Core meta data standard)</para>
        </listitem>

        <listitem>
          <para>H</para>

          <para>This will show the version history list when requested.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Rule authoring</title>

      <para>The BRMS supports a (growing) list of formats of assets (rules).
      Here the key ones are described. Some of these are covered in other
      parts of the manual, and the detail will not be repeated here.</para>

      <section>
        <title>Business rules with the guided editor</title>

        <para>Guided editor style "Business rules": (also known as "BRL
        format"). These rules use the guided GUI which controls and prompts
        user input based on knowledge of the object model. This can also be
        augmented with DSL sentences.</para>

        <para>IMPORTANT: to use the BRL guided editor, someone will need to
        have you package configured before hand.</para>

        <para>Also note that there is a guided editor in the Eclipse plug in,
        most of the details in this section can also apply to it.</para>

        <figure>
          <title>The guided BRL editor</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/GuidedEditor.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The above diagram shows the editor in action. The following
        description apply to the letter boxes in the diagram above:</para>

        <para>A: The different parts of a rule. The "WHEN" part is the
        condition, "THEN" action, and "(options)" are optional attributes that
        may effect the operation of the rule.</para>

        <para>B: This shows a pattern which is declaring that the rule is
        looking for a "Driver" fact (the fields are listed below, in this case
        just "age"). Clicking in the fact name (Driver) will popup a list of
        options to add to the fact declaration: you can add more fields (eg their
        "location"), or you can assign a variable name to the fact (which you
        can use later on if needs be). As well as adding more fields to this
        pattern - you can add "multiple field" constraints - ie constraints
        that span across fields (eg age &gt; 42 or risk &gt; 2). The popup
        dialog shows the options.</para>

        <para>C: The small triangle indicates you can remove something. In
        this case it would remove the whole Driver fact declaration. If its
        the one below, it would remove just the age constraint.</para>

        <para>D: The "+" symbols allow you to add more patterns to the
        condition or the action part of the rule, or more attributes. In all
        cases, a popup option box is provided. For the "WHEN" part of the
        rule, you can choose from a list of Conditional Elements to add:
        <itemizedlist spacing="compact" >
            <listitem>
            A Constraint on a Fact: it will give you a list of facts.
            </listitem>
            <listitem>
            "The following does not exist": the fact+constraints must not exist.
            </listitem>
            <listitem>
            "The following exists": at least one match should exist (but there
            only needs to be one - it will not trigger for each match).
            </listitem>
            <listitem>
            "Any of the following are true": any of the patterns can match
            (you then add patterns to these higher level patterns).
            </listitem>
            <listitem>
            "From": this will insert a new From Conditional Element to the rule.
            </listitem>
            <listitem>
            "From Accumulate": this will insert a new Accumulate Conditional
            Element to the rule.
            </listitem>
            <listitem>
            "From Collect": this will insert a new Collect Conditional Element
            to the rule.
            </listitem>
            <listitem>
            "Free Form DRL": this will let you insert a free chunk of DRL.
            </listitem>
        </itemizedlist>
        If you just put a fact (like is shown above)
        then all the patterns are combined together so they are all true
        ("and").</para>

        <para>E: This shows the constraint for the "age" field. Looking from
        left to right you find:
        <itemizedlist spacing="compact" >
            <listitem>
            The field name: Clicking on it you can assign a variable name to it,
            or access nested properties of it.
            </listitem>
            <listitem>
            A list of constraint operations: The content of this list changes
            depending on the field's data type.
            </listitem>
            <listitem>
            The value field: It could be on of
                <orderedlist spacing="compact">
                    <listitem>
                        <para>
                            A literal value: depending on the field's data type
                            different components will be displayed: String or
                            Number -> textbox, Date -> calendar, Enumeration ->
                            combobox, Boolean -> checkbox
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A "formula": this is an expression
                            which is calculated (this is for advanced users only)
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            An Expression - this will let you use an Expression
                            Builder to build up a full mvel expression. (At the
                            moment only basic expressions are supported)
                        </para>
                    </listitem>
                </orderedlist>
            </listitem>
        </itemizedlist> 
        </para>

        <para>F: This shows an "action" of the rule, the Right Hand Side of a
        rule consists in a list of actions.
        In this case, we are asserting/inserting a new fact, which
        is a Rejection (with the "reason" field set to an explanation). There
        are quite a few other types of actions you can use: you can modify an
        existing fact (which tells the engine the fact has changed) - or you
        can simply set a field on a fact (in which case the engine doesn't
        know about the change - normally because you are setting a result).
        You can also retract a fact. In most cases, just like in Fact Types, 
        you can click in the Fact name to get a list of its attributes or to
        bound it to a variable name. The values you enter are "literal" - in the 
        sense that what you type is what the value is. If it needs to be a
        calculation, then add an "=" at the start of the value - this will be
        interpreted as a "formula" (for advanced users only) ! and the
        calculation will be performed (not unlike a spreadsheet).
        You can also perform a logical insert of
        Facts, add Facts to existing global lists, call a method on a variable
        or write some free form chunk of code.
        </para>

        <para>G: This is where the rule options live. In this case, only
        salience is used which is a numeric value representing the rules
        "priority". This would probably be the most common option to
        use.</para>

        <para>H: Pattern/Action toolbar. Next to each Pattern or Action you will
        find a toolbar containing 3 buttons. The first button lets you insert
        a new Pattern/Action bellow the one you selected, the other two buttons
        will move the current Pattern/Action up or down. The toolbars are
        translucent by default; they get active when you move the mouse cursor
        inside one of them.
        </para>

        <section>
          <title>User driven drop down lists</title>

          <figure>
            <title>Data enumeration showing as a drop down list</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Guvnor/EnumDropDown.png"
                           format="PNG" scalefit="1"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>

          <para>Note that is it possible to limit field values to items in a
          pre configured list. This list is configured as part of the package
          (using a data enumeration to provide values for the drop down list).
          These values can be a fixed list, or (for example) loaded from a
          database. This is useful for codes, and other fields where there are
          set values. It is also possible to have what is displayed on screen,
          in a drop down, be different to the value (or code) used in a rule.
          See the section on data enumerations for how these are
          configured.</para>
        </section>

        <section>
          <title>Augmenting with DSL sentences</title>

          <para>If the package the rule is part of has a dsl configuration,
          when when you add conditions or actions, then it will provide a list
          of "DSL Sentences" which you can choose from - when you choose one,
          it will add a row to the rule - where the DSL specifies values come
          from a user, then a edit box (text) will be shown (so it ends up
          looking a bit like a form). This is optional, and there is another
          DSL editor. Please note that the DSL capabilities in this editor are
          slightly less then the full set of DSL features (basically you can
          do [when] and [then] sections of the DSL only - which is no
          different to drools 3 in effect).</para>

          <para>The following diagram shows the DSL sentences in action in the
          guided editor:</para>

          <figure>
            <title>DSL in guided editor</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Guvnor/GuidedDSL.png"
                           format="PNG" scalefit="1"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>
        </section>

        <section>
          <title>A more complex example:</title>

          <figure>
            <title>A more complex BRL example</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Guvnor/GuidedComplex.png"
                           format="PNG" scalefit="1"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>

          <para>In the above example, you can see how to use a mixture of
          Conditional Elements, literal values, and formulas.
          The rule has 4 "top level" Patterns and 1 Action.
          The "top level" Patterns are:
          <orderedlist spacing="compact">
            <listitem>
                <para>
                    A Fact Pattern on Person. This Pattern contains two field
                    constraints: one for birthdate field and the other one is a
                    formula. Note that the value of the birthdate restriction
                    is selected from a calendar. Another thing to note is that
                    you can make calculations and use nested fields in the
                    formula restriction (i.e. car.brand).
                    Finally, we are setting a variable name ($p) to the Person
                    Fact Type. You can then use this variable in other Patterns.
                    <note>
                        <para>
                        The generated DRL from this Pattern will be:
                        <code>$p : Person( birthDate &lt; "19-Dec-1982" , eval( car.brand == "Ford" &amp;&amp; salary &gt; (2500 * 4.1) ))</code>
                        </para>
                    </note>
                </para>
            </listitem>
            <listitem>
                <para>
                    A From Pattern. This condition will create a match for every
                    Address whose street name is "Elm St." from the Person's
                    list of addresses.
                    The left side of the from is a regular Fact Pattern and the
                    right side is an Expression Builder that let us inspect
                    variable's fields.
                    <note>
                        <para>
                        The generated DRL from this Pattern will be:
                        <code>Address( street == "Elm St." ) from $p.addresses</code>
                        </para>
                    </note>
                </para>
            </listitem>
            <listitem>
                <para>
                    A "Not Exist" Conditional Element. This condition will match
                    when its content doesn't create a match. In this case, its
                    content is a regular Fact Pattern (on Person). In this
                    Fact Pattern you can see how variables ($p) could be used
                    inside a formula value.
                    <note>
                        <para>
                        The generated DRL from this Pattern will be:
                        <code>not Person( salary == ( $p.salary * 2 ) )</code>
                        </para>
                    </note>
                </para>
            </listitem>
            <listitem>
                <para>
                    A "From Accumulate" Conditional Element. This is maybe one
                    of the most complex Patterns you can use. It consist in a
                    Left Pattern (It must be a Fact Pattern. In this case is a
                    Number Pattern. The Number is named $totalAddresses), a
                    Source Pattern (Which could be a Fact
                    Pattern, From, Collect or Accumulate conditional elements.
                    In this case is an Address Pattern Restriction with a field
                    restriction in its zip field) and a Formula Section where
                    you can use any built-in or custom Accumulate Function (in
                    this example a count() function is used).
                    Basically, this Conditional Element will count the addresses
                    having a zip code of 43240 from the Person's list of
                    addresses.
                    <note>
                        <para>
                        The generated DRL from this Pattern will be:
                        <code>$totalAddresses : Number() from accumulate ($a :
                        Address( zipCode == " 43240") from $p.addresses,
                        count($a)) </code>
                        </para>
                    </note>
                </para>
            </listitem>
          </orderedlist>
          </para>
          <figure>
            <title>Adding Patterns</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Guvnor/GuidedLHSPatterns.png"
                           format="PNG" scalefit="1"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>

          <para>
              When clicking on the + button of the WHEN section, a new popup
              will appear letting you to add a new Pattern to the Rule. The
              popup will looks similar to the image above. In this popup you
              could select the type of Pattern to add by selecting one of
              the list items. In the list you will have an entry for each
              defined Fact Type, in addition to the already mentioned
              Conditional Elements like "exists", "doesn't exist", "from",
              "collect", "accumulate" and "free form DRL". Once you have
              selected one of this elements, you can add a new Pattern by
              clicking on the "Ok" button. The new pattern will be added at the
              bottom of the rule's left hand side. If you wan't to choose a
              different position, you can use the combobox placed at the top
              of the popup.
          </para>
          <para>
            You can also open this popup by clicking in the + button from a
            Pattern's action toolbar. If that is the case, the popup that
            appears wouldn't containt the position combobox, because the new
            Pattern will be added just after the Pattern where you clicked.
          </para>

          <figure>
            <title>Adding constraints</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/Chapter-Guvnor/GuidedLHSConstraints.png"
                           format="PNG" scalefit="1"></imagedata>
              </imageobject>
            </mediaobject>
          </figure>

          <para>The above dialog is what you will get when you want to add
          constraints to the Person fact. In the top half are the simple
          options: you can either add a field constraint straight away (a list
          of fields of the Person fact will be shown), or you can add a
          "Multiple field constraint" using AND or OR operands.
          In the bottom half of the window you have the Advanced options:
          you can add a formula (which resolves to True or False - this is like
          in the example above: "... salary &gt; (2500 * 4.1)".
          You can also assign a Variable name to the Person fact
          (which means you can then access that variable on the action part of
          the rule, to set a value etc).</para>
        </section>
      </section>

      <section>
        <title>DSL rules</title>

        <para>DSL rules are textual rules, that use a language configuration
        asset to control how they appear.</para>

        <figure>
          <title>DSL rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/DSLRule.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>A dsl rule is a single rule. Referring to the picture above, you
        can a text editor. You can use the icons to the right to provide lists
        of conditions and actions to choose from (or else press Control +
        Space at the same time to pop up a list).</para>
      </section>

      <section>
        <title>Spreadsheet decision tables</title>

        <para>Multiple rules can be stored in a spreadsheet (each row is a
        rule). The details of the spreadsheet are not covered in this chapter
        (as there is a separate chapter for them).</para>

        <figure>
          <title>Spreadsheet decision table</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/DecisionTable.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>To use a spreadsheet, you upload an xls (and can download the
        current version, as per the picture above). To create a new decision
        table, when you launch the rule wizard, you will get an option to
        create one (after that point, you can upload the xls file).</para>
      </section>

      <section>
        <title>Guided decision tables (web based)</title>

        <para>The guided decision table feature allows decision tables to be
        edited in place on the web. This works similar to the guided editor by
        introspecting what facts and fields are available to guide the
        creation of a decision table.</para>

        <figure>
          <title>Decision table</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/WebDT.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>At the top right there is a button which shows the configuration
        area of the guided decision table:</para>

        <figure>
          <title>Decision table config</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/WebDT-config.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>It is in this section where condition and action columns are
        configured. "Attribute columns" are for setting attributes on a per
        rule (row) basis, such as salience. Web based decision tables are
        compiled into DRL like all other rule assets.</para>

        <para>Column configurations: when you edit or create a new column, you
        will be given a choice of the type of constraint: Literal (the value
        in the cell will be compared with the field using the operator),
        Formula (in which case the expression in the cell will be evaluated
        and then compared with the field) and Predicate (this means no field
        is needed, the expression will be evaluated to true or false). You can
        set a default value, but normally if there is no value in the cell,
        that constraint will not apply. </para>

        <para>The "in" operator: when you chose the operator that says "is in
        the following list" then the cell value can be a comma separated list
        of values, of which as long as one of them matches the specified
        field, that constraint will be deemed true. </para>

        <para>In general, there are little "info" icons (with the letter "i")
        which if you click on, a popup description of the feature is provided
        in context. </para>
      </section>

      <section>
        <title>Rule flows</title>

        <para>Rule flows: Rule flows allow you to visually describe the steps
        taken - so not all rules are evaluated at once, but there is a flow of
        logic. Rule flows are not covered in this chapter on the BRMS, but you
        can use the IDE to graphically draw ruleflows, and upload the .rfm
        file to the BRMS.</para>

        <para>Similar to spreadsheets, you upload/download ruleflow files (the
        eclipse IDE has a graphical editor for them). The details of Rule
        Flows are not discussed here.</para>
      </section>

      <section>
        <title>Technical rules (drl)</title>

        <para>Technical (drl) rules are stored as text - they can be managed
        in the BRMS. A DRL can either be a whole chunk of rules, or an
        individual rule. if its an individual rule, no package statement or
        imports are required (in fact, you can skip the "rule" statement
        altogether, just use "when" and "then" to mark the condition and
        action sections respectively). Normally you would use the IDE to edit
        raw DRL files, since it has all the advanced tooling and content
        assistance and debugging. However, there are times when a rule may
        have to deal with something fairly technical in a package in Guvnor.
        In any typical package of rules, you generally have a need for some
        "technical rules" - you can mix and match all the rule types together
        of course.</para>

        <figure>
          <title>DRL technical rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/DRLRule.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Functions</title>

        <para>Functions are another asset type. They are NOT rules, and should
        only be used when necessary. The function editor is a textual editor.
        Functions</para>

        <figure>
          <title>Function</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/Function.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Data enumerations (drop down list configurations)</title>

        <para>Data enumerations are an optional asset type that technical folk
        can configure to provide drop down lists for the guided editor. These
        are stored and edited just like any other asset, and apply to the
        package that they belong to.</para>

        <para>The contents of an enum config are a mapping of Fact.field to a
        list of values to be used in a drop down. That list can either be
        literal, or use a utility class (which you put on the classpath) to
        load a list of strings. The strings are either a value to be shown on
        a drop down, or a mapping from the code value (what ends up used in
        the rule) and a display value (see the example below, using the
        '=').</para>

        <figure>
          <title>Data enumeration</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/EnumConfig.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>In the above diagram - the "MM" indicates a value that will be
        used in the rule, yet "Mini Mal" will be displayed in the GUI.</para>

        <para>Getting data lists from external data sources: It is possible to
        have the BRMS call a piece of code which will load a list of Strings.
        To do this, you will need a bit of code that returns a java.util.List
        (of String's) to be on the classpath of the BRMS. Instead of
        specifying a list of values in the BRMS itself - the code can return
        the list of Strings (you can use the "=" inside the strings if you
        want to use a different display value to the rule value, as normal).
        For example, in the 'Person.age' line above, you could change it to:
        <programlisting> 'Person.age' : (new com.yourco.DataHelper()).getListOfAges()</programlisting>
        This assumes you have a class called "DataHelper" which has a method
        "getListOfAges()" which returns a List of strings (and is on the
        classpath). You can of course mix these "dynamic" enumerations with
        fixed lists. You could for example load from a database using JDBC.
        The data enumerations are loaded the first time you use the guided
        editor in a session. If you have any guided editor sessions open - you
        will need to close and then open the rule to see the change. To check
        the enumeration is loaded - if you go to the Package configuration
        screen, you can "save and validate" the package - this will check it
        and provide any error feedback.</para>
      </section>

      <section>
        <title>Advanced enumeration concepts</title>

        <para>There are a few other advanced things you can do with data
        enumerations.</para>

        <para>Drop down lists that depend on field values: Lets imagine a
        simple fact model, we have a class called Vehicle, which has 2 fields:
        "engineType" and "fuelType". We want to have a choice for the
        "engineType" of "Petrol" or "Diesel". Now, obviously the choice type
        for fuel must be dependent on the engine type (so for Petrol we have
        ULP and PULP, and for Diesel we have BIO and NORMAL). We can express
        this dependency in an enumerattion as:</para>

        <programlisting>
 'Vehicle.engineType' : ['Petrol', 'Diesel']
 'Vehicle.fuelType[engineType=Petrol]' : ['ULP', 'PULP' ]
 'Vehicle.fuelType[engineType=Diesel]' : ['BIO', 'NORMAL' ]  
</programlisting>

        <para>This shows how it is possible to make the choices dependent on
        other field values. Note that once you pick the engineType, the choice
        list for the fuelType will be determined.</para>

        <para>Loading enums programmatically: In some cases, people may want
        to load their enumeration data entirely from external data source
        (such as a relational database). To do this, you can implement a class
        that returns a Map. The key of the map is a string (which is the
        Fact.field name as shown above), and the value is a java.util.List of
        Strings.</para>

        <programlisting language="java">
public class SampleDataSource2 {

  public Map&lt;String&gt;, List&lt;String&gt;&gt; loadData() {
    Map data = new HashMap();

    List d = new ArrayList();
    d.add("value1");
    d.add("value2");
    data.put("Fact.field", d);

    return data;
 }

}
</programlisting>

        <para>And in the enumeration in the brms, you put:</para>

        <programlisting language="java">=(new SampleDataSource2()).loadData()
</programlisting>

        <para>The "=" tells it to load the data by executing your code.</para>

        <para>Mode advanced enumerations: In the above cases, the values in
        the lists are calculated up front. This is fine for relatively static
        data, or small amounts of data. Imagine a scenario where you have
        lists of countries, each country has a list of states, each state has
        a list of localities, each locality has a list of streets and so on...
        You can see how this is a lot of data, and it can not be loaded up.
        The lists should be loaded dependent on what country was selected
        etc...</para>

        <para>Well the above can be addressed in the following fashion:
        <programlisting>
      'Fact.field[dependentField1, dependentField2]' : '(new com.yourco.DataHelper()).getListOfAges("@{dependentField1}", "@{dependentField2}")'
    </programlisting> Similar to above, but note that we have just specified
        what fields are needed, and also on the right of the ":" there are
        quotes around the expression. This expression will then be evaluated,
        only when needed, substituting the values from the fields specified.
        This means you can use the field values from the GUI to drive a
        database query, and drill down into data etc. When the drop down is
        loaded, or the rule loaded, it will refresh the list based on the
        fields. 'depenentField1' and 'dependentField2' are names of fields on
        the 'Fact' type - these are used to calculate the list of values which
        will be shown in a drop down if values for the "field".</para>
      </section>
    </section>

    <section>
      <title>Templates of assets/rules</title>

      <para>Tip: As you may have many similar rules, you can create rule
      templates, which are simply rules which are kept in an inactive package
      - you can then categories templates accordingly, and copy them as needed
      (choosing a live package as the target package).</para>
    </section>

    <section>
      <title>Status management</title>

      <para>Each asset (and also package) in Guvnor has a status flag set. The
      values of the status flag are set in the Administration section of the
      BRMS. (you can add your own status names). Similar to Categories,
      Statuses do NOT effect the execution in any way, and are purely
      informational. Unlike categories, assets only have one status AT A
      TIME.</para>

      <para>Using statuses is completely optional. You can use it to manage
      the lifecycle of assets (which you can alternatively do with categories
      if you like).</para>

      <figure>
        <title>Asset status</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/AssetChangeStatus.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can change the status of an individual asset (like in the
      diagram above). Its change takes effect immediately, no separate save is
      needed.</para>

      <figure>
        <title>Asset status</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/PackageChangeStatus.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can change the status of a whole package - this sets the
      status flag on the package itself, but it ALSO changes the statuses on
      ALL the assets that belong to this package in one hit (to be the same as
      what you set the package to).</para>
    </section>

    <section>
      <title>Package management</title>

      <para>Configuring packages is generally something that is done once, and
      by someone with some experience with rules/models. Generally speaking,
      very few people will need to configure packages, and once they are
      setup, they can be copied over and over if needed. Package configuration
      is most definitely a technical task that requires the appropriate
      expertise.</para>

      <para>All assets live in "packages" in the BRMS - a package is like a
      folder (it also serves as a "namespace"). A home folder for rule assets
      to live in. Rules in particular need to know what the fact model is,
      what the namespace is etc.</para>

      <para><figure>
          <title>The package explorer</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/PackageExplorer.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>The above picture shows the package explorer. Clicking on an
      asset type will show a list of matches (for packages with thousands of
      rules, showing the list may take several seconds - hence the importance
      of using categories to help you find your way around).</para>

      <para>So while rules (and assets in general) can appear in any number
      of categories, they only live in one package. If you think of the BRMS
      as a file system, then each package is a folder, and the assets live in
      that folder - as one big happy list of files. When you create a
      deployment snapshot of a package, you are effectively copying all the
      assets in that "folder" into another special "folder".</para>

      <para>The package management feature allows you to see a list of
      packages, and then "expand" them, to show lists of each "type" of asset
      (there are many assets, so some of them are grouped together):</para>

      <para>The asset types: <itemizedlist>
          <listitem>
            <para>Business assets: this shows a list of all "business rule"
            types, which include decision tables, business rules etc.
            etc.</para>
          </listitem>

          <listitem>
            <para>Technical assets: this is a list of items that would be
            considered technical (eg DRL rules, data enumerations and rule
            flows).</para>
          </listitem>

          <listitem>
            <para>Functions: In the BRMS you can also have functions defined
            (optionally of course).</para>
          </listitem>

          <listitem>
            <para>DSL: Domain Specific Languages can also be stored as an
            asset. If they exist (generally there is only one), then they will
            be used in the appropriate editor GUIs.</para>
          </listitem>

          <listitem>
            <para>Model: A package requires at least one model - for the
            rules.</para>
          </listitem>

           <listitem>
            <para>WorkingSets: Working Sets let you create subsets of package's
            Fact Types and apply constraints to their fields.</para>
          </listitem>
        </itemizedlist></para>

      <para><figure>
          <title>Creating new assets</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/PackageNewItemTooltip.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure> From the package explorer you can create new rules, or new
      assets. Some assets you can only create from the package explorer. The
      above picture shows the icons which launch wizards for this purpose. If
      you hover the mouse over them, a tooltip will tell you what they
      do.</para>

      <para><figure>
          <title>Package configuration</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/PackageConfig.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>One of the most critical things you need to do is configure
      packages. This is mostly importing the classes used by the rules, and
      globals variables. Once you make a change, you need to save it, and that
      package is then configured and ready to be built. For example, you may
      add a model which has a class called "com.something.Hello", you would
      then add "import com.something.Hello" in your package configuration and
      save the change.</para>

      <para><figure>
          <title>Package building</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/PackageBuild.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>Finally you would "build" a package. Any errors caught are
      then shown at this point. If the build was successful, then you will
      have the option to create a snapshot for deployment. You can also view
      the "drl" that this package results in. WARNING: in cases of large
      numbers of rules, all these operations can take some time.</para>

      <para>It is optional at this stage to enter the name of a "selector" -
      see the admin section for details on how to configure custom selectors
      for your system (if you need them - selecters allow you to filter down
      what you build into a package - if you don't know what they are for, you
      probably don't need to use them).</para>

      <section>
        <title>Importing drl packages</title>

        <para>It is also possible to create a package by importing an existing
        "drl" file. When you choose to create a new package, you can choose an
        option to upload a .drl file. The BRMS will then attempt to understand
        that drl, break create a package for you. The rules in it will be
        stored as individual assets (but still as drl text content). Note that
        to actually build the package, you will need to upload an appropriate
        model (as a jar) to validate against, as a separate step.</para>
      </section>
    </section>

    <section>
      <title>Version management</title>

      <para>Both assets and whole packages of assets are "versioned" in the
      BRMS, but the mechanism is slightly different. Individual assets are
      saved a bit like a version of a file in a source control system.
      However, packages of assets are versioned "on demand" by taking a
      snapshot (typically which is used for deployment). The next section
      talks about deployment management and snapshots.</para>

      <figure>
        <title>Asset versions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/AssetVersionHistory.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Each time you make a change to an asset, it creates a new item in
      the version history. This is a bit like having an unlimited undo. You
      can look back through the history of an individual asset like the list
      above, and view it (and restore it) from that point in time.</para>
    </section>

    <section>
      <title>Deployment management</title>

      <para>Snapshots, URLS and binary packages:</para>

      <para>URLs are central to how built packages are provided. The BRMS
      provides packages via URLs (for download and use by the Knowledge
      Agent). These URLs take the form of:
      http://&lt;server&gt;/drools-guvnor/org.drools.guvnor.Guvnor/package/&lt;packageName&gt;/&lt;packageVersion&gt;</para>

      <para>&lt;packageName&gt; is the name you gave the package.
      &lt;packageVersion&gt; is either the name of a snapshot, or "LATEST" (if
      its LATEST, then it will be the latest built version from the main
      package, not a snapshot). You can use these in the agent, or you can
      paste them into your browser and it will download them as a file.</para>

      <para>Refer to the section on the Knowledge Agent for details on how you
      can use these URLs (and binary downloads) in your application, and how
      rules can be updated on the fly.</para>

      <figure>
        <title>Deployment snapshots</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/Snapshots.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above shows deployment snapshots view. On the left there is a
      list of packages. Clicking on a specific package will show you a list of
      snapshots for that package (if any). From there you can copy, remove or
      view an asset snapshot. Each snapshot is available for download or
      access via a URL for deployment.</para>
    </section>

    <section>
      <title>Navigating and finding rules</title>

      <para>The two main ways of viewing the repository are by using
      user-driven Categorization (tagging) as outlined above, and the package
      explorer view.</para>

      <para>The category view provides a way to navigate your rules in a way
      that makes sense to your organization.</para>

      <figure>
        <title>Category view</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/CategoryExplorer.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above diagram shows categories in action. Generally under each
      category you should have no more then a few dozen rules, if
      possible.</para>

      <para>The alternative and more technical view is to use the package
      explorer. This shows the rules (assets) closer to how they are actually
      stored in the database, and also separates rules into packages (name
      spaces) and their type (format, as rules can be in many different
      formats).</para>

      <figure>
        <title>Package view</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/PackageExplorer.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above shows the alternate way of exploring - using
      packages.</para>
    </section>
  </section>

  <section>
    <title>Creating a business user view</title>

    <para>In most cases not all users will want to see all the functionality
    described here. You could have a subset of users who you only want to let
    view or edit certain sets of rules, without getting confused by all the
    other stuff. In this case you can use fine grained authorization (see the
    Admin Guide on how to initialize this). By setting permissions on a per
    category basis, users that only have category permissions will see a
    limited subset of functionality, and only items that are tagged with those
    categories.</para>
  </section>

  <section>
    <title>The fact model (object model)</title>

    <para>For any rule base application, a fact model is needed to drive the
    rules. The fact model typically overlaps with the applications domain
    model, but in general it will be decoupled from it (as it makes the rules
    easier to manage over time).</para>

    <para>There are 2 ways to to do this: you can upload jar files containing
    classes which your application and the rules both use, or you can use
    models that are declared along with the rules.</para>

    <figure>
      <title>Choosing a model type</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/ModelChooseType.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>When a jar is uploaded, it will add import statements to the package
    configuration (you can then review and change them).</para>

    <para>Using declared models, you will see an editor like the
    following:</para>

    <figure>
      <title>Choosing a model type</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/ModelEdit.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In here you can define types, and add fields (each field has a
    type). The type of a field is suggested by a list (but this list is not
    exhaustive):</para>

    <figure>
      <title>Choosing a model type</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/ModelChooseFieldType.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>These fact models can be used like normal fact objects, however the
    way you create them is different (as they are not on your applications
    classpath). To create these objects, they are available from the RuleBase
    instance. <programlisting language="java">
          // Retrieve the generated fact type
        FactType cheeseFact = ruleBase.getFactType( "org.drools.generatedbeans.Cheese" );

        // Create a new Fact instance
        Object cheese = cheeseFact.newInstance();

        cheeseFact.set( cheese,
                        "type",
                        "stilton" );

</programlisting> The "cheese" object above can then be inserted into working
    memory just like a normal pojo based fact.</para>

    <para>Note that the namespace of the declared type is the package
    namespace where it was declared (in the above case
    "org.drools.generatedbeans").</para>

    <para>Why would you chose declared types over jar files: generally this
    reinforces the fact that the model "belongs" to the rulebase, rather then
    the application, and allows the model to have a lifecycle separate from
    the application. It also removed the hassle of keeping jar files in sync
    between rules and the applications that use the rules.</para>
  </section>

  <section>
    <title>Working Sets</title>
    <para>Working Sets are a mean for grouping Facts and then defining 
    constraints on them. You can create groups of Facts and only those Facts 
    will be visible when authoring rules using the Guided Editor.</para>
    <para>Right now, Working Sets must be activated manually from the Guided
    Editor window (using the "Select Working Set" button placed in the toolbar).
    In the future, different Working Sets could be assigned to different users
    to reduce the scope and complexity when authoring rules.</para>

    <figure>
      <title>Creating a new Working Set</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/WorkingSetCreation.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The figure above shows the window used to create or modify
    Working Sets. In this window you will find 2 lists. The list on the left
    side contains the possible Fact Types that can be added to the Working
    Set. These facts are those defined/imported in the package's model. The
    list on the right side contains the allowed Fact Types of this Working Set.
    When this Working Sets is active, only those Fact Types could be used
    while authoring rules using the Guided BRL Editor</para>

    <figure>
      <title>Defining Field Constraints inside a Working Set</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/WorkingSetConstraintCreation.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Once you have selected the valid Fact Types for a Working Set, you
    can add Constraints to the fields of those Facts Types. The image above
    shows how the Field Constraint tab looks like. In this configuration screen
    you will find:</para>
    <para>A.- Fact Types dropdown: Here you will find a list containing the
    Working Set's Fact Types</para>
    <para>B.- Field dropdown: Once you have selected a Fact Type, this dropdown
    will contain its fields.</para>
    <para>C.- Constraints List: This lists shows all the Constraints applied to
    the selected Field</para>
    <para>D.- Action Buttons: Using these buttons you will be able to add or
    remove Constraints to the selected Field. Right now, Guvnor provides a
    built-in collection of Constraints. The idea for next releases is to let
    users to plug their custom Constraints too.</para>
    <para>E.- Constraint's Attributes: In this section you will find all the
    attributes of the current Constraint that could be parametrized by the
    user.</para>
    <para>In the example above, a Matches Constraint is created for Car.brand
    field. This means that when rule authors use this field in a Rule condition,
    they should use a value valid according to this constraint, otherwise they
    will receive an error or warning.</para>

    <section>
        <title>Activating and Using Working Sets</title>
        <para>Working Sets are no active by default in Guvnor. Because this is
        an experimental feature, you must enable them manually in the Guided
        Editor panel if you want to use them. In the future, Working Sets will
        be associated to each user's profile.</para>
        <para>A new button was added in Guided Editor's Toolbar:
        "Select Working Sets". This button will open a popup with the list of
        the package's Working Sets. Using this popup you can activate one or
        more Working Sets.</para>
        <para>When Working Sets are activated, only the Fact Types allowed by
        them could be used when inserting new Patterns or Actions. The Patterns
        and Actions already present in the rule that contain prohibited Fact
        Types are marked as read only. Take a look at the next screen shots
        comparing the Guided Editor panel with and without Working Sets</para>

    <figure>
      <title>Comparison of "Add new Pattern" window using Working Set and
      without using them</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/WorkingSetFactConstraint.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In the image you can see how Working Sets could help rule's authors
    by reducing the amount of available Fact Types</para>

    <figure>
      <title>Comparison of "Add new Pattern" window using Working Set and
      without using them</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/WorkingSetFactConstraintRO.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
    
    <para>Here you can see how Patterns containing prohibited Fact Types are
    switched to read only mode after Working Sets are activated.</para>
    
    <section>
        <title>Using Field Constraint</title>
        <para>Up to now we have only cover how Facts are filtered using Working
        Sets. Another important feature of Working Sets is Field Constraints. We
        have already saw how to configure them, now we are going to explain how
        to use them.</para>
        <para>Because Field Constraints are defined inside a Working Set, we
        need to activate one or more Working Set to start working with them.
        Once a Working Set defining Field's Constraints is active we have
        two ways to use them: on demand validation and real-time validation.</para>
        <para>On demand validation is performed when you press the "Verify"
        button present in Guided Editor's toolbar. This button will fire a
        rule verification and will end up showing a report with the results.
        Any violated constraint will be shown as an error or warning according
        to its relevance</para>

        <figure>
          <title>On demand Field Constraints validation</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/WorkingSetFieldConstraintReport.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>The image above shows the report that appears when a Working
        Set defines a Range Constraint on Driver.age. The age should be
        between 18 and 80.</para>

        <para>Real-Time validation is an experimental feature (yes, inside
        another experimental feature like Working Sets) that checks for
        Field's Constraints violations in real time and mark the lines where
        the violations are using error or warning icons. This feature is
        disabled by default because sometimes it could be expensive. If you
        want to try it out, you should enable it in Administration -> Rules
        Verification. This configuration is not yet persisted, so you need to
        enable it every time you start Guvnor.</para>

        <figure>
          <title>Real-Time Field Constraints validation</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/Chapter-Guvnor/WorkingSetFieldConstraintRealTimeValidation.png"
                         format="PNG" scalefit="1"></imagedata>
            </imageobject>
          </mediaobject>
        </figure>

        <para>This Image shows the result of real-time validation. There you
        can see the same result as on demand validation, but you don't need
        to click any button, and the errors/warnings are shown in a more
        fashionable way!</para>

        <warning><para>The problem with real-time validation is that right now only
        support "top level" Patterns.</para></warning>

    </section>


    </section>
  </section>

  <section>
    <title>The business user perspective</title>

    <para>You can see from this manual, that some expertise and practice is
    required to use Guvnor. In fact any software system in some sense requires
    that people be "technical" even if it has a nice looking GUI. Having said
    that, in the right hands Guvnor can be setup to provide a suitable
    environment for non technical users.</para>

    <para>The most appropriate rule formats for this use are using the Guided
    editor, Decision tables and DSL rules. You can use some DSL expressions
    also in the guided editor (so it provides "forms" for people to enter
    values).</para>

    <para>You can use categories to isolate rules and assets from non
    technical users. Only assets which have a category assigned will appear in
    the "categories" view.</para>

    <para>The initial setup of Guvnor will need to be done by a
    developer/technical person who will set the foundations for all the rules.
    They may also create "templates" which are rules which may be copied (they
    would typically live in a "dummy" package, and have a category of
    "template" - this can also help ease the way).</para>

    <para>Deployment should also not be done by non technical users (as
    mentioned previously this happens from the "Package" feature).</para>
  </section>

  <section>
    <title>Advanced config options in a rule package</title>

    <para>As drools supports various configuration options for a package (such
    as adding functions for "accumulate" etc), this can be done by adding a
    X.package or X.conf file to the package - files which contain name/value
    pairs in the "properties" style. These will then be automatically added to
    the package configuration. See the main drools documentation for all the
    things you can do.</para>
  </section>

  <section>
    <title>Deployment: Integrating rules with your applications</title>

    <para>Its all very interesting to manage rules, but how to you use or
    "consume" them in your application? This section covers the usage of the
    KnowledgeAgent deployment component that automates most of this for
    you.</para>

    <section>
      <title>The Knowledge Agent</title>

      <para>The knowledge agent is a component which is embedded in the Drools
      API. To use this, you don't need any extra components. In fact, if you
      are using Guvnor, your application should only need to include the
      drools-api and drools-core dependencies in its classpath (drools and
      mvel jars only), and no other rules specific dependencies.</para>

      <para>Note that there is also a drools-ant ant task, so you can build
      rules as part of an ant script (for example in cases where the rules are
      edited in the IDE) without using Guvnor at all - the drools-ant task
      will generate .pkg files the same as Guvnor.</para>

      <para>Once you have "built" your rules in a package in Guvnor (or from
      the ant task), you are ready to use the agent in your target
      application.</para>

      <para>The Following example constructs an agent that will build a new
      KnowledgeBase from the files specified in the path String. It will poll
      those files every 60 seconds, which is the default, to see if they are
      updated. If new files are found it will construct a new KnowledgeBase.
      If the change set specifies a resource that is a directory it's contents
      will be scanned for changes too.</para>

      <programlisting language="java">
 KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "MyAgent" );
 kagent.applyChangeSet( ResourceFactory.newUrlResource( url ) );
 KnowledgeBase kbase = kagent.getKnowledgeBase();
</programlisting>

      <para>The KnowledgeAgent can accept a configuration that allows for some
      of the defaults to be changed. An example property is
      "drools.agent.scanDirectories", by default any specified directories are
      scanned for new additions, it is possible to disable this.</para>

      <programlisting language="java">KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();

 KnowledgeAgentConfiguration kaconf = KnowledgeAgentFactory.newKnowledgeAgentConfiguration();
 kaconf.setProperty( "drools.agent.scanDirectories",
                     "false" ); // we do not want to scan directories, just files
       
 KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "test agent", // the name of the agent
                                                                  kaconf );
 kagent.applyChangeSet( ResourceFactory.newUrlResource( url ) ); // resource to the change-set xml for the resources to add</programlisting>

      <para>An example of the change-set.xml.</para>

      <programlisting language="xml">&lt;change-set xmlns='http://drools.org/drools-5.0/change-set'";
        xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
        xs:schemaLocation='http://drools.org/drools-5.0/change-set drools-change-set-5.0.xsd' &gt;
        &lt;add&gt; 
          &lt;resource source='http://localhost:9000/TEST.pkg' type='PKG' /&gt;
        &lt;/add&gt; 
&lt;/change-set&gt;</programlisting>

      <para>Resource scanning is not on by default, it's a service and must be
      started, the same is for notification. This can be done via the
      ResourceFactory.</para>

      <programlisting language="java">ResourceFactory.getResourceChangeNotifierService().start();
ResourceFactory.getResourceChangeScannerService().start();</programlisting>

      <para>Following shows the deployment screen of Guvnor, which provides
      URLs and downloads of packages.</para>

      <figure>
        <title>Snapshot deployment</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/SnapshotDeploy.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can see the "Package URI" - this is the URL that you would
      copy and paste into the change-set.xml file to specify that you want
      this package. It specifies an exact version (in this case to a snapshot)
      - each snapshot has its own URL. If you want the "latest" - then replace
      "NewSnapshot" with "LATEST".</para>

      <para>You can also download a .pkg file from here, which you can drop in
      a directory and use the "file" or "dir" feature of the KnowledgeAgent if
      needed (in some cases people will not want to have the runtime
      automatically contact Guvnor for updates - but that is generally the
      easiest way for many people).</para>
    </section>
  </section>

  <section>
    <title>WebDAV and HTTP</title>

    <para>The repository back end can also be accessed via webdav. WebDAV is a
    http based file system API - which has clients on all platforms (some
    operating systems such as windows can connect directly to WebDAV
    repositories almost like a file system.</para>

    <section>
      <title>WebDAV</title>

      <figure>
        <title>Windows webdav</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/WebDAVWindows.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In windows the "web folders" feature can be used. On OSX - the
      free cyberduck client can work well. To access the repository as webdav,
      you the url is the same as the web interface, only with /webdav at the
      end, instead of Guvnor.html. Authentication will be required to get
      access this way. This will show a packages and snapshots directory - the
      snapshots directory is read only (a view of created snapshots of
      packages). The packages directory will contain a list of packages in the
      repository, drilling in to them will show the individual assets as
      files.</para>
    </section>

    <section>
      <title>URLs</title>

      <para>There are a few other URLs which are handy to know exist. The
      package deployment URL mentioned in the section about knowledge agent
      deployment also has a few other features: By appending .drl to the end
      of a URL, you will show the generated DRL for that package. eg:
      /package/testPDSGetPackage/LATEST.drl - will show the DRL (not the
      binary package) for the latest package. Further to this, you can append
      /assetName.drl - and it will show the generated DRL for that item. (even
      if it isn't a drl file). eg
      /package/testPDSGetPackage/LATEST/SomeFile.drl.</para>
    </section>
  </section>

  <section>
    <title>Inbox and comments</title>
    <para>
      Built into the Guvnor are two useful features to helping manage changes: an Inbox, and a comments section. 
      These features do not affect any execution or access to rules, but are purely for documentation and notification purposes, and are of course always optional to use. 
    </para>
    <section>
      <title>Comments</title>
      <para>
	Below the documentation box of each artifact, is a "comments" section - simply, you can add a new comment. Administrators can clear all comments on a given artifact, but other users can only append comments. Each comment records what user made the comment, and when. Users who can't edit artifacts can still comment on them. 
      </para>
    </section>

    <section>
      <title>Inbox</title>
      <para>
	In the "browse" section of the application, there is an "Inbox" tree item, below this are 3 inboxes. 
	"Incoming changes" contains changes to any artifacts that the current logged in user has edited in the past, or commented on. Simply editing or commenting on an artifact registers interest in it to be notified of changes the next time you log in."Recently opened" contains items that have been recently opened (simply opening an artifact will make it appear here, the last 100 recently opened items will appear here). 
"Recently edited" contains the last 100 recently edited items (artifacts that the current user has made changes to).  

      </para>
    </section>
  </section>

  <section>
    <title>Eclipse Guvnor integration</title>

    <para>The Eclipse Guvnor tools (EGT) provide the ability to push/pull
    artifacts from the Guvnor repository server and the developers workspace
    in eclipse. It is therefore possible for artifacts to be both managed via
    Guvnor as well as in traditional developer friendly SCM systems (such as
    subversion). The Guvnor repository is not intended as a Source Code
    Management (SCM) solution, and the EGT are not intended to be Eclipse
    “team provider” extensions or replacements. Rather, the Guvnor repository
    is a location where certain artifacts (such as rules and SOA policy
    definitions) are controlled (“governed”) by policies defined by the
    deployment environment. The purpose of the EGT is then to enable access to
    resources held by the Guvnor repository, so they can be used in
    development. Thus, limited capabilities for reading, writing, adding, and
    removing Guvnor repository resources are provided in the EGT.</para>

    <section>
      <title>Source Code and Plug-in Details</title>

      <para>The source code for the EGT is available at: <code>
      http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-eclipse/
      </code> EGT consist of two plug-ins: org.guvnor.tools org.eclipse.webdav
      and requires Eclipse 3.3.x. The current Eclipse Drools plug-ins are also
      useful for viewing Guvnor repository resources such as rule definitions,
      but not required for operation of the EGT.</para>
    </section>

    <section>
      <title>Functionality Overview</title>

      <para>Views and Perspective: The EGT contains two views – Repository
      Explorer and Version History – that will be the center of most
      interaction with Guvnor. Eclipse standard views such as Properties and
      the Resource Navigator are also useful. While each of these views can be
      opened and positioned independently within an Eclipse workbench, the
      Guvnor perspective provides a convenient method of getting a suggested
      layout. In the Eclipse workbench menu, choose Window, Open Perspective,
      Other to get the perspective list:</para>

      <figure>
        <title>Views and perspectives</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT1.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>and then choose “Guvnor Repository Exploring.” This opens the
      Guvnor perspective:</para>

      <figure>
        <title>Views and perspectives</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT2.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>On the left side is the Guvnor Repository Explorer and the Eclipse
      Properties views, the Guvnor Resource History view is on the bottom, and
      the Eclipse Resource Navigator is on the right side. The purpose of the
      Guvnor Repository Explorer is to enable access to Guvnor repository
      resources in a standard tree format, and the Guvnor Resource History
      view shows revisions of specific resources available in the
      repository.</para>
    </section>

    <section>
      <title>Guvnor Connection Wizard</title>

      <para>After opening the Guvnor perspective, the first task is to make a
      connection to a Guvnor repository. This is handled by the Guvnor
      Connection wizard. This wizard appears in a number of places within the
      EGT (as detailed below), but in this section we will cover only the two
      most basic entry points. The Guvnor Connection wizard can be started
      using the Eclipse menu: File , New , Other , Guvnor , Guvnor repository
      location, or in the Guvnor Explorer using the drop-down menu:</para>

      <figure>
        <title>Connection wizard</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT3.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>or the menu button:</para>

      <figure>
        <title>Connection wizard</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT4.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Choosing either of these will start the Guvnor connection
      wizard:</para>

      <figure>
        <title>Connection wizard</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT5.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Default values appear in the Location, Port, and Repository
      fields. (See the “Guvnor Preferences” section below for details about
      how to change these default values.) Of course, any of these fields can
      be edited by typing in the corresponding text box. Drag-and-drop or
      paste into the Location field of a typical Guvnor repository URL such
      as:
      <code>http://localhost:8080/drools-guvnor/org.drools.guvnor.Guvnor/webdav</code>
      Results in the URL being parsed into the respective fields as well. The
      authentication information (user name and password) can optionally be
      stored in the Eclipse workbench's key-ring file based on the selection
      of "Save user name and password." If the authentication information is
      not stored in the key-ring, then the EGT uses session authentication,
      which means that the credentials supplied are used only for the lifetime
      of the Eclipse workbench instance.</para>

      <para>If authentication information is not stored in the key-ring or the
      authentication information (key-ring or session) is not valid, the EGT
      will prompt for authentication information when it has to access the
      Guvnor repository:</para>

      <figure>
        <title>Login</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT6.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If authentication fails, the EGT will retry once and then issue an
      authentication failure error. (If an authentication failure error
      occurs, you can retry the same operation and supply different
      authentication information.) Note that the EGT calls the Guvnor
      repository at various times, such as when determining if resource
      updates are available, so, if you use session authentication, the
      authentication dialog will appear at different times during the Eclipse
      workbench session, depending on what actions you take. For ease of use,
      we recommend saving the authentication information in the Eclipse
      key-ring. (The Eclipse key-ring file is distinct from key-ring files
      found in some platforms such as Mac OS X and many forms of Linux. Thus,
      sometimes if you access a Guvnor repository outside the EGT, the
      key-ring files might become unsynchronized and you will be unexpectedly
      prompted for authentication in Eclipse. This is nuisance, but your usual
      credentials should apply in this case.)</para>

      <para>Once the Guvnor connection wizard is complete, the new Guvnor
      repository connection will appear in the Guvnor Repository Explorer. You
      can then expand the tree to view Guvnor repository contents.</para>
    </section>

    <section>
      <title>Guvnor Repository Explorer</title>

      <figure>
        <title>Explorer</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT7.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Guvnor Repository Explorer view contains tree structures for
      Guvnor repository contents. As described above, there are menu and
      tool-bar actions for creating Guvnor repository connections. The red “X”
      in the tool-bar and “Delete” in the menu removes a Guvnor repository
      connection, and the “Refresh” menu item reloads tree content for the
      selected node. Finally, there are a number of tool-bar/menu items in
      support of “drill-into” functionality: one the tool-bar these are
      represented by the house (“return to top level/home”) and the arrows (go
      into/back). Drill-down is useful when working with deeply nested tree
      structures and when you wish to concentrate on only branch of the tree.
      For example, drilling into the “defaultPackage” node shown above changes
      the tree view to:</para>

      <figure>
        <title>Explorer</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT8.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>That is, we see only the contents of “defaultPackage” in the tree.
      Clicking on the house button, or selecting “Go Home” returns the tree to
      the top-level structure shown in the previous picture above.</para>

      <para>There are a number of operations that can be performed on Guvnor
      repository files. Selecting a file in the Guvnor repository causes the
      Eclipse Properties view to update with details about that file:</para>

      <figure>
        <title>Properties</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/Chapter-Guvnor/EGT9.png"
                       format="PNG" scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Double-clicking on a folder (directory) in the tree will cause
      that folder to expand if collapsed and collapse if expanded.
      Double-clicking on a file in the tree will cause a read-only editor in
      Eclipse to open, showing the contents of that file:</para>

      <figure>
        <title>Comments</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT10.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Dragging a file from the Guvnor repository tree to a folder in an
      Eclipse local project (for example in the Eclipse Resource Navigator
      view) will cause a copy of that file to be made in the local Eclipse
      workspace. (Note: You can also “Save As...” when a file is open in a
      read-only editor to save a local writable copy of the contents. Doing
      so, however, will not associate the file created with its Guvnor
      source.) Finally, you can view the revision history of a file selected
      in the tree using the “Show History” context menu item. (The details of
      resource history will be discussed below.)</para>
    </section>

    <section>
      <title>Local Copies of Guvnor Files</title>

      <para>As mentioned in the Introduction, the main purpose of the EGT is
      to allow development using resources held in a Guvnor repository. There
      are two method of getting local copies of Guvnor repository
      resources:</para>

      <para>1. Drag-and-drop from the Guvnor Repository Explorer, as described
      above.</para>

      <para>2. Using the “import from Guvnor” wizard, as described
      below.</para>

      <para>When local copies of Guvnor repository files are created, the EGT
      sets an association between the local copy and the master file in the
      repository. (This information is kept in the (normally) hidden
      “.guvnorinfo” folder in the local project and, like all metadata, should
      not be changed by end users.) This association allows for operations
      such as update and commit in synchronization with the master copy held
      in the Guvnor repository. The EGT decorates local resources associated
      with Guvnor repository master copies. This decoration appears in Eclipse
      views conforming to the Eclipse Common Navigator framework, such as the
      Eclipse Resource Navigator and the Java Package Explorer. The image
      below shows decoration in the Eclipse Resource Navigator:</para>

      <figure>
        <title>Navigator</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT11.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Note the Guvnor icon decorator on the top right of the file
      images, and the Guvnor revision details appended to the file names. (The
      presence/location of these can be changed. See “Guvnor Preferences”
      below for details.) Here we see that, for example, “simpleRule.drl” is
      associated with a Guvnor repository resource and the local copy is based
      on revision 3, with a 7-15-2008, 15:37:34 date/time stamp. The file
      “deleteTest.txt,” however, is not associated with a Guvnor repository
      file. Further details about the association can be found in the standard
      Eclipse properties page, via the context menu “Properties”
      selection:</para>

      <figure>
        <title>Properties</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT12.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The EGT contributes a property page to the standard Eclipse
      properties dialog, the contents of which are shown above. The specific
      Guvnor repository, the location within the repository, the version
      (date/time stamp) and revision number are displayed.</para>
    </section>

    <section>
      <title>Actions for Local Guvnor Resources</title>

      <para>The EGT provides a number of actions (available through the
      “Guvnor” context menu on files) for working with files, both those
      associated with Guvnor repository master copies and those not
      associated. The actions are: <code> 1.Update 2.Add 3.Commit 4.Show
      History 5.Compare with Version 6.Switch to Version 7.Delete 8.Disconnect
      </code> Each of these actions will be described below.</para>

      <para>Update Action:</para>

      <para>The Update action is available for one or more Guvnor resources
      that are not in synchronization with the Guvnor repository master
      copies. These resources would not be in synchronization because
      either/both (1) there are local changes to these resources or (2) the
      master copies have changed in the Guvnor repository. Performing the
      Update action replaces the local file contents with the current contents
      from the Guvnor repository master copies (equivalent to “Switch to
      version” for latest version).</para>

      <para>Add Action</para>

      <para>The Add action is available for one or more local files that are
      not associated with a Guvnor repository master copy. Choosing the Add
      action launches the “Add to Guvnor” wizard:</para>

      <figure>
        <title>Add action</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT13.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The first page of the wizard asks for the selection of the target
      Guvnor repository and gives the choice to create a new Guvnor repository
      connection (in which case the second page is the same as the Guvnor
      Connection wizard described above). Once the target Guvnor repository is
      chosen, the wizard then asks for the folder location to add the
      selection files:</para>

      <figure>
        <title>Add action</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT14.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Here I have selected the folder “anotherPackage” as the
      destination location1. Clicking on “Finish” adds the selected files to
      the Guvnor repository and creates an association between the local and
      Guvnor repository files. (Not that the wizard will not allow for
      overwrite of existing Guvnor repository files – another target location
      must be chosen.)</para>

      <para>Compare with Version Action:</para>

      <para>The Compare with Version action is enabled for one Guvnor
      repository associated file. This action first opens a wizard asking for
      the version for comparison (with the local file contents):</para>

      <figure>
        <title>Compare</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT15.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once the revision is selected, the action opens the Eclipse
      compare editor (read-only):</para>

      <figure>
        <title>Compare</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT16.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This editor uses Eclipse-standard comparison techniques to show
      the differences in the two versions. In cases where there are no
      differences, the editor will not open: rather, a dialog saying that
      there are no differences will appear.</para>

      <para>Switch to Version Action:</para>

      <para>The Switch to Version action is enabled for one Guvnor repository
      associated file. First the Switch to Version action prompts for
      selection of version:</para>

      <figure>
        <title>Versions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT17.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once the version is selected, the Switch to Version action
      replaces the local file contents with those from the revision
      selected.</para>

      <para>Delete Action:</para>

      <para>The Delete action is enabled for one or more Guvnor repository
      associated files. After confirmation via a dialog, the Delete action
      removes the files in the Guvnor repository and deletes local metadata
      for the Guvnor repository association.</para>

      <para>Disconnect Action:</para>

      <para>The Disconnect action is enabled for one or more Guvnor repository
      associated files, and removes local metadata for the Guvnor repository
      association.</para>

      <para>Guvnor Resource History View:</para>

      <para>The Guvnor Resource History view should details about revision
      history for selected files, both local and those in Guvnor repositories.
      The initial state of this view is:</para>

      <figure>
        <title>History</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT18.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Guvnor Resource History view is populated by “Show History”
      actions in either the local “Guvnor” context menu or in the context menu
      for a Guvnor repository file in the Guvnor Repository Explorer. Once
      this action is performed, the Guvnor Resource History view updates to
      show the revision history:</para>

      <figure>
        <title>History</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT19.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Here we see that the file “simpleRule.drl” has three revisions.
      Double clicking on a revision row (or context menu “Open (Read only)”)
      opens an Eclipse read-only editor with the revision contents. (Note: You
      can also “Save As...” when a file is open in a read-only editor to save
      a local writable copy of the contents. Doing so, however, will not
      associate the file created with its Guvnor source.)</para>
    </section>

    <section>
      <title>Importing Guvnor Repository Resources</title>

      <para>In addition to the single file drag-and-drop from the Guvnor
      Repository Explorer view, the EGT also includes a wizard for copying one
      or more files from a Guvnor repository to the local workspace (and
      setting the association with the Guvnor repository). This wizard is
      available from the Eclipse Import , Guvnor, Resource from Guvnor and the
      Eclipse File, New, Other, Guvnor, Resource from Guvnor menu items.
      (Note: the wizard is identical but appears in both locations to
      accommodate users who tend to view this functionality as being in either
      category.) The first page of the wizard asks for the selection of the
      source Guvnor repository and gives the choice to create a new Guvnor
      repository connection (in which case the second page is the same as the
      Guvnor Connection wizard described above).</para>

      <figure>
        <title>Import</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT20.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once the source Guvnor repository is chosen, the wizard prompts
      for resource selection:</para>

      <figure>
        <title>Import</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT21.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Finally, the target location in the local workspace is
      chosen:</para>

      <figure>
        <title>Import</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT22.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>On completion the wizard copies the selected files from the Guvnor
      repository to the local workspace. If a file with the same name already
      exists in the destination, the wizard uses the Eclipse standard “prompt
      for rename” dialog:</para>

      <figure>
        <title>Copy</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT23.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Guvnor plugin Preferences</title>

      <para>The EGT provides a preference page in the “Guvnor”
      category:</para>

      <figure>
        <title>Preferences</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/Chapter-Guvnor/EGT24.png" format="PNG"
                       scalefit="1"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The preferences cover two categories: Guvnor repository
      connections and local Guvnor repository resource decorations.</para>

      <para>Guvnor Repository Connection Preferences</para>

      <para>There are two preferences that can be set for Guvnor repository
      connections, and these are used when creating new connections. The first
      is a default Guvnor repository URL template, which can make it easier to
      create multiple similar connections by simply changing part of the
      field, such as the host name. The second is whether saving of
      authentication information in the Eclipse platform key-ring should be
      enabled by default. As with the Guvnor repository URL template, actually
      whether to save a specific instance of authentication information in the
      Eclipse platform key-ring can be determined when actually creating the
      connection. That is, both of these preferences are simply convenience
      values set to reasonable defaults.</para>

      <para>Local Guvnor Repository Resource Decoration Preferences</para>

      <para>The second category of preferences provided by the EGT deals with
      how decoration of local resources associated with Guvnor repository
      resources is presented. Since the Guvnor repository is not a substitute
      for a SCM, and since SCM tools in Eclipse tend to decorate local
      resources, it is useful to be able to control just how the EGT decorate
      its local resources to avoid messy conflicts with SCM packages. In the
      “File Decoration” section of the preference page, you can choose the
      location (top right, bottom right, top left, bottom left) of the
      decoration icon, or you can choose not to display it. In the “Text”
      section, you can format the Guvnor metadata that is appended to the file
      names: Whether to show an indicator (&gt;) when the local file has
      changes not committed back to the Guvnor repository. Whether to show the
      revision number. Whether to show the date/time stamp. Any changes to
      these preferences take effect immediately upon clicking the “Apply” or
      “Ok” buttons.</para>
    </section>
  </section>

  <!-- end EGT section -->
</section>
