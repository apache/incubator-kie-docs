<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Administration guide</title>

  <para>This chapter covers installation and administration issues of the
  BRMS.</para>

  <para>The BRMS is a web application that can run in multiple environments,
  and be configured to suit most situations. There is also some initial setup
  of data, and export/import functions covered.</para>

  <section>
    <title>Installation</title>

    <para>Installation for most people is very simple. The Guvnor application
    is deployed as a .war file, which can be deployed in application servers
    or servlet containers with little or no configuration if you are happy
    with the defaults.</para>

    <para>When you have downloaded the Guvnor distribution (which you can get
    from http://www.jboss.org/drools), you will find the drools-guvnor.war file
    in the zip file. Copy the WAR file into the deployment directory of you
    app server, and then start your app server. If you need to customize some
    settings, you can first "explode" (unzip) the war file, and change any
    configuration settings, and then either zip it up, or deploy it
    "exploded". (Note in the JBoss Application Server you will need to make
    sure the exploded folder name ends in ".war")</para>

    <para>Once the drools-guvnor.war has been placed in the deployment
    directory, and the application server started, you should navigate to
    http://localhost/drools-guvnor and check that Guvnor appears. (Obviously
    substitute the URL for what your application server is configured
    to).</para>

    <para>Once that shows up, you are deployed and ready to go !</para>

    <section>
      <title>Supported and recommended platforms</title>

      <para>Guvnor is capable of running in any application server that
      supports Java SE5 (JEE 5 is not required) - this includes servlet
      containers like tomcat.</para>

      <para>It is actively teste/developed on JBoss app server platforms, and
      these are recommended if you are able to use them, or don't have any
      existing infrastructure. However, it is possible to use any
      container/app server, in some cases with minor configuration tweaks
      (consult the wiki for specific tips - many in the community have been
      able to make it run on various platforms).</para>

      <para>You can of course download these app servers from www.jboss.com
      for every operating system.</para>

      <para>Deployment into JBoss platforms: If you are installing a new JBoss
      platform, the WAR can be copied to [app server
      directory]/server/default/deploy. You then start up the server by
      running run.sh or run.bat in the [app server directory/bin]
      directory.</para>
    </section>
  </section>

  <section>
    <title>Database configuration</title>

    <para>Guvnor uses the JCR standard for storing assets (such as rules). The
    default implementation is Apache Jackrabbit
    (http://jackrabbit.apache.org/). This includes an out of the box storage
    engine/database, which you can use as is, or configure to use an existing
    RDBMS if needed.</para>

    <section>
      <title>Changing the location of the data store</title>

      <para>When you run Guvnor for the first time (starting up the app
      server), it will create a database in the [app server directory]/bin/
      directory (assuming you used on of the JBoss platforms). There is a
      repository.xml file, and a repository directory that are automatically
      created.</para>

      <para>The location of the data store should be a secure location, that
      is backed up. The default location may not be suitable for this, so the
      easiest way is to set a more suitable location. If you want to change
      this, please make sure you have stopped Guvnor (ie stopped the app
      server or undeployed the application).</para>

      <para>To change the location, unzip the WAR file, and locate the
      components.xml file in the WEB-INF directory. This is a JBoss Seam
      configuration file (Seam is the framework used) which allows various
      parts of the system to be customized. When you have located the
      components.xml file, you should see something like the following:</para>

      <programlisting language="xml">&lt;component name="repositoryConfiguration"&gt;
 &lt;!--
  *** This is for configuring the "home" directory for the repository storage. the directory must exist. ***
     &lt;property name="homeDirectory"&gt;/home/michael/RulesRepository_001&lt;/property&gt;
   --&gt;  

   ...
&lt;/component&gt;
</programlisting>

      <para>Find the component with a name of "repositoryConfiguration" and
      the property with the name of "homeDirectory".</para>

      <para>If you un comment this (as in the example above it is commented
      out), you can set whatever path you need for the repository data to be
      stored in. You can also use this to move the repository around. In that
      case, when you have set the location in the components.xml you can
      simply move the repository.xml AND the repository directory to the new
      location that you set in the components.xml.</para>

      <para>If there is no repository at the location specified (or in the
      default location) then Guvnor will create a new empty one.</para>

      <para>There are many more options which can be configured in the
      repository.xml, but for the most part, it is not recommended to change
      the defaults.</para>
    </section>

    <section>
      <title>Configuring Guvnor to use an external RDBMS</title>

      <para>In some cases it may be a requirement that you use an external
      RDBMS, such as Oracle, MySQL, or Microsoft SQL Server as the data store
      - this is permitted. In this case, the easiest thing to do is to start
      up Guvnor with defaults (or with a suitable home directory as specified
      above) to let it generate the default repository.xml scaffolding.</para>

      <para>Locate the repository.xml file that was generated, and open it -
      it will be annotated with comments describing many of the different
      options. From here on, you will need to know a little about Jackrabbit
      Persistence managers:http://wiki.apache.org/jackrabbit/PersistenceManagerFAQ</para>

      <para>There are a few persistence managers, some are database specific
      (eg Oracle). There is a SimpleDBPersistenceManager which works with any
      database that supports JDBC - you also specify the database type, so it
      uses the specific DDL to create the table structure (all major databases
      are supported).</para>

      <para>Guvnor will create the tables the first time it is started up if
      it is running against a fresh (empty) RDBMS - so its important to note
      that the user credentials supplied have permissions to create tables (at
      least initially, on first run, after that they could be locked
      down).</para>
    </section>

    <section>
      <title>Searching and indexing, Version storage</title>

      <para>Jackrabbit has a separate storage area for version storage (as
      over time, the number of old versions will increase, yet it should not
      slow down the performance of the main data store). The version storage
      also has its own persistence manage configuration in the repository.xml,
      but for most purposes you can use the same database as the main storage
      (just with a different schema object prefix - ie in your database, all
      the version data will be prefixed with "version_" but otherwise in the
      same tablespace). See the repository.xml for more details of
      this.</para>

      <para>Lucene is used to provide indexing across the semi structured
      data, and across versions. This indexing is generally best stored on a
      filesystem, local to Guvnor (as per the default in the repository.xml) -
      in most cases the default is fine.</para>
    </section>
  </section>

  <section>
    <title>Security - Authentication and basic access</title>

    <para>Please note that giving someone access to Guvnor indicates a level
    of trust. Being able to editing and build rules is providing a great deal
    of power to a user. Thus you should not open up Guvnor to your entire
    organisation - but instead to a select few. Use https (http with TLS/SSL)
    whereever possible (even internally in a companies network this is a good
    idea). Use this power wisely - this not a "run of the mill" application
    that provides read/write access to a database, but something much more
    power. Just imagine you are spider man - with great power comes great
    responsibility (of course even more so for super man).</para>

    <para>Security is configured by using the components.xml file in the war
    file. To customize this, you will need to unzip the war file, and locate
    the components.xml file which is in the WEB-INF directory.</para>

    <para>The JAAS standard is used as the underlying authentication and
    authorization mechanism, the upshot of which means its very flexable and
    able to integrate into most existing environments.</para>

    <para>Out of the box, Guvnor shows a login screen, but no security
    credentials are enforced - the user name is used, but no password check is
    performed. To enforce authentication, you need to configure it to use an
    appropriate user directory (you may have Active Directory or similar
    already).</para>

    <para>In the components.xml file, you should located a security
    configuration section like the following:</para>

    <programlisting language="xml">&lt;!-- SECURITY CONFIGURATION --&gt;
    
&lt;!-- default (will take any username, useful if you want to keep track of users but not authenticate --&gt;
&lt;security:identity authenticate-method="#{defaultAuthenticator.authenticate}"/&gt;

&lt;!-- NO authentication. This will bypass the login screen when you hit the app. Everyone is "guest" --&gt;
&lt;!-- &lt;security:identity authenticate-method="#{nilAuthenticator.authenticate}"/&gt; --&gt;   </programlisting>

    <para>As you can see from above, the 2 "out of the box" options are pass
    through - which means any user is allowed in, or bypassed, in which case
    there is no login screen (eg you may be securing access to the app via a
    web server anyway).</para>

    <section>
      <title>Using your containers security and LDAP</title>

      <para>Every application server supports advanced configurations which
      can work with your existing security infrastructure. The case of JBoss
      AS will be shown here as an example.</para>

      <programlisting language="xml">&lt;security:identity authenticate-method="#{authenticator.authenticate}"
                      jaas-config-name="other"/&gt;</programlisting>

      <para>This will use the "other" jaas config in JBoss AS. If you look in
      [jboss install dir]/server/default/conf you will see a login-config.xml
      file. This file contains various configs. If you use "other" like the
      one above, then it will look for users.properties and roles.properties
      in the conf directory for usernames and passwords to authenticate
      against (this is fine for a fixed small number of users).</para>

      <para>LDAP is perhaps the most popular choice for larger enterprises, so
      following is an example that works with Active Directory. You can get
      much more information on how to configure JBoss AS for all scenarios
      with LDAP from http://wiki.jboss.org/wiki/Wiki.jsp?page=LdapLoginModule
      and http://wiki.jboss.org/wiki/Wiki.jsp?page=LdapExtLoginModule.</para>

      <programlisting language="xml">&lt;application-policy name="brms"&gt;
    &lt;authentication&gt;
        &lt;login-module code="org.jboss.security.auth.spi.LdapExtLoginModule" flag="required" &gt;
            &lt;!--
                Some AD configurations may require searching against
                the Global Catalog on port 3268 instead of the usual
                port 389.  This is most likely when the AD forest
                includes multiple domains.
            --&gt;
            &lt;module-option name="java.naming.provider.url"&gt;ldap://ldap.jboss.org:389&lt;/module-option&gt;
            &lt;module-option name="bindDN"&gt;JBOSS\someadmin&lt;/module-option&gt;
            &lt;module-option name="bindCredential"&gt;password&lt;/module-option&gt;
            &lt;module-option name="baseCtxDN"&gt;cn=Users,dc=jboss,dc=org&lt;/module-option&gt;
            &lt;module-option name="baseFilter"&gt;(sAMAccountName={0})&lt;/module-option&gt;

            &lt;module-option name="rolesCtxDN"&gt;cn=Users,dc=jboss,dc=org&lt;/module-option&gt;
            &lt;module-option name="roleFilter"&gt;(sAMAccountName={0})&lt;/module-option&gt;
            &lt;module-option name="roleAttributeID"&gt;memberOf&lt;/module-option&gt;
            &lt;module-option name="roleAttributeIsDN"&gt;true&lt;/module-option&gt;
            &lt;module-option name="roleNameAttributeID"&gt;cn&lt;/module-option&gt;

            &lt;module-option name="roleRecursion"&gt;-1&lt;/module-option&gt;
            &lt;module-option name="searchScope"&gt;ONELEVEL_SCOPE&lt;/module-option&gt;
        &lt;/login-module&gt;
    &lt;/authentication&gt;
&lt;/application-policy&gt;</programlisting>

      <para>To use the above, you would put jaas-config-name="brms" in the
      security:identity tag in the components.xml for Guvnor.</para>

      <para>Similar configuration examples can be found for other directory
      services.</para>

      <para>LDAP isn't the final word, you can use JDBC against a database of
      user name, or you can write your own login module to use any sort of
      weird and wonderful authentication and authorization systems that you
      may have to deal with (that would be an extreme case, but its possible).
      Refer to JBoss AS documentation (or documentation for your existing
      application server).</para>
    </section>
  </section>

  <section>
    <title>Fine grained permissions and security</title>

    <para>The above section talks about establishing identity and access for
    users. This section talks about granting specific permissions to these
    users (to control data visibility and access). This can be used to
    partition data, or to control access for "non power users" which can limit
    the damage they can do.</para>

    <figure>
      <title>Administer user permissions</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminPermissions.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A common need and desire of the web interface of Guvnor is to be
    able to have users of different technical abilities interact with it.
    Another need is to be able to allocate people different sets of data to
    "own".</para>

    <para>Typically users identities are managed in a centralised directory -
    application servers can integrate with these directories (eg active
    directory, LDAP) so users to guvnor can be authenticated without having to
    create another duplicate identity. It is also possible (thanks to JAAS) to
    define what users have the "admin" role for Guvnor (note that an Admin
    user of Guvnor doesn't have to really be a system administrator). Further
    to this, guvnor augments this identity with data specific permissions,
    which are managed in Guvnor itself.</para>

    <figure>
      <title>User listing</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminPermissionsList.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Note that the above users identities are not stored in Guvnor, only
    their permission mappings are which are specific to Guvnor.</para>

    <para>There are really 2 system wide roles: Users who are Administrators
    and users who are not. Easy ! Administrators can see and do anything. Out
    of the box, the permission system is turned off, and every user is an
    administrator (this is pretty much how things used to work). There is also
    a system setting in components.xml that can turn the permissions system on
    and off (so people can manually override if needs be). A administrator can
    also give other users admin rights, regardless of their roles in the
    external directory service.</para>

    <figure>
      <title>Editing</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminPermissionEdit.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>There are several types of permissions: Per package: Package
    Administrator ("owns" a package - can deploy etc, but has no
    administrative rights to the system). Package developer - this permissions
    allows users to create new items, edit etc - but only at the package level
    (not deploy). They can also run and create tests. Package readonly - well
    this one is pretty obvious. Per Category: This is the "interesting" one -
    as assets (rules) can be tagged with multiple categories, you can use
    these to assign permissions to an "analyst" type of user. A user can be
    assigned multiple categories. A user can then edit and view any asset that
    is tagged in that category (regardless of package). A user that only has
    category permissions will not be shown any package views or details, and
    will only see the simple categories view. This allows administrators and
    managers to control exactly what these users can and can't see. Note that
    per category permissions can also be set as "read only" so a user can view
    all the assets in a category, but not make changes to them.</para>

    <figure>
      <title>The analyst view</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminAnalyst.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The per category "analyst" permissions are quite useful - you can
    also augment their permissions with a specific package (so on top of their
    category rights, they can see and play with a particular package - which
    may be used as a "practice" area, or test area for instance). This
    provides a few ways to manage permissions in a coarse or fine grained way,
    as suits the different types of users.</para>

    <section>
      <title>Enabling fine grained authorization</title>

      <para>By default authorization is not enabled. To enable it, edit the
      components.xml file in the WEB-INF directory:</para>

      <programlisting language="xml">&lt;security:role-based-permission-resolver enable-role-based-authorization="true"/&gt;	  
</programlisting>
    </section>
  </section>

  <section>
    <title>Data management</title>

    <section>
      <title>Backups</title>

      <para>How backups are performed is dependent on what persistence manager
      scheme you are using. Using the default one - then its a matter of
      backing up the repository directory (wherever you have it configured to
      be). Restoring it is simply a matter of copying across the repository
      directory.</para>

      <para>Ideally you will either stop Guvnor application while a file
      backup is being done, or ensure that no one is using it.</para>

      <para>In the case of using an external database (eg Oracle, MySQL), then
      the normal scheme can apply that you would use to backup those database
      (you do back them up, right?). In this case, when restoring, it is also
      a good idea to clear the indexes (delete the directory where the indexes
      are) so they are created fresh from the data (and thus guaranteed to be
      in sync).</para>
    </section>

    <section>
      <title>Asset list customization</title>

      <para>In a few places in Guvnor there is an asset list: this list can be
      customized by looking for the AssetListTable.properties file. You can
      then set the header names and the "getter" methods that are used to
      populate the columns. eg you could add in getCreator, or
      getExternalSource as extra fields if you were using them.</para>
    </section>

    <section>
      <title>Selectors for package building</title>
      
      <para>When building packages (from the "Packages" feature) you have the
      option to use a "selector". This selector will filter the list of rules 
      that are built into the package. </para>
      
      <para>Guvnor provides several built-in selectors which allow you to choose 
      what assets form part of a package build according to asset's status 
      and category.</para>
      
      <para>You can use a custom selector if the built-in selector does not 
      satisfy your requirement. To configure a custom selector, you will need to 
      "explode" the war file for Guvnor, and locate the selectors.properties 
      file (note you can also put your own selectors.properties file in the system 
      classpath if you like). In this file, you will find details on how you 
      can configure a custom selector. The options are to use a drl file, or 
      the name of a class that you have written (and which is available on 
      the classpath). Classes must implement the AssetSelector interface. DRL 
      files can also be used (there is an example one in the selectors.properties 
      file). Each selector you configure has a unique name in this properties 
      file - and this is the name that you can use when building packages.</para>
    </section>

    <section>
      <title>Adding your own logos or styles to Guvnor web GUI</title>

      <para>To achieve, this, you can "explode" the deployment war file, and
      locate the Guvnor.html file, which will look something like the
      following: .</para>

      <programlisting language="xml">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;!-- Note you can append #asset=UUID to the end of the URL to preload a given asset.
         Also, if you appent #asset=UUID&amp;nochrome it will only show the asset without all the GUI "chrome"

         To select a locale, specify &amp;locale=en_US at the end of the URL to pick the appropriate bundle.
         --&gt;
      &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
      &lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" /&gt;
      &lt;title&gt;JBoss Guvnor&lt;/title&gt;

      ..........

   &lt;/body&gt;
&lt;/html&gt;</programlisting>

      <para>Note that the above Guvnor.html file is fairly small (as most of
      the work is done by the GWT - the GUI is built dynamically in the
      browser). The parts you can customise are the style sheet - you can
      either edit the Guvnor.css (or better yet, take a copy, and change the
      style to be what you need), the "shortcut icon" (its what shows in the
      address bar in the browser etc - also change the "icon" link to be the
      same so it works in IE), and the header logo. The rest should be left as
      is, to allow the GWT components to be loaded and attached to the page.
      This html page is loaded only once by the browser when the user accesses
      Guvnor web GUI.</para>

      <para>The best way to customize is to take a copy of the Guvnor.html -
      and then edit. You can also change the URL by editing the web.xml via
      the normal means.</para>
    </section>

    <section>
      <title>Import and Export</title>

      <para>A JCR standard export/import feature is available from the Admin
      part of the web interface.</para>

      <para>This will export the entire repository to an XML format as defined
      by the JCR standard.</para>

      <para>In the case of import, it will clear any existing content in the
      database.</para>

      <para>This is NOT a substitute for backup but can be useful when
      migrating. It is important to note that version history is not exported
      this way, only the current state. Hence it is still recommended that a
      formal backup regime be used at all times on the repository database
      itself.</para>

      <para>
	Note that when importing repositories with many thousands of items, extra memory will be required (just for the import). 
      </para>
    </section>
  </section>
</section>
