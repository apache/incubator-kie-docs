<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <title>Solver configuration</title>

  <section>
    <title>Types of solvers</title>

    <para>Different solvers solve problems in different ways. Each type has advantages and disadvantages. We 'll roughly
    discuss a few of the solver types here. You can safely skip this section.</para>

    <section>
      <title>Brute force</title>

      <para>Brute force creates and evaluates every possible solution, usually by creating a search tree.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It finds an optimal solution. If there is more then 1 optimal solution, it finds all optimal
          solutions.</para>
        </listitem>

        <listitem>
          <para>It is straightforward and simple to implement.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It has a horrible performance and scalability. Mostly unusable for a real-world problem due to time
          constraints.</para>
        </listitem>
      </itemizedlist>

      <para>Brute force is currently not implemented in drools-solver. But we have plans to implement it in the future,
      as a reference for validating the output of the other solver types.</para>
    </section>

    <section>
      <title>Branch and bound</title>

      <para>Branch and bound is an improvement over brute force, as it prunes away subsets of solutions which cannot
      have a better solution than the best solution already found at that point.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It finds an optimal solution. If there is more then 1 optimal solution, it can find all optimal
          solutions if needed.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It still scales very badly.</para>
        </listitem>
      </itemizedlist>

      <para>Branch and bound is currently not implemented in drools-solver.</para>
    </section>

    <section>
      <title>Simplex</title>

      <para>Simplex turns all constraints and data into a big equation, which it transmutes into a mathematical function
      without local optima. It then finds an optimal solution to the planning problem by finding an optima of that
      mathematical function.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It finds an optimal solution.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It's usually rather complex and mathematical to implement constraints.</para>
        </listitem>
      </itemizedlist>

      <para>Drools-solver does not currently implement simplex.</para>
    </section>

    <section>
      <title>Local search (tabu search, simulated annealing, ...)</title>

      <para>Local search starts from an initial solution and evolves that single solution into a better and better
      solution. It uses a single search path of solutions. At each solution in this path it evaluates a number of
      possible moves on the solution and applies the most suitable move to take the step to the next solution.</para>

      <para>Local search works a lot like a human planner: it uses a single search path and moves facts around to find a
      good feasible solution.</para>

      <para>A simple local search can easily get stuck in a local optima, but improvements (such as tabu search and
      simulated annealing) address this problem.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It's relatively simple and natural to implement constraints (at least in drools-solver's
          implementation).</para>
        </listitem>

        <listitem>
          <para>It's very scalable, even when adding extra constraints (at least in drools-solver's
          implementation).</para>
        </listitem>

        <listitem>
          <para>It generally needs to worry about less negative hard constraints, because the move pattern can fulfill a
          number of the negative hard constraints.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It does not know when it has found an optimal solution.</para>
        </listitem>

        <listitem>
          <para>If the optimal score is unknown (which is usually the case), it must be told when to stop looking (for
          example based on time spend, user input, ...).</para>
        </listitem>
      </itemizedlist>

      <para>Drools-solver implements local search, including tabu search and simulated annealing.</para>
    </section>
  </section>

  <section>
    <title>The Solver interface</title>

    <para>Every build-in solver implemented in drools-solver implements the <literal>Solver</literal> interface:</para>

    <programlisting>public interface Solver {

    void setStartingSolution(Solution solution);

    Score getBestScore();
    Solution getBestSolution();
    
    void solve();

    // ...

}</programlisting>

    <para>Solving a planning problem with drools-solver consists out of 4 steps:</para>

    <orderedlist>
      <listitem>
        <para>Build a solver, for example a tabu search solver for any NQueens puzzle.</para>
      </listitem>

      <listitem>
        <para>Set a starting solution on the solver, for example a 4 Queens puzzle instance.</para>
      </listitem>

      <listitem>
        <para>Solve it.</para>
      </listitem>

      <listitem>
        <para>Get the best solution found by the solver.</para>
      </listitem>
    </orderedlist>

    <para>A <literal>Solver</literal> should currently directly be accessed from a single thread. Support from accessing
    it from a different thread, for example to finish solving early or to change the problem facts in real-time, will be
    added in future releases.</para>
  </section>

  <section>
    <title>Building a solver</title>

    <para>You can build a <literal>Solver</literal> instance with the <literal>XmlSolverConfigurer</literal>. Configure
    it with a solver configuration xml file:</para>

    <programlisting>    XmlSolverConfigurer configurer = new XmlSolverConfigurer();
    configurer.configure("/org/drools/solver/examples/nqueens/solver/nqueensSolverConfig.xml");
    Solver solver = configurer.buildSolver();</programlisting>

    <para>A basic solver configuration file looks something like this:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;localSearchSolver&gt;
    &lt;scoreDrl&gt;/org/drools/solver/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;
    &lt;scoreDefinition&gt;
        &lt;scoreDefinitionType&gt;SIMPLE&lt;/scoreDefinitionType&gt;
    &lt;/scoreDefinition&gt;
    &lt;finish&gt;
        &lt;feasableScore&gt;0&lt;/feasableScore&gt;
    &lt;/finish&gt;
    &lt;selector&gt;
        &lt;moveFactoryClass&gt;org.drools.solver.examples.nqueens.solver.NQueensMoveFactory&lt;/moveFactoryClass&gt;
    &lt;/selector&gt;
    &lt;accepter&gt;
        &lt;completeSolutionTabuSize&gt;1000&lt;/completeSolutionTabuSize&gt;
    &lt;/accepter&gt;
    &lt;forager&gt;
        &lt;foragerType&gt;MAX_SCORE_OF_ALL&lt;/foragerType&gt;
    &lt;/forager&gt;
&lt;/localSearchSolver&gt;</programlisting>

    <para>This is a tabu search configuration for n queens. We 'll explain the various parts of a configuration later in
    this manual.</para>

    <para><emphasis role="bold">Drools-solver makes it relatively easy to switch a solver type just by changing the
    configuration.</emphasis> There's even a benchmark utility which allows you to play out different configurations
    against each other and report the most appropriate configuration for your problem. You could for example play out
    tabu search versus simulated annealing, on 4 queens and 64 queens.</para>

    <para>A solver has a single <literal>Random</literal> instance. Some solver configurations use that instance a lot
    more than others. For example simulated annealing depends highly on random numbers, while tabu search only depends
    on it to deal with score ties. In any case, during your testing it's advisable to set that <literal>Random</literal>
    instance, so your tests are reproducible.</para>
  </section>

  <section>
    <title>The Solution interface</title>

    <para>A Solver can only solve 1 problem at a time.</para>

    <para>You need to present the problem as a starting <literal>Solution</literal> instance to the solver.</para>

    <para>You need to implement the <literal>Solution</literal> interface:</para>

    <programlisting>public interface Solution {

    Collection&lt;? extends Object&gt; getFacts();

    Solution cloneSolution();

}</programlisting>

    <para>For example, an NQueens instance just holds a list of all it's queens:</para>

    <programlisting>public class NQueens implements Solution {

    private List&lt;Queen&gt; queenList;

    // ...

}</programlisting>

    <section>
      <title>The getFacts method</title>

      <para>All Objects returned by the <literal>getFacts()</literal> method will be asserted into the drools working
      memory. Those facts can be used by the score rules. For example, <literal>NQueens</literal> just returns all
      <literal>Queen</literal> instances.</para>

      <programlisting>    public Collection&lt;? extends Object&gt; getFacts() {
        return queenList;
    }</programlisting>
    </section>

    <section>
      <title>The cloneSolution method</title>

      <para>Most solvers use the <literal>cloneSolution()</literal> method to clone the solution each time they
      encounter a new best solution. The <literal>NQueens</literal> implementation just clones all
      <literal>Queen</literal> instances:</para>

      <programlisting>    public NQueens cloneSolution() {
        NQueens clone = new NQueens();
        List&lt;Queen&gt; clonedQueenList = new ArrayList&lt;Queen&gt;(queenList.size());
        for (Queen queen : queenList) {
            clonedQueenList.add(queen.clone());
        }
        clone.queenList = clonedQueenList;
        return clone;
    }</programlisting>

      <para>The <literal>cloneSolution()</literal> method should clone no more and no less than the parts of the
      <literal>Solution</literal> that can change during solving. For example, in the lesson schedule example the
      lessons are cloned, but teachers, groups and timeslots are not cloned because only a lesson's appointed timeslot
      changes during solving:</para>

      <programlisting>    /**
     * Clone will only deep copy the lessons
     */
    public LessonSchedule cloneSolution() {
        LessonSchedule clone = new LessonSchedule();
        clone.timeslotList = timeslotList; // No Deep copy
        clone.teacherList = teacherList; // No Deep copy
        clone.groupList = groupList; // No Deep copy
        List&lt;Lesson&gt; clonedLessonList = new ArrayList&lt;Lesson&gt;(lessonList.size());
        for (Lesson lesson : lessonList) {
            clonedLessonList.add(lesson.clone());
        }
        clone.lessonList = clonedLessonList;
        return clone;
    }</programlisting>
    </section>
  </section>

  <section>
    <title>The starting solution</title>

    <para>First, you will need to make a starting solution and set that on the solver:</para>

    <programlisting>solver.setStartingSolution(startingSolution);</programlisting>
  </section>

  <section>
    <title>A simple filler algorithm</title>

    <para>For 4 queens we use a simple filler algorithm that creates a starting solution with all queens on a different
    x and on the same y (with y = 0).</para>

    <figure>
      <title>Starting solution for the 4 queens puzzle</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Solver/unsolvedNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Here's how we generate it:</para>

    <programlisting>    private NQueens createNQueens(int n) {
        NQueens nQueens = new NQueens();
        nQueens.setId(0L);
        List&lt;Queen&gt; queenList = new ArrayList&lt;Queen&gt;(n);
        for (int i = 0; i &lt; n; i++) {
            Queen queen = new Queen();
            queen.setId((long) i);
            queen.setX(i); // Different column
            queen.setY(0); // Same row
            queenList.add(queen);
        }
        nQueens.setQueenList(queenList);
        return nQueens;
    }</programlisting>

    <para>The starting solution will probably be far from optimal (or even feasible). Here, it's actually the worst
    possible solution. However, we 'll let the solver find a much better solution for us anyway.</para>

    <section>
      <title>StartingSolutionInitializer</title>

      <para>For large problems, a simple filler algorithm like <literal>createNQueens(int)</literal> doesn't suffice. A
      (local search) solver starting from a bad starting solution wastes a lot of time to reach a solution which an
      initializer algorithm can generate in a fraction of that time.</para>

      <para>An initializer algorithm ussually works something like this:</para>

      <itemizedlist>
        <listitem>
          <para>It sorts the unplanned elements in a queue according to some general rules, for example by exam student
          size.</para>
        </listitem>

        <listitem>
          <para>Next, it plans them in the order they come from the queue. Each element is put the best, still available
          spot.</para>
        </listitem>

        <listitem>
          <para>It doesn't change an already planned element. It exits when the queue is empty and all elements are
          planned.</para>
        </listitem>
      </itemizedlist>

      <para>Such an algorithm is very deterministic: it's really fast, but you can't give it more time to generate an
      even better solution. In some cases the solution it generates will be feasible, but in most cases it won't. You
      'll need a real solver to get to a feasible or more optimal solution. Nevertheless you 'll want to such an
      initializer to give the real solver a serious head start. You can do this by implementing the
      <literal>StartingSolutionInitializer</literal> interface:</para>

      <programlisting>public interface StartingSolutionInitializer extends SolverAware {

    boolean isSolutionInitialized(Solution solution);

    void initializeSolution(Solution solution);

}</programlisting>

      <para>You'll need to set a (uninitialized) solution on the solver. Once the solver starts, it will first call the
      <literal>StartingSolutionInitializer</literal> to initialize the solution. If the
      <literal>StartingSolutionInitializer</literal> adds, edits or removes facts it needs to notify the workingMemory
      about this. It can use score calculation during its intialization process.</para>

      <para>Here's an example on how you add the <literal>StartingSolutionInitializer</literal> to the
      configuration:</para>

      <programlisting>&lt;localSearchSolver&gt;
    ...
    &lt;startingSolutionInitializerClass&gt;org.drools.solver.examples.itc2007.examination.solver.solution.initializer.ExaminationStartingSolutionInitializer&lt;/startingSolutionInitializerClass&gt;
    ...
&lt;/localSearchSolver&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Solving a problem</title>

    <para>Solving a problem is quite easy once you have a solver and the starting solution:</para>

    <programlisting>    solver.setStartingSolution(startingSolution);
    solver.solve();
    Solution bestSolution = solver.getBestSolution();</programlisting>

    <para>The <literal>solve()</literal> method will take a long time (depending on the problem size and the solver
    configuration). The solver will remember (actually clone) the best solution it encounters during its solving.
    Depending on a number factors (including problem size, how long you allow the solver to work, which solver type you
    use, ...), that best solution will be a feasible or even an optimal solution.</para>

    <figure>
      <title>Best solution for the 4 queens puzzle (also an optimal solution)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Solver/solvedNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>After a problem is solved, you can reuse the same solver instance to solve another problem (of the same
    problem type).</para>
  </section>
</section>
