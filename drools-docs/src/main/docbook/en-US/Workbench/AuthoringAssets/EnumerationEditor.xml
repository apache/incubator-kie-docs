<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="drools.EnumerationEditor"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
  xml:base="../../" xmlns="http://docbook.org/ns/docbook"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:ns="http://docbook.org/ns/docbook">
  <title>Data enumerations (drop down list configurations)</title>

  <para>Data enumerations are an optional asset type that technical folk can
  configure to provide drop down lists for the guided editor. These are stored
  and edited just like any other asset, and apply to the package that they
  belong to.</para>

  <para>The contents of an enum config are a mapping of <code>Fact.field</code> to a list
  of values to be used in a drop down. The strings are either a value to be shown in a drop down, or a mapping from
  the code value (what ends up used in the rule) and a display value.</para>

  <figure>
    <title>Data enumeration</title>
    
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/Workbench/AuthoringAssets/EnumConfig.png"
          format="PNG"/>
      </imageobject>
    </mediaobject>
  </figure>
  
<para>If you wish to use a mapping between value used in the rule and the value shown in the UI you
    need to separate the code value and display value with an equals sign. For
    example:<programlisting>'Person.gender' : ['M=Male','F=Female']</programlisting>In this example
      <code>F</code> will be used in the rules but <code>Female</code> shown in the UI.</para>

  <para>Drop down lists can also depend on other field values.</para>
  <para>Lets imagine a simple fact model, we have a class called Vehicle, which has 2 fields:
    <code>engineType</code> and <code>fuelType</code>. We want to have a choice for the <code>engineType</code>
    of "Petrol" or "Diesel". Now, obviously the choice type for fuel must be
    dependent on the engine type (so for Petrol we have ULP and PULP, and for
    Diesel we have BIO and NORMAL). We can express this dependency in an
    enumeration as:</para>  
  
  <figure>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/Workbench/AuthoringAssets/EnumVehicleEngine.png"
          format="PNG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>This shows how it is possible to make the choices dependent on other
    field values. Note that once you pick the engineType, the choice list for
    the fuelType will be determined.</para>
  
  <section xml:id="drools.AdvancedEnumConcepts">
    <title>Advanced enumeration concepts</title>

    <para>There are a few other advanced things you can do with data enumerations.</para>

    <section xml:id="drools.AdvanceEnumConcepts.external">
      <title>External data-sources</title>
      <para>Instead of defining a static list you can retrieve the list from an external data-source
        by using a helper class.</para>
      <para>The helper class must be on the Project's classpath; by adding a JAR containng the class
        as a project dependency. The helper class must be instantiable and have a non-static method
        that returns a <code>java.util.List</code>. Population of the list is implementation
        specific.</para>
      <para>For
        example:<programlisting>'Person.age' : (new org.yourco.DataHelper()).getListOfAges()</programlisting></para>

      <para>In some other cases you may want to load the enumeration data entirely from an external
        data source (such as a relational database). To do this, you can implement a class that
        returns a <code>Map&lt;String, List&lt;String&gt;&gt;</code>. The key of the map is the <code>Fact.field</code> 
        and the value is a <code>java.util.List&lt;String&gt;</code> of values to be used.</para>

      <programlisting language="Java">public class SampleDataSource2 {

  public Map&lt;String&gt;, List&lt;String&gt; loadData() {
    Map data = new HashMap();

    List d = new ArrayList();
    d.add("value1");
    d.add("value2");
    data.put("Fact.field", d);

    return data;
  }

}</programlisting>

      <para>The enumeration definition would simply be as follows (with no reference to fact or
        field names):</para>

      <programlisting language="Java">=(new SampleDataSource2()).loadData()</programlisting>

      <para>The <code>=</code> operator informs the workbench to load all enumeration data from the
        helper class.</para>

      <note>
        <para>The helper methods will be statically evaluated when the
          enumeration definition is requested for use in an editor.</para>
      </note>
      
    </section>

    <section xml:id="drools.AdvanceEnumConcepts.dynamic">
      <title>Dynamic lookup</title>

      <para>All of the above cases retrieve the list of values by statically evaluating the
        enumeration definition when enumerations are required by an editor.</para><para>It is also possible to load
        dependent enumeration definitions dynamically from a helper class by enclosing the call to
        the helper class within quotation marks. For
        example:<programlisting>'Country.region[countryCode]' : '(new org.yourco.DataHelper()).getListOfRegions("@{countryCode}")'</programlisting></para>
     
    </section>

  </section>

</section>
