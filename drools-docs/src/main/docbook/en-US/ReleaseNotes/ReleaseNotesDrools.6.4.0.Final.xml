<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" 
  xml:base="../../" 
  xml:id="drools.ReleaseNotesDrools.6.3.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd" 
  xmlns="http://docbook.org/ns/docbook" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:xi="http://www.w3.org/2001/XInclude" 
  xmlns:ns="http://docbook.org/ns/docbook">

  <title>What is New and Noteworthy in Drools 6.4.0</title>

  <section>
    <title>OOPath improvements</title>

    <warning>
      <para>This feature is experimental</para>
    </warning>

    <para>OOPath has been introduced with Drools 6.3.0. In Drools 6.4.0 it has been enhanced
      to support the following features:
    </para>

    <itemizedlist>
      <listitem>
        <para>A constraint can also have a beckreference to an object of the graph traversed before the
          currently iterated one. For example the following OOPath:</para>

        <programlisting>Student( $grade: /plan/exams/grades{ result > ../averageResult } )</programlisting>

        <para>will match only the grades having a result above the average for the passed exam.</para>
      </listitem>

      <listitem>
        <para>A constraint can also recursively be another OOPath as it follows:</para>

        <programlisting>Student( $exam: /plan/exams{ /grades{ result > 20 } } )</programlisting>
      </listitem>

      <listitem>
        <para>It is also possible to use the <literal>?/</literal> separator instead of
          the <literal>/</literal> one. As in the following example:</para>

        <programlisting>Student( $grade: /plan/exams{ course == "Big Data" }?/grades )</programlisting>

        <para>By doing so the engine will react to a change made to an exam, or if an exam is added to the plan,
          but not if a new grade is added to an existing exam. Of course if a OOPath chunk is not reactive,
          all remaining part of the OOPath from there till the end of the expression will be non-reactive as well.
          For instance the following OOPath</para>

        <programlisting>Student( $grade: ?/plan/exams{ course == "Big Data" }/grades )</programlisting>

        <para>will be completely non-reactive. For this reason it is not allowed to use the
          <literal>?/</literal> separator more than once in the same OOPath so an expression like:</para>

        <programlisting>Student( $grade: /plan?/exams{ course == "Big Data" }?/grades )</programlisting>

        <para>will cause a compile time error.</para>
      </listitem>
    </itemizedlist>
  </section>
</section>



