<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" 
  xml:base="../../" 
  xml:id="drools.ReleaseNotesDrools.6.5.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd" 
  xmlns="http://docbook.org/ns/docbook" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:xi="http://www.w3.org/2001/XInclude" 
  xmlns:ns="http://docbook.org/ns/docbook">

  <title>What is New and Noteworthy in Drools 6.5.0</title>

  <section>
    <title>Configurable ThreadFactory</title>

    <para>Some runtime environments (like for example Google App Engine) don't allow to
    directly create new Threads. For this reason it is now possible to plug your own
    ThreadFactory implementation by setting the system property
    <emphasis role="bold">drools.threadFactory</emphasis> with its class name.
    For instance if you implemented your Google App Engine compatible ThreadFactory
    with the class <literal>com.user.project.GoogleAppEngineThreadFactory</literal> you can
    make Drools to use it by setting:</para>

    <programlisting>drools.threadFactory = com.user.project.GoogleAppEngineThreadFactory</programlisting>
  </section>

  <title>What is New and Noteworthy in Drools 6.5.0</title>

  <section>
    <title>Configurable ThreadFactory</title>

    <para>Some runtime environments (like for example Google App Engine) don't allow to
      directly create new Threads. For this reason it is now possible to plug your own
      ThreadFactory implementation by setting the system property
      <emphasis role="bold">drools.threadFactory</emphasis> with its class name.
      For instance if you implemented your Google App Engine compatible ThreadFactory
      with the class <literal>com.user.project.GoogleAppEngineThreadFactory</literal> you can
      make Drools to use it by setting:</para>

    <programlisting>drools.threadFactory = com.user.project.GoogleAppEngineThreadFactory</programlisting>
  </section>

  <section>
    <title>Use of any expressions as input for a query</title>

    <para>It is now possible to use as input argument for a query both the field of a fact as in:</para>

    <programlisting>query contains(String $s, String $c)
    $s := String( this.contains( $c ) )
end

rule PersonNamesWithA when
    $p : Person()
    contains( $p.name, "a"; )
then
end</programlisting>

    <para>and more in general any kind of valid expression like in:</para>

    <programlisting>query checkLength(String $s, int $l)
    $s := String( length == $l )
end

rule CheckPersonNameLength when
    $i : Integer()
    $p : Person()
    checkLength( $p.name, 1 + $i + $p.age; )
then
end</programlisting>
  </section>
  
  <section>
    <title>Monitoring framework improvements</title>

    <para>A new type of MBean has been introduced in order to provide monitoring of the KieContainers,
    and the JMX MBeans hierarchical structure have been revisited to reflect the relationship 
    with the related MBeans of the KieBases. The JMX objectnaming has been normalized to reflect the
    terminology used in the Kie API.A new type of MBean has been introduced in order to provide
    monitoring for Stateless KieSession, which was not available in previous releases.</para>
    
    <table>
      <title>JMX objectname changes</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">MBean</entry>
            <entry align="center">before <code>6.5.x</code></entry>
            <entry align="center">from <code>6.5.0.Final</code></entry>
          </row>
        </thead>
        
        <tbody>
          <row>
            <entry>KieContainer</entry>
            <entry>n/a</entry>
            <entry><code>org.kie:kcontainerId={kcontainerId}</code></entry>
          </row>
          
          <row>
            <entry>KieBase</entry>
            <entry><code>org.drools.kbases:type={kbaseId}</code></entry>
            <entry><code>org.kie:kcontainerId={kcontainerId},kbaseId={kbaseId}</code></entry>
          </row>
          
          <row>
            <entry>KieSession (stateful)</entry>
            <entry><code>org.drools.kbases:type={kbaseId},group=Sessions,sessionId={ksessionId}</code></entry>
            <entry><code>org.kie:kcontainerId={kcontainerId},kbaseId={kbaseId},ksessionType=Stateful,ksessionName={ksessionName}</code></entry>
          </row>
          
          <row>
            <entry>Stateless KieSession</entry>
            <entry>n/a</entry>
            <entry><code>org.kie:kcontainerId={kcontainerId},kbaseId={kbaseId},ksessionType=Stateless,ksessionName={ksessionName}</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
     <para>The KieSession MBeans consolidate the statistics data for all sessions instantiated under the same name.</para>
          
     <para>The new JMX objectnaming scheme now enforces proper JMX quoting for IDs, e.g.: 
     <code>org.kie:kcontainerId="2cb55f40-f220-432a-aba8-7940c18bf108",kbaseId="KBase1"</code></para>
     
     <para>The old DroolsManagementAgent (which was registered on JMX under <code>org.drools:type=DroolsManagementAgent</code>) is no longer
     necessary, hence no longer registered on JMX.</para>
     
     <para>The KieSession MBeans now have proper JMX <code>CompositeData</code> and <code>TabularData</code> support, where applicable.
     The KieSession MBeans continue to support all process-related aggregated statistics monitoring, but no longer display start/end dates
     for each process instances: auditing and logging support is available in jBPM for this scope.</para>
     
     <para>The Drools RHQ/JON plug-in have been changed to reflect all the above mentioned changes, in addition to specific bug-fixing
     aiming to display hierarchical nesting correctly.</para>
  </section>
</section>



