<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns:xi="http://www.w3.org/2001/XInclude"
                    xmlns:svg="http://www.w3.org/2000/svg"
                    xmlns:m="http://www.w3.org/1998/Math/MathML"
                    xmlns:html="http://www.w3.org/1999/xhtml"
                    xmlns:db="http://docbook.org/ns/docbook" xml:base="./">

  <title>Business Activity Monitoring</title>

  <para>You need to actively monitor your processes to make sure you can detect any anomalies and react to unexpected events
  as soon as possible.  Business Activity Monitoring (BAM) is related to the real-time monitoring your processes and the
  possibility to intervene directly (possibly even automatically), based on the analysis of these events.</para>

  <para>Drools Flow allows users to define reports based on the events generated by the process engine, and possibly direct
  intervention in specific situations using Complex Event Processing rules (Drools Fusion), as described in the next two
  sections.  Support for the entire Business Activity Monitoring requirements (including a web-based application that can
  be used to more easily interact with a running process engine, inspect its state, generate reports, etc.) will be included
  in future releases of the Drools platform.</para>

  <section>
    <title>Reporting</title>

    <para>By adding a history logger to the process engine, all relevent events are stored in the database.  This history
    log can be used to monitor and analyze the execution of your processes.  We are using Eclipse BIRT (Business Intelligence
    Reporting Tool) to create reports that show the key performance indicators.  It's easy to define your own reports yourself,
    using the predefined data sets containing all process history information, and any other data sources you might want to
    add yourself.</para>

    <para>The Eclipse BIRT framework allows you to define data sets, create reports, include charts, preview your reports,
    export them on web pages, etc.  We refer to the Eclipse BIRT documentation on how to define your own reports.  The following
    screen shot shows a sample on how to create such a chart.</para>

    <figure>
      <title>Creating a report using Eclipse BIRT</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/Chapter-BAM/EventingReportEdit.png" format="PNG" role="" />
        </imageobject>      </mediaobject>
    </figure>

    <para>The next figure shows a simple report based on some history data, showing the number of requests every hour, and the
    average completion time of the request in that hour.  These charts could be used to check for an unexpected drop or rise
    of requests, an increase in the average processing time, etc.  These charts could signal possible problems before the
    situation really gets out of hand.</para>

    <figure>
      <title>The eventing report</title>
      <mediaobject>
        <imageobject>	  <imagedata align="center" fileref="images/Chapter-BAM/EventingReport.png" format="PNG" role="" />
        </imageobject>
      </mediaobject>
    </figure>

  </section>

  <section>
    <title>Direct intervention</title>

    <para>Reports can be used to visualize an overview of the current state of your processes, they do however rely on
    a human actor to take action based on the information in these charts.  We do however allow users to define how to 
    respond automatically to specific circumstances.</para>

    <para>Drools Fusion provides numerous features that make it easy to process large sets of events.  This can be used
    to monitor the process engine itself.  This can be achieved by adding a listener to the engine that forwards all
    related process events (whenever a process instance is started / completed or when a specific node is triggered during
    the execution of your process instances) to a session responsible for processing these events (this could be the same
    session as the one executing the processes or it could be an independent session as well).  Complex Event Processing
    (CEP) rules could then be used to specify how to process these events.  For example, these rules could generate higher-
    level business events based on (a specific occurrence of) low-level process events.  The rules could also specify
    how to respond to specific situations.</para>

    <para>The next section shows a sample rule that accumulates all start process events for one specific order process
    over the last hour (using the sliding windows support).  This rule prints out an error message if more than 1000 process
    instances were started in the last hour (e.g. to detect possible overload of the server).  Note that, in a realistic
    setting, this would probably be replaced by sending an email or other form of notification to the responsible instead
    of the simple logging.</para>

    <programlisting>
declare ProcessStartedEvent
    @role( event )
end

dialect "mvel"

rule "Number of process instances above threshold"
  when
    Number( nbProcesses : intValue > 1000 )
      from accumulate(
        e: ProcessStartedEvent( processInstance.processId == "com.sample.order.OrderProcess" )
    	  over window:size(1h),
        count(e) )
  then
    System.err.println(
      "WARNING: Number of order processes in the last hour above 1000: " + nbProcesses );
end</programlisting>

    <para>These rules could even be used to automatically alter the behaviour of a process at runtime based on the
    events generated by the engine.  For example, whenever a specific situation is detected, additional rules could
    be added to the knowledge base to dynamically modify the behaviour of the process.  For example, whenever 
    a large amount of user requests within a specific time frame are detected, additional validation could be added
    to the process (for example automatically add an additional step to the process to have the end user fill in a
    captcha to prevent scripting attacks, but only if the number of requests on the process engine is above a specific
    treshold).  Or additional logging rules could be deployed whenever problems are detected to log additional
    information (and this only when errors are detected, not during normal operation).  These rules could then be
    removed from the knowledge base again, once they are no longer needed.</para>

  </section>

</chapter>
