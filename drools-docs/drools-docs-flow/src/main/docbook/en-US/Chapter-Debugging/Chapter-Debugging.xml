<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

  <title>Debugging processes</title>

  <para>This section describes how to debug processes.  This means
  that the current state of your running processes can be inspected
  and visualized during the execution.  Note that we currently don't
  allow you to put breakpoints on the nodes within a RuleFlow directly.
  You can however put breakpoints inside rules (that could be evaluated
  in the context of a process if you use a ruleset node), or on any
  Java code you might have (i.e. your application code that is invoking
  the engine or invoked by the engine, listeners, etc.).  At these
  breakpoints, you can then inspect the internal state of your processes.
  </para>
  
  <para>A screencast that shows processing debugging in action can be found
  <ulink url="http://downloads.jboss.com/drools/videos/OrderExample.swf">here</ulink></para>

  <para>We use a simple example throughout this section to illustrate
  the debugging capabilities. The example will be introduced first,
  followed by an illustration on how to use the debugging capabilities.
  </para>

  <section>
    <title>A simple example</title>
    <para>Our example contains two processes and some rules (used
    inside the ruleflow groups):</para>
      <orderedlist>
        <listitem>
          <para>The main process contains some of the most common
          nodes: a start and end node (obviously), two ruleflow groups,
          an action (that simply prints a string to the default output),
          a milestone (a wait state that is trigger when a specific
          Event is inserted in the working memory) and a subprocess.</para>

          <mediaobject>
            <imageobject>
	        <imagedata align="center" format="BMP" role="" 
                         fileref="images/Chapter-Debugging/example.png"/>
            </imageobject>
          </mediaobject>

        </listitem>
        <listitem>
          <para>The SubProcess simply contains a milestone that also
          waits for (another) specific Event in the working memory.</para>
        </listitem>
        <listitem>
          <para>There are only two rules (one for each ruleflow group) that
          simply print out either a hello world or goodbye world to default
          output.</para>
        </listitem>
      </orderedlist>

    <para>We will simulate the execution of this process by starting the process,
    firing all rules (resulting in the executing of the hello rule), then adding
    the specific milestone events for both the milestones (in the main process
    and in the subprocess) and finally by firing all rules again (resulting in 
    the executing of the goodbye rule). The console will look something like this:
    </para>

    <programlisting>Hello World
Executing action
Goodbye cruel world</programlisting>

  </section>

  <section>
    <title>Debugging the process</title>
    <para>We now add four breakpoints during the execution of the process (in the
    order in which they will be encountered):</para>
      <orderedlist>
        <listitem>
          <para>At the start of the consequence of the hello rule</para>
        </listitem>
        <listitem>
          <para>Before inserting the triggering event for the milestone in the main process</para>
        </listitem>
        <listitem>
          <para>Before inserting the triggering event for the milestone in the subprocess</para>
        </listitem>
        <listitem>
          <para>At the start of the consequence of the goodbye rule</para>
        </listitem>
      </orderedlist>
    
    <para>When debugging the application, one can use the following debug views to
    track the execution of the process:</para>
      <orderedlist>
        <listitem>
          <para>The working memory view, showing the contents (data) in the working memory.</para>
        </listitem>
        <listitem>
          <para>The agenda view, showing all activations in the agenda.</para>
        </listitem>
        <listitem>
          <para>The global data view, showing the globals.</para>
        </listitem>
        <listitem>
          <para>The default Java Debug views, showing the current line and the
          value of the known variables, and this both for normal Java code as
          for rules.</para>
        </listitem>
        <listitem>
          <para>The process instances view, showing all running processes (and their state).</para>
        </listitem>
        <listitem>
          <para>The audit view, showing the audit log.</para>
        </listitem>
      </orderedlist>

    <section>
      <title>The Process Instances View</title>

      <mediaobject>
        <imageobject>
	    <imagedata align="center" format="BMP" role="" 
                     fileref="images/Chapter-Debugging/process-instances.png"/>
        </imageobject>
      </mediaobject>

      <para>The process instances view shows the currently running process instances.
      The example shows that there is currently one running process (instance),
      currently executing one node (instance), i.e. RuleSet node. When double-clicking
      a process instance, the process instance viewer will graphically show the progress
      of the process instance. At each of the breakpoints, this will look like:</para>
      <orderedlist>
        <listitem>
          <para>At the start of the consequence of the hello rule, only the hello ruleflow
          group is active, waiting on the execution of the hello rule:</para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" format="BMP" role="" 
                         fileref="images/Chapter-Debugging/example-debug-1.png"/>
            </imageobject>
          </mediaobject>
        </listitem>
        <listitem>
          <para>Once that rule has been executed, the action, the milestone and the 
          subprocess will be triggered. The action will be executed immediately,
          triggering the join (which will simply wait until all incomming connections
          have been triggered). The subprocess will wait at the milestone. So, before
          inserting the triggering event for the milestone in the main process, there
          now are two process instances, looking like this:</para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" format="BMP" role="" 
                         fileref="images/Chapter-Debugging/example-debug-2a.png"/>
            </imageobject>
          </mediaobject>
          <mediaobject>
            <imageobject>
              <imagedata align="center" format="BMP" role="" 
                         fileref="images/Chapter-Debugging/example-debug-2b.png"/>
            </imageobject>
          </mediaobject>
        </listitem>
        <listitem>
          <para>When triggering the event for the milestone in the main process, this
          will also trigger the join (which will simply wait until all incomming
          connections have been triggered). So at that point (before inserting the
          triggering event for the milestone in the subprocess), the processes will 
          look like this:</para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" format="BMP" role="" 
                         fileref="images/Chapter-Debugging/example-debug-3a.png"/>
            </imageobject>
          </mediaobject>
          <mediaobject>
            <imageobject>
              <imagedata align="center" format="BMP" role="" 
                         fileref="images/Chapter-Debugging/example-debug-2b.png"/>
            </imageobject>
          </mediaobject>
        </listitem>
        <listitem>
          <para>When triggering the event for the milestone in the subprocess, this
          process instance will be completed and this will also trigger the join,
          which will then continue and trigger the goodbye ruleflow group, as all its
          incomming connections have been triggered. Firing all the rules will trigger
          the breakpoint in the goodbye rule. At that point, the situation looks like
          this:</para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" format="BMP" role="" 
                         fileref="images/Chapter-Debugging/example-debug-4.png"/>
            </imageobject>
          </mediaobject>
        </listitem>
        <listitem>
          <para>After executing the goodbye rule, the main process will also be
          completed and the execution will have reached the end.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>The Audit View</title>
      <para>For those who want to look at the result in the audit view, this
      will look something like this [Note: the object insertion events might
      seem a little out of place, which is caused by the fact that they are
      only logged after (and never before) they are inserted, making it difficult
      to exactly pinpoint their location.]</para>

      <mediaobject>
        <imageobject>
          <imagedata align="center" format="BMP" role="" 
                     fileref="images/Chapter-Debugging/audit.png"/>
        </imageobject>
      </mediaobject>
    </section>

  </section>

</chapter>

