<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Event Semantics</title>

  <para>An <emphasis>event</emphasis> is a fact that present a few
  distinguishing characteristics:</para>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Usually immutables:</emphasis> since, by the
      previously discussed definition, events are a record of a state change
      in the application domain, i.e., a record of something that already
      happened, and the past can not be "changed", events are immutables. This
      constraint is an important requirement for the development of several
      optimizations and for the specification of the event lifecycle. This
      does not mean that the java object representing the object must be
      immutable. Quite the contrary, the engine does not enforce immutability
      of the object model, because one of the most common usecases for rules
      is event data enrichment.</para>

      <tip>
        <para>As a best practice, the application is allowed to populate
        un-populated event attributes (to enrich the event with infered data),
        but already populated attributes should never be changed.</para>
      </tip>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Strong temporal constraints:</emphasis>
      rules involving events usually require the correlation of multiple
      events, specially temporal correlations where events are said to happen
      at some point in time relative to other events.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Managed lifecycle:</emphasis> due to their
      immutable nature and the temporal constraints, events usually will only
      match other events and facts during a limited window of time, making it
      possible for the engine to manage the lifecycle of the events
      automatically. In other words, one an event is inserted into the working
      memory, it is possible for the engine to find out when an event can no
      longer match other facts and automatically retract it, releasing its
      associated resources.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Use of sliding windows:</emphasis> since all
      events have timestamps associated to them, it is possible to define and
      use sliding windows over them, allowing the creation of rules on
      aggregations of values over a period of time. Example: average of an
      event value over 60 minutes.</para>
    </listitem>
  </itemizedlist>

  <para>Drools supports the declaration and usage of events with both
  semantics: <emphasis role="bold">point-in-time</emphasis> events and
  <emphasis role="bold">interval-based</emphasis> events. </para>

  <tip>
    <para>A simplistic way to understand the unitification of the semantics is
    to consider a <emphasis>point-in-time</emphasis> event as an
    <emphasis>interval-based</emphasis> event whose <emphasis>duration is
    zero</emphasis>.</para>
  </tip>
</section>
