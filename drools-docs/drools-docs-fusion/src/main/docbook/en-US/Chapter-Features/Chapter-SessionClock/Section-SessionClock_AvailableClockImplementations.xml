<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Available Clock Implementations</title>

  <para>Drools 5 provides 2 clock implementations out of the box. The default
  real time clock, based on the system clock, and an optional pseudo clock,
  controlled by the application.</para>

  <section>
    <title>Real Time Clock</title>

    <para>By default, Drools uses a real time clock implementation that
    internally uses the system clock to determine the current
    timestamp.</para>

    <para>To explicitly configure the engine to use the real time clock, just
    set the session configuration parameter to real time:</para>

    <programlisting>KnowledgeSessionConfiguration config = KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
config.setOption( ClockTypeOption.get("realtime") );
</programlisting>
  </section>

  <section>
    <title>Pseudo Clock</title>

    <para>Drools also offers out of the box an implementation of a clock that
    is controlled by the application that is called Pseudo Clock. This clock
    is specially useful for unit testing temporal rules since it can be
    controled by the application and so the results become
    deterministic.</para>

    <para>To configure the pseudo session clock, do:</para>

    <programlisting>KnowledgeSessionConfiguration config = KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
config.setOption( ClockTypeOption.get("realtime") );</programlisting>

    <para>As an example of how to control the pseudo session clock:</para>

    <programlisting>KnowledgeSessionConfiguration conf = KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
conf.setOption( ClockTypeOption.get( "pseudo" ) );
StatefulKnowledgeSession session = kbase.newStatefulKnowledgeSession( conf, null );
        
SessionPseudoClock clock = session.getSessionClock();

// then, while inserting facts, advance the clock as necessary:
FactHandle handle1 = session.insert( tick1 );
clock.advanceTime( 10, TimeUnit.SECONDS );
FactHandle handle2 = session.insert( tick2 );
clock.advanceTime( 30, TimeUnit.SECONDS );
FactHandle handle3 = session.insert( tick3 );

</programlisting>
  </section>
</section>
