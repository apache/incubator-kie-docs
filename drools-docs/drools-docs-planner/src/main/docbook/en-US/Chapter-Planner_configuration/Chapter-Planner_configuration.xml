<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Planner configuration</title>

  <section>
    <title>Types of solvers</title>

    <para>Different solvers solve problems in different ways. Each type has advantages and disadvantages. We 'll roughly
    discuss a few of the solver types here. You can safely skip this section.</para>

    <section>
      <title>Brute force</title>

      <para>Brute force creates and evaluates every possible solution, usually by creating a search tree.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It knows when it has found an optimal solution. If there is more then 1 optimal solution, it finds all
          optimal solutions.</para>
        </listitem>

        <listitem>
          <para>It is straightforward and simple to implement.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It performs and scales horribly. Mostly unusable for a real-world problem due to time
          limitations.</para>
        </listitem>
      </itemizedlist>

      <para>Brute force is currently not implemented in Drools Planner. But we have plans to implement it in the future,
      as a reference for validating the output of the other solver types.</para>
    </section>

    <section>
      <title>Branch and bound</title>

      <para>Branch and bound is an improvement over brute force, as it prunes away subsets of solutions which cannot
      have a better solution than the best solution already found at that point.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It knows when it has found an optimal solution. If there is more then 1 optimal solution, it can find
          all optimal solutions if needed.</para>
        </listitem>

        <listitem>
          <para>It can determine the bounds of a problem, which gives an indication of the quality of a solution.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It still scales very badly. Mostly unusable for a real-world problem due to time limitations.</para>
        </listitem>
      </itemizedlist>

      <para>Branch and bound is currently not implemented in Drools Planner. But we have plans to implement it in the
      future, as a reference for validating the output of the other solver types.</para>
    </section>

    <section>
      <title>Simplex</title>

      <para>Simplex is an algorithm to find the numerical solution of a linear programming problem.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It knows when it has found an optimal solution.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It's complex and mathematical to implement constraints.</para>
        </listitem>
      </itemizedlist>

      <para>Drools Planner does not implement simplex.</para>
    </section>

    <section>
      <title>Genetic algorithms</title>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It's scalable.</para>
        </listitem>

        <listitem>
          <para>Given a limited time, it can still deliver a pretty decent solution.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It does not know when it has found an optimal solution.</para>
        </listitem>

        <listitem>
          <para>If the optimal score is unknown (which is usually the case), it must be told when to stop looking (for
          example based on time spend, user input, ...).</para>
        </listitem>
      </itemizedlist>

      <para>The genetic algorithm is currently not implemented in Drools Planner.</para>
    </section>

    <section>
      <title>Local search (tabu search, simulated annealing, ...)</title>

      <para>Local search starts from an initial solution and evolves that single solution into a mostly better and
      better solution. It uses a single search path of solutions, not a search tree. At each solution in this path it
      evaluates a number of moves on the solution and applies the most suitable move to take the step to the next
      solution.</para>

      <para>Local search works a lot like a human planner: it uses a single search path and moves facts around to find a
      good feasible solution.</para>

      <para>A simple local search can easily get stuck in a local optima, but improvements (such as tabu search and
      simulated annealing) address this problem.</para>

      <para>Advantages:</para>

      <itemizedlist>
        <listitem>
          <para>It's relatively simple and natural to implement constraints (at least in Drools Planner's
          implementation).</para>
        </listitem>

        <listitem>
          <para>It's very scalable, even when adding extra constraints (at least in Drools Planner's
          implementation).</para>
        </listitem>

        <listitem>
          <para>Given a limited time, it can still deliver a pretty decent solution.</para>
        </listitem>
      </itemizedlist>

      <para>Disadvantages:</para>

      <itemizedlist>
        <listitem>
          <para>It does not know when it has found an optimal solution.</para>
        </listitem>

        <listitem>
          <para>If the optimal score is unknown (which is usually the case), it must be told when to stop looking (for
          example based on time spend, user input, ...).</para>
        </listitem>
      </itemizedlist>

      <para>Drools Planner implements local search, including tabu search and simulated annealing.</para>
    </section>
  </section>

  <section>
    <title>The size of real world problems</title>

    <para>As a planning problem gets bigger, the search space tends to blow up really fast. It's not uncommon to see
    that it's possible to optimally plan 5 people in less then a second, while planning 6 people optimally would take
    years. Take a look at the problem size of the examples: many instances have a lot more possible solutions than the
    minimal number of atoms in the known universe (10^80).</para>

    <para>The cold, hard reality is that <emphasis role="bold">for most real-world planning problems we will not find
    the optimal solution in our lifetimes.</emphasis> But that's OK, as long as we improve upon the solutions created by
    human planners (which is easy) or other systems.</para>

    <para>Planning competitions (such as the International Timetabling Competition) show that local search variations
    (tabu search, simulated annealing, ...) usually perform best for real-world problems given real-world time
    limitations.</para>
  </section>

  <section>
    <title>The Solver interface</title>

    <para>Solving a planning problem with Drools Planner consists out of 4 steps:</para>

    <orderedlist>
      <listitem>
        <para>Build a solver, for example a tabu search solver for any NQueens puzzle.</para>
      </listitem>

      <listitem>
        <para>Set a starting solution on the solver, for example a 4 Queens puzzle instance.</para>
      </listitem>

      <listitem>
        <para>Solve it.</para>
      </listitem>

      <listitem>
        <para>Get the best solution found by the solver.</para>
      </listitem>
    </orderedlist>

    <para>Every build-in solver implemented in Drools Planner implements the <literal>Solver</literal> interface:</para>

    <programlisting>public interface Solver {

    void setStartingSolution(Solution solution);

    Solution getBestSolution();
    
    void solve();

    // ...

}</programlisting>

    <para>There is normally no need to implement the <literal>Solver</literal> interface yourself.</para>

    <para>A <literal>Solver</literal> should only be accessed from a single thread, except for the methods that are
    specifically javadocced as thread-safe.</para>
  </section>

  <section>
    <title>Building a Solver</title>

    <para>You can build a <literal>Solver</literal> instance with the <literal>XmlSolverConfigurer</literal>. Configure
    it with a solver configuration XML file:</para>

    <programlisting>    XmlSolverConfigurer configurer = new XmlSolverConfigurer();
    configurer.configure("/org/drools/planner/examples/nqueens/solver/nqueensSolverConfig.xml");
    Solver solver = configurer.buildSolver();</programlisting>

    <para>A basic solver configuration file looks something like this:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;localSearchSolver&gt;
    &lt;scoreDrl&gt;/org/drools/planner/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;
    &lt;scoreDefinition&gt;
        &lt;scoreDefinitionType&gt;SIMPLE&lt;/scoreDefinitionType&gt;
    &lt;/scoreDefinition&gt;
    &lt;termination&gt;
        &lt;scoreAttained&gt;0&lt;/scoreAttained&gt;
    &lt;/termination&gt;
    &lt;selector&gt;
        &lt;moveFactoryClass&gt;org.drools.planner.examples.nqueens.solver.NQueensMoveFactory&lt;/moveFactoryClass&gt;
    &lt;/selector&gt;
    &lt;acceptor&gt;
        &lt;completeSolutionTabuSize&gt;1000&lt;/completeSolutionTabuSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
        &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
    &lt;/forager&gt;
&lt;/localSearchSolver&gt;</programlisting>

    <para>This is a tabu search configuration for n queens. We 'll explain the various parts of a configuration later in
    this manual.</para>

    <para><emphasis role="bold">Drools Planner makes it relatively easy to switch a solver type just by changing the
    configuration.</emphasis> There's even a benchmark utility which allows you to play out different configurations
    against each other and report the most appropriate configuration for your problem. You could for example play out
    tabu search versus simulated annealing, on 4 queens and 64 queens.</para>

    <section>
      <title>Environment mode</title>

      <para>A solver has a single <literal>Random</literal> instance. Some solver configurations use the
      <literal>Random</literal> instance a lot more than others. For example simulated annealing depends highly on
      random numbers, while tabu search only depends on it to deal with score ties. The environment mode influences the
      seed of that <literal>Random</literal> instance.</para>

      <para>The environment mode also allows you to detect common bugs in your implementation.</para>

      <para>You can set the environment mode in the solver configuration XML file:</para>

      <programlisting>&lt;localSearchSolver&gt;
    &lt;environmentMode&gt;DEBUG&lt;/environmentMode&gt;
    ...
&lt;/localSearchSolver&gt;</programlisting>

      <para>There are 3 environment modes:</para>

      <section>
        <title>DEBUG</title>

        <para>The debug mode is reproducible (see the reproducible mode) and also turns on assertions (such as assert
        that the undo Move is uncorrupted) to fail-fast on a bug in your Move implementation, your score rule,
        ...</para>

        <para>The debug mode is slow.</para>

        <para>It's recommended to write a test case which does a short run of your planning problem with debug mode
        on.</para>
      </section>

      <section>
        <title>REPRODUCIBLE (default)</title>

        <para>The reproducible mode is the default mode because it is recommended during development. In this mode, 2
        runs on the same computer will execute the same code in the same order. They will also yield the same result,
        except if they use a time based termination and they have a sufficiently large difference in allocated CPU time.
        This allows you to benchmark new optimizations (such as a new move implementation or a different
        minimalAcceptedSelection setting) fairly.</para>

        <para>The reproducible mode is not much slower than the production mode.</para>

        <para>In practice, this mode uses the default random seed, and it also disables certain concurrency
        optimizations (such as work stealing).</para>
      </section>

      <section>
        <title>PRODUCTION</title>

        <para>The production mode is the fastest and the most robust, but not reproducible. It is recommended for a
        production environment.</para>

        <para>The random seed is different on every run, which makes it more robust against an unlucky random seed. An
        unlucky random seed gives a bad result on a certain data set with a certain solver configuration. Note that in
        most use cases the impact of the random seed is relatively low on the result (even with simulated annealing). An
        occasional bad result is far more likely caused by another issue (such as a score trap).</para>
      </section>
    </section>
  </section>

  <section>
    <title>The Solution interface</title>

    <para>A Solver can only solve 1 problem instance at a time.</para>

    <para>You need to present the problem as a starting <literal>Solution</literal> instance to the solver.</para>

    <para>You need to implement the <literal>Solution</literal> interface:</para>

    <programlisting>public interface Solution {

    Score getScore();
    void setScore(Score score);

    Collection&lt;? extends Object&gt; getFacts();

    Solution cloneSolution();

}</programlisting>

    <para>For example, an NQueens instance just holds a list of all its queens:</para>

    <programlisting>public class NQueens implements Solution {

    private List&lt;Queen&gt; queenList;

    // ...

}</programlisting>

    <section>
      <title>The getScore and setScore methods</title>

      <para>A <literal>Solution</literal> requires a score property. The score property is null if the
      <literal>Solution</literal> is uninitialized or if the score has not yet been (re)calculated. The score property
      is usually typed to the specific <literal>Score</literal> implementation you use. For example, NQueens uses a
      <literal>SimpleScore</literal>:</para>

      <programlisting>    private SimpleScore score;

    public SimpleScore getScore() {
        return score;
    }

    public void setScore(Score score) {
        this.score = (SimpleScore) score;
    }</programlisting>
    </section>

    <section>
      <title>The getFacts method</title>

      <para>All Objects returned by the <literal>getFacts()</literal> method will be asserted into the drools working
      memory. Those facts can be used by the score rules. For example, <literal>NQueens</literal> just returns all
      <literal>Queen</literal> instances.</para>

      <programlisting>    public Collection&lt;? extends Object&gt; getFacts() {
        return queenList;
    }</programlisting>
    </section>

    <section>
      <title>The cloneSolution method</title>

      <para>Most solvers use the <literal>cloneSolution()</literal> method to clone the solution each time they
      encounter a new best solution. The <literal>NQueens</literal> implementation just clones all
      <literal>Queen</literal> instances:</para>

      <programlisting>    public NQueens cloneSolution() {
        NQueens clone = new NQueens();
        List&lt;Queen&gt; clonedQueenList = new ArrayList&lt;Queen&gt;(queenList.size());
        for (Queen queen : queenList) {
            clonedQueenList.add(queen.clone());
        }
        clone.queenList = clonedQueenList;
        clone.score = score;
        return clone;
    }</programlisting>

      <para>The <literal>cloneSolution()</literal> method should clone no more and no less than the parts of the
      <literal>Solution</literal> that can change during planning. For example, in the curriculum course schedule
      example the lectures are cloned, but teachers, courses, timeslots, periods, rooms, ... are not cloned because only
      a lecture's appointed period or room changes during solving:</para>

      <programlisting>    /**
     * Clone will only deep copy the {@link #lectureList}.
     */
    public CurriculumCourseSchedule cloneSolution() {
        CurriculumCourseSchedule clone = new CurriculumCourseSchedule();
        ...
        clone.teacherList = teacherList;
        clone.curriculumList = curriculumList;
        clone.courseList = courseList;
        clone.dayList = dayList;
        clone.timeslotList = timeslotList;
        clone.periodList = periodList;
        clone.roomList = roomList;
        clone.unavailablePeriodConstraintList = unavailablePeriodConstraintList;
        List&lt;Lecture&gt; clonedLectureList = new ArrayList&lt;Lecture&gt;(lectureList.size());
        for (Lecture lecture : lectureList) {
            Lecture clonedLecture = lecture.clone();
            clonedLectureList.add(clonedLecture);
        }
        clone.lectureList = clonedLectureList;
        clone.score = score;
        return clone;
    }</programlisting>
    </section>
  </section>

  <section>
    <title>The starting solution</title>

    <para>First, you will need to make a starting solution and set that on the solver:</para>

    <programlisting>solver.setStartingSolution(startingSolution);</programlisting>

    <section>
      <title>A simple filler algorithm</title>

      <para>For 4 queens we use a simple filler algorithm that creates a starting solution with all queens on a
      different x and on the same y (with y = 0).</para>

      <figure>
        <title>Starting solution for the 4 queens puzzle</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Planner_configuration/unsolvedNQueens04.png" format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Here's how we generate it:</para>

      <programlisting>    private NQueens createNQueens(int n) {
        NQueens nQueens = new NQueens();
        nQueens.setId(0L);
        List&lt;Queen&gt; queenList = new ArrayList&lt;Queen&gt;(n);
        for (int i = 0; i &lt; n; i++) {
            Queen queen = new Queen();
            queen.setId((long) i);
            queen.setX(i); // Different column
            queen.setY(0); // Same row
            queenList.add(queen);
        }
        nQueens.setQueenList(queenList);
        return nQueens;
    }</programlisting>

      <para>The starting solution will probably be far from optimal (or even feasible). Here, it's actually the worst
      possible solution. However, we 'll let the solver find a much better solution for us anyway.</para>
    </section>

    <section>
      <title>StartingSolutionInitializer</title>

      <para>For large problems, a simple filler algorithm like <literal>createNQueens(int)</literal> doesn't suffice. A
      (local search) solver starting from a bad starting solution wastes a lot of time to reach a solution which an
      initializer algorithm can generate in a fraction of that time.</para>

      <para>An initializer algorithm usually works something like this:</para>

      <itemizedlist>
        <listitem>
          <para>It sorts the unplanned elements in a queue according to some general rules, for example by exam student
          size.</para>
        </listitem>

        <listitem>
          <para>Next, it plans them in the order they come from the queue. Each element is put the best, still available
          spot.</para>
        </listitem>

        <listitem>
          <para>It doesn't change an already planned element. It exits when the queue is empty and all elements are
          planned.</para>
        </listitem>
      </itemizedlist>

      <para>Such an algorithm is very deterministic: it's really fast, but you can't give it more time to generate an
      even better solution. In some cases the solution it generates will be feasible, but in most cases it won't. You
      'll need a real solver to get to a feasible or more optimal solution. Nevertheless you 'll want to such an
      initializer to give the real solver a serious head start. You can do this by implementing the
      <literal>StartingSolutionInitializer</literal> interface:</para>

      <programlisting>public interface StartingSolutionInitializer extends SolverAware {

    boolean isSolutionInitialized(Solution solution);

    void initializeSolution(Solution solution);

}</programlisting>

      <para>You'll need to set a (uninitialized) solution on the solver. Once the solver starts, it will first call the
      <literal>StartingSolutionInitializer</literal> to initialize the solution. If the
      <literal>StartingSolutionInitializer</literal> adds, edits or removes facts it needs to notify the workingMemory
      about this. It can use score calculation during its initialization process.</para>

      <para>Here's an example on how you add the <literal>StartingSolutionInitializer</literal> to the
      configuration:</para>

      <programlisting>&lt;localSearchSolver&gt;
    ...
    &lt;startingSolutionInitializerClass&gt;org.drools.planner.examples.examination.solver.solution.initializer.ExaminationStartingSolutionInitializer&lt;/startingSolutionInitializerClass&gt;
    ...
&lt;/localSearchSolver&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Solving a problem</title>

    <para>Solving a problem is quite easy once you have a solver and the starting solution:</para>

    <programlisting>    solver.setStartingSolution(startingSolution);
    solver.solve();
    Solution bestSolution = solver.getBestSolution();</programlisting>

    <para>The <literal>solve()</literal> method will take a long time (depending on the problem size and the solver
    configuration). The solver will remember (actually clone) the best solution it encounters during its solving.
    Depending on a number factors (including problem size, how long you allow the solver to work, which solver type you
    use, ...), that best solution will be a feasible or even an optimal solution.</para>

    <figure>
      <title>Best solution for the 4 queens puzzle (also an optimal solution)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Planner_configuration/solvedNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>After a problem is solved, you can reuse the same solver instance to solve another problem (of the same
    problem type).</para>
  </section>
</chapter>
