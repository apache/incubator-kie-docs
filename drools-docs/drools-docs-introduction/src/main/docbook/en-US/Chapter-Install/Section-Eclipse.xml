<?xml version="1.0" encoding="UTF-8"?>
<section  version="5.0" xmlns="http://docbook.org/ns/docbook"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns:xi="http://www.w3.org/2001/XInclude"
                    xmlns:svg="http://www.w3.org/2000/svg"
                    xmlns:m="http://www.w3.org/1998/Math/MathML"
                    xmlns:html="http://www.w3.org/1999/xhtml"
                    xmlns:db="http://docbook.org/ns/docbook" xml:base="../../">
  <title>Eclipse</title>

  <section>
    <title>Generating Eclipse Projects</title>

    <para>The Drools project has Eclipse projects checked in for convenience.
    However, these are originally generated by maven 2. If you have maven 2
    installed, you can also regenerate the Eclipse projects automatically, or
    even generate it for IntelliJ etc, see the instructions below for this
    (most people can ignore this section)</para>

    <para><indexterm>
        <primary>maven</primary>
      </indexterm>Maven is able to generate standard <indexterm>
        <primary>Eclipse</primary>
      </indexterm>Eclipse projects, but it is not able to generate Eclipse
    plug-in projects. To generate the Eclipse projects for drools-core,
    drools-compiler and drools-jsr94 type <literal>'mvn
    Eclipse:Eclipse'</literal>.</para>

    <screenshot>
      <screeninfo>Start Maven Eclipse project generation</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/mvn_eclipse1.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Finished Maven Eclipse project generation</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/mvn_eclipse2.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>
  </section>

  <section>
    <title>Importing Eclipse Projects</title>

    <para>With the <indexterm>
        <primary>Eclipse</primary>
      </indexterm>Eclipse project files generated they can now be imported
    into Eclipse. When starting Eclipse open the workspace in the root of your
    subversion checkout.</para>

    <screenshot>
      <screeninfo>Open Eclipse Workspace</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import1.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Select Import</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import2.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Import Existing Projects</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import3.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Select all ticked projects</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import4.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>When calling <literal>'mvn install'</literal> all the project
    dependencies were downloaded and added to the local Maven repository.
    Eclipse cannot find those dependencies unless you tell it where that
    repository is. To do this setup an M2_REPO classpath variable.</para>

    <screenshot>
      <screeninfo>Open the Preferences dialogue window</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import6.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Select New Classpath Variable</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import7.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Set the M2_REPO location</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import8.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>M2_REPO is now set</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_import9.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>
  </section>

  <section>
    <title>Exporting the IDE plug-in</title>

    <para>The drools-ide project was checked out out using subversion and is
    ready for exporting.</para>

    <screenshot>
      <screeninfo>Select Export on the drools-ide project</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin1.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Select Deployable plug-ins and fragments</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin2.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Only select org.drools.ide</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin3.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Wait while the plug-in is built and exported</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin4.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Once the plug-in has been built open the output directory and copy
    the jar to the Eclipse plug-in directory.</para>

    <screenshot>
      <screeninfo>Open the directory with the build jar</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin5.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Copy the jar to the Eclipse plug-in directory</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin6.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>At this point if Eclipse is already open it will need to be
    restarted. At which point you show now see the new Drools menu icon and
    drl's should have icons and be provided with syntax highlighting and
    intellisense.</para>

    <screenshot>
      <screeninfo>The new Drools menu icon</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin7.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <screenshot>
      <screeninfo>Drls with icons and syntax highlighting</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Install/eclipse_plugin8.jpg" />
        </imageobject>
      </mediaobject>
    </screenshot>
  </section>
<!--
  <section>
    <title>Building the update site</title>

    <para>There is also an update site for the plug-in. For developers who
    want to update the update site (ha) you will need to get to the update
    site project (or create a new one). They are kept in SVN, but in
    /jbossrules/update instead of /trunk. They are plain vanilla Eclipse
    feature and site projects.</para>

    <para>PLEASE REMEMBER that the plug-in in the downloads directory, as a
    zip, should also be updated at the same time as the update site (as they
    are alternative ways ot getting the same plug-in).</para>

    <para>Eclipse refreshing plug-ins in features and sites seems to not work,
    so what is best is to manually edit the site.xml project and the
    feature.xml. To do this, open the site.xml file in the drools-ide-update
    project, it should look something like this: <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;site&gt;
   &lt;!- change both the jar and the version number, make sure the new features jar is named
        the same as what you put in -&gt;
   &lt;feature url="features/org.drools.ide_1.0.2.jar" id="org.drools.ide" version="1.0.2"&gt;
  &lt;category name="JBossRules"/&gt;
   &lt;/feature&gt;
   &lt;category-def name="JBossRules" label="JBoss Rules"/&gt;
&lt;/site&gt;
</programlisting> Change the version attribute to be something new, and also
    the name of the feature jar to have a new version number at the
    end.</para>

    <para>Go into the /feature directory, and unzip the feature jar to get to
    the feature.xml. (the feature jar really just contains the feature.xml).
    Open the feature.xml, and it should look like: <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;feature
  id="org.drools.ide"
  label="Drools Rule Workbench"
  version="1.0.2"&gt; &lt;!- UPDATE THIS !! -&gt;

   &lt;description&gt;
  JBoss Rules (Drools) Workbench for developers.
   &lt;/description&gt;

   &lt;copyright&gt;
  Copyright 2005 JBoss Inc
   &lt;/copyright&gt;

   &lt;license&gt;
  Licensed under the Apache License, Version 2.0(the &amp;quot;License&amp;quot;);
 you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
   http://www.apache.org/licenses/LICENSE-2.0
  
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
   &lt;/license&gt;

   &lt;plug-in
 id="org.drools.ide"
 download-size="0"
 install-size="0"
 version="1.0.0"/&gt; &lt;!- THIS JUST HAS TO BE CONSISTENT WITH THE plug-in -&gt;

&lt;/feature&gt;
</programlisting> Change the version number in the FEATURE tag to be the same
    as what you referred to in the site.xml. If you changed the version number
    of the main plug-in, you will need to put the version number in the plug
    in tag (which refers to org.drools.ide plug-in). Then zip up the
    feature.xml into a jar with the same name as you referred to in the
    site.xml.</para>

    <para>Finally, drop the plug-in jar into the /plugins jar directory of the
    update site (get the actual plug-in from the exported plug-in in the
    previous step). Now you can upload the site as is, and it will show up as
    a new version for Eclipse clients.</para>
  </section>
-->
</section>
