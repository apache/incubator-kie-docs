<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuration</title>

  <para>Inside the war file you will found a few XML configuration files. The
  most importants are knowledge-services.xml and camel-server.xml that we'll
  see in depth in the next sections. The other file, beans.xml only includes
  these two files.</para>

  <section>
    <title>REST/Camel Services configuration</title>

    <para>The next step is configure the services that are going to be exposed
    through drools-server. You can modify this configuration in
    camel-server.xml file.</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cxf="http://camel.apache.org/schema/cxf"
  xmlns:jaxrs="http://cxf.apache.org/jaxrs"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
  http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
  http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

&lt;import resource="classpath:META-INF/cxf/cxf.xml" /&gt;
&lt;import resource="classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml"/&gt; 
&lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml" /&gt;

  &lt;!--
   !   Define the server end point.
   !   Copy and paste this element, changing id and the address, to expose services on different urls.
   !   Different Camel routes can handle different end point paths.
    --&gt;
  &lt;cxf:rsServer id="rsServer"  
                address="/kservice/rest"
                serviceClass="org.drools.jax.rs.CommandExecutorImpl"&gt;
    &lt;cxf:providers&gt;
      &lt;bean class="org.drools.jax.rs.CommandMessageBodyReader"/&gt;
    &lt;/cxf:providers&gt;
  &lt;/cxf:rsServer&gt;  

  &lt;!-- Leave this, as it's needed to make Camel "drools" aware --&gt;
  &lt;bean id="droolsPolicy" class="org.drools.camel.component.DroolsPolicy" /&gt;  

  &lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;    
    &lt;!-- 
     ! Routes incoming messages from end point id="rsServer".
     ! Example route unmarshals the messages with xstream and executes against ksession1.
     ! Copy and paste this element, changing marshallers and the 'to' uri, to target different sessions, as needed.
     !--&gt;
     
    &lt;route&gt;
      &lt;from uri="cxfrs://bean://rsServer"/&gt;
        &lt;policy ref="droolsPolicy"&gt;
          &lt;unmarshal ref="xstream" /&gt;       
          &lt;to uri="drools:node1/ksession1" /&gt;
          &lt;marshal ref="xstream" /&gt;
        &lt;/policy&gt;
    &lt;/route&gt;    
        
  &lt;/camelContext&gt;
  
&lt;/beans&gt; </programlisting>

    <section>
      <title>RESTful service endpoint creation</title>

      <para>In the next xml snippet code we are creating a RESTful (JAX-RS)
      endpoint binded to /kservice/rest address and using
      org.drools.jax.rs.CommandExecutorImpl as the service implementor. This
      class is only used to instantiate the service endpoint because all the
      internal implementation is managed by Camel, and you can see in the
      source file that the exposed execute service must be never
      called.</para>

      <para>Also a JAX-RS Provider is provided to determine if the message
      transported can be processed in this service endpoint.</para>

      <programlisting>&lt;cxf:rsServer id="rsServer"
               address="/kservice/rest"
               serviceClass="org.drools.jax.rs.CommandExecutorImpl"&gt;
  &lt;cxf:providers&gt;
    &lt;bean class="org.drools.jax.rs.CommandMessageBodyReader"/&gt;
  &lt;/cxf:providers&gt;
&lt;/cxf:rsServer&gt;</programlisting>

      <para>Ideally this configuration doesn’t need to be modified, at least
      the Service Class and the JAX-RS Provider, but you can add more
      endpoints associated to different addresses to use them in anothers
      Camel Routes.</para>

      <para>After all this initial configuration, you can start config your
      own Knowledge Services.</para>
    </section>

    <section>
      <title>Camel Drools Policy &amp; Context creation</title>

      <para>DroolsPolicy is used to add Drools support in Camel, basically
      what it does is to add interceptors into the camel route to create Camel
      Processors on the fly and modify the internal navigation route. If you
      want to have SOAP support you need to create your custom Drools Policy,
      but it's going to be added in the next release.</para>

      <para>But you don’t need to know more internal details, only instantiate
      this bean:</para>

      <programlisting>&lt;bean id="droolsPolicy" class="org.drools.camel.component.DroolsPolicy" /&gt;</programlisting>

      <para>The next is create the camel route that will have the
      responsibility to execute the commands sent through JAX-RS. Basically we
      create a route definition associated with the JAX-RS definition as the
      data input, the camel policy to be used and inside the “execution route”
      or ProcessorDefinitions. As you can see, we set XStream as the
      marshaller/unmarshaller and the drools execution route definition</para>

      <programlisting>&lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;
  &lt;route&gt;
    &lt;from uri="cxfrs://bean://rsServer"/&gt;
    &lt;policy ref="droolsPolicy"&gt;
      &lt;unmarshal ref="xstream" /&gt;
      &lt;to uri="drools:node1/ksession1" /&gt;
      &lt;marshal ref="xstream" /&gt;
    &lt;/policy&gt;
  &lt;/route&gt;
&lt;/camelContext&gt;</programlisting>

      <para>The drools endpoint creation has the next arguments</para>

      <para><programlisting>&lt;to uri="drools:{1}/{2}" /&gt;</programlisting></para>

      <orderedlist>
        <listitem>
          <para>Execution Node identifier that is registered in the
          CamelContext</para>
        </listitem>

        <listitem>
          <para>Knowledge Session identifier that was registered in the
          Execution Node with identifier {1}</para>
        </listitem>
      </orderedlist>

      <para>Both parameters are configured in knowledge-services.xml
      file.</para>
    </section>
  </section>
</section>
