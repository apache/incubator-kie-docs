<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuration</title>

  <para>Inside the war file you will find a few XML configuration
  files.</para>

  <itemizedlist>
    <listitem>
      <para>breans.xml</para>

      <itemizedlist>
        <listitem>
          <para>Skeleton xml that imports knowledge-services.xml and
          camel-server.xml</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>camel-server.xml</para>

      <itemizedlist>
        <listitem>
          <para>Configures CXF endpoints with Camel Routes</para>
        </listitem>

        <listitem>
          <para>Came Routes pipeline messages to various configured knowledge
          services</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>knowledge-services.xml</para>

      <itemizedlist>
        <listitem>
          <para>Various Knowege Bases and Sessions</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>camel-client.xml</para>

      <itemizedlist>
        <listitem>
          <para>Sample camel client showing how to send and receive a
          message</para>
        </listitem>

        <listitem>
          <para>Used by "out of the box" test.jsp</para>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <para></para>

  <section>
    <title>REST/Camel Services configuration</title>

    <para>The next step is configure the services that are going to be exposed
    through drools-server. You can modify this configuration in
    camel-server.xml file.</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cxf="http://camel.apache.org/schema/cxf"
  xmlns:jaxrs="http://cxf.apache.org/jaxrs"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
  http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
  http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

&lt;import resource="classpath:META-INF/cxf/cxf.xml" /&gt;
&lt;import resource="classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml"/&gt; 
&lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml" /&gt;

  &lt;!--
   !   If you are running on JBoss you will need to copy a camel-jboss.jar into the lib and set this classloader configuration 
   !  http://camel.apache.org/camel-jboss.html
   !   &lt;bean id="jbossResolver" class="org.apache.camel.jboss.JBossPackageScanClassResolver"/&gt;
   --&gt;

  &lt;!--
   !   Define the server end point.
   !   Copy and paste this element, changing id and the address, to expose services on different urls.
   !   Different Camel routes can handle different end point paths.
   --&gt;
  &lt;cxf:rsServer id="rsServer"  
                address="/kservice/rest"
                serviceClass="org.drools.jax.rs.CommandExecutorImpl"&gt;
    &lt;cxf:providers&gt;
      &lt;bean class="org.drools.jax.rs.CommandMessageBodyReader"/&gt;
    &lt;/cxf:providers&gt;
  &lt;/cxf:rsServer&gt;  

  &lt;!-- Leave this, as it's needed to make Camel "drools" aware --&gt;
  &lt;bean id="droolsPolicy" class="org.drools.camel.component.DroolsPolicy" /&gt;  

  &lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;    
    &lt;!-- 
     ! Routes incoming messages from end point id="rsServer".
     ! Example route unmarshals the messages with xstream and executes against ksession1.
     ! Copy and paste this element, changing marshallers and the 'to' uri, to target different sessions, as needed.
     !--&gt;
     
    &lt;route&gt;
      &lt;from uri="cxfrs://bean://rsServer"/&gt;
        &lt;policy ref="droolsPolicy"&gt;
          &lt;unmarshal ref="xstream" /&gt;       
          &lt;to uri="drools:node1/ksession1" /&gt;
          &lt;marshal ref="xstream" /&gt;
        &lt;/policy&gt;
    &lt;/route&gt;    
        
  &lt;/camelContext&gt;
  
&lt;/beans&gt; </programlisting>

    <section>
      <title>RESTful service endpoint creation</title>

      <para>In the next xml snippet code we are creating a RESTful (JAX-RS)
      endpoint binded to /kservice/rest address and using
      org.drools.jax.rs.CommandExecutorImpl as the service implementor. This
      class is only used to instantiate the service endpoint because all the
      internal implementation is managed by Camel, and you can see in the
      source file that the exposed execute service must be never
      called.</para>

      <para>Also a JAX-RS Provider is provided to determine if the message
      transported can be processed in this service endpoint.</para>

      <programlisting>&lt;cxf:rsServer id="rsServer"
               address="/kservice/rest"
               serviceClass="org.drools.jax.rs.CommandExecutorImpl"&gt;
  &lt;cxf:providers&gt;
    &lt;bean class="org.drools.jax.rs.CommandMessageBodyReader"/&gt;
  &lt;/cxf:providers&gt;
&lt;/cxf:rsServer&gt;</programlisting>

      <para>Ideally this configuration doesn’t need to be modified, at least
      the Service Class and the JAX-RS Provider, but you can add more
      endpoints associated to different addresses to use them in anothers
      Camel Routes.</para>

      <para>After all this initial configuration, you can start config your
      own Knowledge Services.</para>
    </section>

    <section>
      <title>Camel Drools Policy &amp; Context creation</title>

      <para>DroolsPolicy is used to add Drools support in Camel, basically
      what it does is to add interceptors into the camel route to create Camel
      Processors on the fly and modify the internal navigation route. If you
      want to have SOAP support you need to create your custom Drools Policy,
      but it's going to be added in the next release.</para>

      <para>But you don’t need to know more internal details, only instantiate
      this bean:</para>

      <programlisting>&lt;bean id="droolsPolicy" class="org.drools.camel.component.DroolsPolicy" /&gt;</programlisting>

      <para>The next is create the camel route that will have the
      responsibility to execute the commands sent through JAX-RS. Basically we
      create a route definition associated with the JAX-RS definition as the
      data input, the camel policy to be used and inside the “execution route”
      or ProcessorDefinitions. As you can see, we set XStream as the
      marshaller/unmarshaller and the drools execution route definition</para>

      <programlisting>&lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;
  &lt;route&gt;
    &lt;from uri="cxfrs://bean://rsServer"/&gt;
    &lt;policy ref="droolsPolicy"&gt;
      &lt;unmarshal ref="xstream" /&gt;
      &lt;to uri="drools:node1/ksession1" /&gt;
      &lt;marshal ref="xstream" /&gt;
    &lt;/policy&gt;
  &lt;/route&gt;
&lt;/camelContext&gt;</programlisting>

      <para>The drools endpoint creation has the next arguments</para>

      <para><programlisting>&lt;to uri="drools:{1}/{2}" /&gt;</programlisting></para>

      <orderedlist>
        <listitem>
          <para>Execution Node identifier that is registered in the
          CamelContext</para>
        </listitem>

        <listitem>
          <para>Knowledge Session identifier that was registered in the
          Execution Node with identifier {1}</para>
        </listitem>
      </orderedlist>

      <para>Both parameters are configured in knowledge-services.xml
      file.</para>
    </section>

    <section>
      <title>Knowledge Services configuration</title>

      <para>The next step is create the Knowledge Sessions that you are going
      to use.</para>

      <programlisting>&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:drools="http://drools.org/schema/drools-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://drools.org/schema/drools-spring http://drools.org/schema/drools-spring.xsd"&gt;

   &lt;drools:execution-node id="node1" /&gt;

   &lt;drools:kbase id="kbase1" node="node1"&gt;
      &lt;drools:resources&gt;
         &lt;drools:resource  type="XSD" source="classpath:model.xsd"/&gt;
         &lt;drools:resource  type="DRL" source="classpath:test.drl"/&gt;
      &lt;/drools:resources&gt;
   &lt;/drools:kbase&gt;

   &lt;drools:ksession id="ksession1" type="stateless" kbase="kbase1" node="node1"/&gt;
&lt;/beans&gt;
</programlisting>

      <para>The execution-node is a context or registered kbases and
      ksessions, here kbase1 and ksession1 are planed in the node1 context.
      The kbase itself concists of tow knoeldge defiitions, a drl and an xsd.
      The Spring documentaiton contains a lot more information on configuring
      these knowledge services.</para>

      <para></para>
    </section>

    <section>
      <title>Test</title>

      <para>With drools-server war unzipped you should be able to see a
      test.jsp and run it. This example just executes a simple "echo" type
      application. It sends a message to the rule server that pre-appends the
      word "echo" to the front and sends it back. By default the message is
      "Hello World", different messages can be passed using the url parameter
      msg - test.jsp?msg="My Custom Message".</para>

      <para>Under the hood the jsp invokes the Test.java class, this then
      calls out to Camel which is where the meet happens. The camel-client.xml
      defines the client with just a few lines of xml:</para>

      <programlisting>&lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;     
   &lt;route&gt;
      &lt;from uri="direct://kservice"/&gt;
      &lt;policy ref="droolsPolicy"&gt;
         &lt;to uri="cxfrs://http://localhost:8080/drools-server-app/kservice/rest"/&gt;
      &lt;/policy&gt;
   &lt;/route&gt;         
 &lt;/camelContext&gt;
</programlisting>

      <para>"direct://kservice" is just a named hook, allowing java to grab a
      reference and push data into it. In this example the data is already in
      xml, so we don't need to add any DataFormat's to do the marshalling. The
      DroolsPolicy adds some smarts to the route and you'll see it used on the
      server side too. If JAXB or XStream were used, it would inject custom
      paths and converters, it can also set the classloader too on the server
      side, on the client side it automatically unwrapes the Response
      object.</para>

      <para>The rule itself can be found here: test.drl. Notice the type
      Message is declared part of the drl and is thus not present on the
      Classpath.</para>

      <programlisting>declare Message
   text : String
end
    
  
rule "echo" dialect "mvel"
when
   $m : Message();
then
   $m.text = "echo:" + $m.text;
end
</programlisting>
    </section>
  </section>
</section>
