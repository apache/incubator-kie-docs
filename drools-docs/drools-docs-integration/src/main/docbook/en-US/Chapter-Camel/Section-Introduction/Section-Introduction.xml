<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Camel</title>

  <para>Camel provides a light weight bus framework for geting information
  into and out of Drools.</para>

  <para>Drools introduces two elements to make easy integration.</para>

  <itemizedlist>
    <listitem>
      <para>Drools Policy</para>

      <para>Augments any JAXB or XStream data loaders. For JAXB it adds drools
      related paths ot the contextpath, for XStream it adds custom converters
      and aliases for Drools classes. It also handles setting the ClassLoader
      to the targetted ksession.</para>
    </listitem>

    <listitem>
      <para>Drools Endpoint</para>

      <para>Executes the payload against the specified drools session</para>
    </listitem>
  </itemizedlist>

  <para>Drools can be configured like any norma camel component, but notice
  the policy that wraps the drools related segments. This will route all
  payloads to ksession1</para>

  <example>
    <title>Drools EndPoint configured with the CXFRS producer</title>

    <programlisting>&lt;bean id="droolsPolicy" class="org.drools.camel.component.DroolsPolicy" /&gt;

&lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;  
   &lt;route&gt;
      &lt;from uri="cxfrs://bean://rsServer"/&gt;
         &lt;policy ref="droolsPolicy"&gt;
            &lt;unmarshal ref="xstream" /&gt;       
            &lt;to uri="drools:node1/ksession1" /&gt;
            &lt;marshal ref="xstream" /&gt;
       &lt;/policy&gt;
    &lt;/route&gt;</programlisting>
  </example>

  <para>It is possible to not specify the session in the drools endpoint uri,
  and instead "multiplex" based on an attribute or header. In this example the
  policy will check either the header field "DroolsLookup" for the named
  session to execute and if that isn't specified it'll check the "lookup"
  attribute on the incoming payload. It then attempts to "lookup" the session
  fron the execution-node context and execute against it.</para>

  <example>
    <title>Drools EndPoint configured with the CXFRS producer</title>

    <programlisting>&lt;bean id="droolsPolicy" class="org.drools.camel.component.DroolsPolicy" /&gt;

&lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;  
   &lt;route&gt;
      &lt;from uri="cxfrs://bean://rsServer"/&gt;
         &lt;policy ref="droolsPolicy"&gt;
            &lt;unmarshal ref="xstream" /&gt;       
            &lt;to uri="drools:node1" /&gt;
            &lt;marshal ref="xstream" /&gt;
       &lt;/policy&gt;
    &lt;/route&gt;</programlisting>
  </example>

  <example>
    <title>Java Code to execute against Route from a Spring and Camel
    Context</title>

    <programlisting>public class MyTest extends CamelSpringTestSupport {
    
    @Override
    protected AbstractXmlApplicationContext createApplicationContext() {        
        return new ClassPathXmlApplicationContext("org/drools/camel/component/CxfRsSpring.xml");
    }  

    public void test1() throws Exception {
        String cmd = "";
        cmd += "&lt;batch-execution lookup=\"ksession1\"&gt;\n";
        cmd += "  &lt;insert out-identifier=\"salaboy\"&gt;\n";
        cmd += "      &lt;org.drools.pipeline.camel.Person&gt;\n";
        cmd += "         &lt;name&gt;salaboy&lt;/name&gt;\n";
        cmd += "      &lt;/org.drools.pipeline.camel.Person&gt;\n";
        cmd += "   &lt;/insert&gt;\n";
        cmd += "   &lt;fire-all-rules/&gt;\n";
        cmd += "&lt;/batch-execution&gt;\n";
                
        Object object = this.context.createProducerTemplate().requestBody("direct://client", cmd);
        System.out.println( object ); 
    }    </programlisting>
  </example>

  <para>The following urls show sample script examples for jaxb, xstream and
  json marshalling using:</para>

  <itemizedlist>
    <listitem>
      <para>http://fisheye.jboss.org/browse/JBossRules/trunk/drools-camel/src/test/resources/org/drools/camel/component/jaxb.mvt?r=HEAD</para>
    </listitem>

    <listitem>
      <para>http://fisheye.jboss.org/browse/JBossRules/trunk/drools-camel/src/test/resources/org/drools/camel/component/jaxb.mvt?r=HEAD</para>
    </listitem>

    <listitem>
      <para>http://fisheye.jboss.org/browse/JBossRules/trunk/drools-camel/src/test/resources/org/drools/camel/component/xstream.mvt?r=HEAD</para>
    </listitem>
  </itemizedlist>
</section>
