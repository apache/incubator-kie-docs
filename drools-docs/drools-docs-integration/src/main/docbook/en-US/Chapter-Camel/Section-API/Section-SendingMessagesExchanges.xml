<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Sending messages exchanges</title>

  <para>In order to send messages to a Camel Endpoint we need to create a
  <link
  xlink:href="http://camel.apache.org/producertemplate.html">ProducerTemplate</link></para>

  <programlisting language="java">ProducerTemplate template = camelContext.createProducerTemplate();</programlisting>

  <para>After you have a template, you can start to send message exchange to
  your route:</para>

  <programlisting language="java">String xml = "&lt;xml&gt;example&lt;/xml&gt;";
template.requestBody("direct:with-session-xstream", xml);</programlisting>

  <para></para>

  <section>
    <title>Without marshallers</title>

    <para>If you don't want to use marshallers to send the messages, you can
    send the Commands objects directly but remember that all your own objects
    must be serializable.</para>

    <para><programlisting>Person person = new Person();
person.setName("darth");
InsertObjectCommand cmd = (InsertObjectCommand) CommandFactory.newInsert(person, "vader");
ExecutionResults response = (ExecutionResults) template.requestBody("direct:test-with-session", cmd);</programlisting></para>

    <note>
    <para>Remember that to send commands in this way you don't have to create the route using a Drools Policy.</para>
    </note>
  </section>

  <section>
    <title>Using XStream</title>

    <para>Using XStream To create XML commands with XStream we use the
    BatchExecutionHelper. The steps are the following:</para>

    <orderedlist>
      <listitem>
        <para>BatchExecutionCommand marshalling</para>

        <para>String xml =
        BatchExecutionHelper.newXStreamMarshaller().toXML(batchExecutionCommand);</para>
      </listitem>

      <listitem>
        <para>Sending the commands through the ProducerTemplate</para>

        <para>String xmlOutput = new
        String((byte[])template.requestBody("direct:test-with-session",
        xml)</para>
      </listitem>

      <listitem>
        <para>Transforming the Drools Endpoint XML response into a
        ExecutionResults instance</para>

        <para>ExecutionResults result = (ExecutionResults)
        BatchExecutionHelper.newXStreamMarshaller().fromXML(xmlOutput);</para>
      </listitem>
    </orderedlist>

    <para></para>
  </section>

  <section>
    <title>Using JAXB</title>

    <para>JAXB is more powerful because it allows us to define our model in a
    XSD file, making it unnecessary to duplicate our Java model, or even
    create a Java model in our project. In this case we need to send the
    JAXBContext with our XML command.</para>

    <para>You can use XSD files to represent your fact model inside a
    KnowledgeBuilder. In the following example we are going to use a POJO Java
    model and a XSD to duplicate the same model representation.</para>

    <orderedlist>
      <listitem>
        <para>JAXBContext creation:</para>

        <para>Here we are adding our XSD model definition to our
        KnowledgeBuilder as a resource</para>

        <programlisting language="java">Options xjcOpts = new Options();
xjcOpts.setSchemaLanguage( Language.XMLSCHEMA );
JaxbConfiguration jaxbConfiguration = KnowledgeBuilderFactory.newJaxbConfiguration( xjcOpts, "xsd" );
kbuilder.add( ResourceFactory.newClassPathResource("person.xsd", getClass()), ResourceType.XSD, jaxbConfiguration);</programlisting>

        <para>Then you need to add your knowledge resources into the kbuilder
        and create your KnowledgeBase. These steps are the same as those in
        the Drools Expert documentation. Finally, we are going to create the
        JAXBContext</para>

        <programlisting language="java">JAXBContext jaxbContext = null;
JaxbDataFormat def = new JaxbDataFormat();
def.setPrettyPrint(true);
// Set the package names to be registered by JAXB
def.setContextPath("org.drools.model:org.drools.pipeline.camel");

// create a jaxbContext for the test to use outside of Camel.
StatefulKnowledgeSession ksession1 = (StatefulKnowledgeSession) node.get(DirectoryLookupFactoryService.class).lookup("ksession1");
KnowledgeBase kbase = ksession1.getKnowledgeBase();
ClassLoader originalCl = Thread.currentThread().getContextClassLoader();
try {
    Thread.currentThread().setContextClassLoader(((ReteooRuleBase) ((KnowledgeBaseImpl) kbase).getRuleBase()).getRootClassLoader());
    def = DroolsPolicy.augmentJaxbDataFormatDefinition(def);
    org.apache.camel.converter.jaxb.JaxbDataFormat jaxbDataformat = (org.apache.camel.converter.jaxb.JaxbDataFormat) def.getDataFormat(this.context.getRoutes().get(0).getRouteContext());
    jaxbContext = jaxbDataformat.getContext();
} catch (JAXBException e) {
    throw new RuntimeException(e);
} finally {
    Thread.currentThread().setContextClassLoader(originalCl);
}</programlisting>
      </listitem>

      <listitem>
        <para>BatchExecutionCommand marshalling</para>

        <programlisting language="java">StringWriter xmlReq = new StringWriter();
Marshaller marshaller = jaxbContext.createMarshaller();
marshaller.setProperty("jaxb.formatted.output", true);
marshaller.marshal(batchExecutionCommand, xmlReq);</programlisting>
      </listitem>

      <listitem>
        <para>Sending the commands through the ProducerTemplate</para>

        <programlisting language="java">String xml = xmlReq.toString();
byte[] xmlOutput = (byte[]) template.requestBodyAndHeader("direct:test-with-session", xmlReq.toString());</programlisting>
      </listitem>

      <listitem>
        <para>Transforming the Drools Endpoint XML response to
        ExecutionResults</para>

        <para>And the final step is to convert the XML output to an
        ExecutionResults instance</para>

        <programlisting language="java">ExecutionResults resp = (ExecutionResults) jaxbContext.createUnmarshaller().unmarshal(new ByteArrayInputStream(xmlOutput));</programlisting>
      </listitem>
    </orderedlist>

    <para></para>

    <note>
      <para>The XML output conversion is not required, but is recommended to
      have a more legible data output.</para>
    </note>

    <para></para>
  </section>
</section>
