<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Camel Routes creation</title>

  <para>This is the most powerful feature of this integration, because of the
  very large library of <link
  xlink:href="http://camel.apache.org/component.html">Components</link>
  provided by Camel to build pipelines. If you check the Camel Components you
  can see how many integration possibilities are added now to Camel, and if
  this component doesn’t exists you can create this by your own.</para>

  <note>
    <para>A Camel Component is a factory of Endpoint instances</para>
  </note>

  <para>The first step is know how create a Drools endpoint, which has the
  next syntax</para>

  <programlisting>drools:{0}/{1}</programlisting>

  <para>{0} : Execution Node identifier that was registered in the
  CamelContext</para>

  <para>{1} : Knowledge Session identifier that was registered in the
  Execution Node with identifier {0}</para>

  <para></para>

  <para>Now that you know how define a drools endpoint, you can create your
  routes and add them to the Camel Context</para>

  <programlisting role="JAVA">RouteBuilder rb = new RouteBuilder() {
   public void configure() throws Exception {
      from("direct:test-with-session").policy(new DroolsPolicy()).unmarshal("xstream").to("drools:node/ksession1").marshal("xstream");
   }
};
camelContext.addRoutes(rb);</programlisting>

  <para><note>
      <para>Camel Drools Policy is used to add Drools support in Camel, what
      it does is to add interceptors into the camel route to create Camel
      Processors on the fly and modify the internal navigation route.</para>
    </note>In this example we created a simple route with a <link
  xlink:href="http://camel.apache.org/direct.html">Direct Endpoint</link> as
  the input and a Drools Endpoint as the output. A Direct input allow us to
  send the commands directly to the next endpoint in the route, invoking their
  consumer, which in this case will process the XML command.</para>

  <para>But there are several ways to create Drools endpoints, and different
  configurations to support extra features</para>

  <para></para>

  <section>
    <title>Programmatically</title>

    <itemizedlist>
      <listitem>
        <para>Processing the commands objects directly</para>

        <programlisting>RouteBuilder rb = new RouteBuilder() {
  public void configure() throws Exception {
    from("direct:test-with-session").to("drools://node/ksession1");
  }
};
camelContext.addRoutes(rb);</programlisting>
      </listitem>

      <listitem>
        <para>Processing the commands in a XML representation, using XStream
        or JSON as the marshaller/unmarshaller</para>

        <programlisting>RouteBuilder rb = new RouteBuilder() {
  public void configure() throws Exception {
    from("direct:test-with-session").policy(new DroolsPolicy()).unmarshal("xstream").to("drools:node/ksession1").marshal("xstream");
  }
};
camelContext.addRoutes(rb);</programlisting>

        <note>
          <para>To use JSON just change the unmarshall() and marshall()
          parameter to “json”</para>
        </note>
      </listitem>

      <listitem>
        <para>Using a custom XStream Data Format with your own XStream
        Converters</para>

        <programlisting>org.apache.camel.model.dataformat.XStreamDataFormat xstreamDataFormat = new org.apache.camel.model.dataformat.XStreamDataFormat();
xstreamDataFormat.setConverters(Arrays.asList(new String[]{PersonConverter.class.getName()}));

Map dataFormats = new HashMap();
dataFormats.put("custom-xstream",xstreamDataFormat);
camelContext.setDataFormats(dataFormats);

RouteBuilder rb = new RouteBuilder() {
  public void configure() throws Exception {
    from("direct:test-no-session-custom").policy(new DroolsPolicy()).unmarshal("custom-xstream").to("drools:node").marshal("custom-xstream");
  }
};
camelContext.addRoutes(rb);</programlisting>
      </listitem>

      <listitem>
        <para>Using JAXB as the marshaller/unmarshaller</para>

        <programlisting>JaxbDataFormat def = new JaxbDataFormat();
def.setPrettyPrint(true);
// Set the package names to be registered by JAXB
def.setContextPath("org.drools.model:org.drools.pipeline.camel");

RouteBuilder rb = new RouteBuilder() {
  public void configure() throws Exception {
    from("direct:test-with-session").policy(new DroolsPolicy()).unmarshal(def).to("drools:node/ksession1").marshal(def);
  }
};
camelContext.addRoutes(rb);</programlisting>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Using Spring</title>

    <itemizedlist>
      <listitem>
        <para>Simple configuration with XStream</para>

        <para><programlisting>&lt;bean id="droolsPolicy" class="org.drools.camel.component.DroolsPolicy" /&gt;
  &lt;camelContext id="camel" xmlns="http://camel.apache.org/schema/spring"&gt;
  &lt;route&gt;
    &lt;from uri="direct:entryPoint"/&gt;
    &lt;policy ref="droolsPolicy"&gt;
      &lt;unmarshal ref="xstream" /&gt;
      &lt;to uri="drools:node1/ksession1" /&gt;
      &lt;marshal ref="xstream" /&gt;
    &lt;/policy&gt;
  &lt;/route&gt;
&lt;/camelContext&gt;</programlisting></para>
      </listitem>
    </itemizedlist>

    <note>
      <para>Using spring we can create the same configurations that in the
      programmatically way.</para>
    </note>

    <para><note>
        <para>As you can see, in all this examples we are using Direct
        Endpoints as the main entry point, but you can use any others of the
        available Camel Components.</para>
      </note></para>
  </section>
</section>
