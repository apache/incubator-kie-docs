<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Camel Routes creation</title>

  <para>This is the most powerful feature of this integration, because of the
  very large library of <link
  xlink:href="http://camel.apache.org/component.html">Components</link>
  provided by Camel to build pipelines.</para>

  <note>
    <para>A Camel Component is a factory of Endpoint instances</para>
  </note>

  <para>The declaration of a Drools Endpoint needs a few parameters, as shown
  below:</para>

  <para>drools:{0}/{1}?dataFormat={2}</para>

  <para>{0} : Execution Node identifier that was registered in the
  CamelContext</para>

  <para>{1} : Knowledge Session identifier that was registered in the
  Execution Node with identifier {0}</para>

  <para>{2} : XML command transformer that is going to be used. Currently, we
  provide three implementations: drools-xstream, drools-jaxb and
  drools-json.</para>

  <para></para>

  <para>The most important thing in this section is to know how to create your
  Drools Endpoint, best shown in an example:</para>

  <para><programlisting>RouteBuilder rb = new RouteBuilder() { 
   public void configure() throws Exception {
      from("direct:with-session-xstream").to("drools:sm/ksession1?dataFormat=drools-xstream");
   }
};
camelContext.addRoutes(rb);</programlisting></para>

  <para></para>

  <para>In this example we created a simple route with a <link
  xlink:href="http://camel.apache.org/direct.html">Direct Endpoint</link> as
  the input and a Drools Endpoint as the output. A Direct input allow us to
  send the commands directly to the next endpoint in the route, invoking their
  consumer, which in this case will process the XML command.</para>

  <note>
    Bear in mind that when you send a XML command to a route, the format must the same as the dataFormat transformer used in the route creation.
  </note>
</section>
