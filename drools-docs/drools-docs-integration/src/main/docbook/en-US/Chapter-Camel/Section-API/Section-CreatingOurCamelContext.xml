<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Creating our Camel Context</title>

  <para>We need to create our own CamelContext to start. The first thing that
  we should do is create and register the grid node that we are going to use
  inside the CamelContext. In the most common cases we need to implement the
  Local grid connection. The next step after the LocalConnection creation is
  to get a new ExecutionNode and register this inside the CamelContext.</para>

  <programlisting language="java">LocalConnection connection = new LocalConnection();
ExecutionNode node = connection.getExecutionNode();
node.setId("node");
Context jndiContext = new JndiContext();
jndiContext.bind("node", node);
CamelContext camelContext = new DefaultCamelContext(jndiContext);</programlisting>

  <para>After this code, we have a properly configured CamelContext with all
  the configurations to use a DroolsComponent. However, before we are ready to
  execute Drools, we need to configure Camel entry points.</para>

  <para></para>
</section>
